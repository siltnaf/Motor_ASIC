; .\OUTPUT\initial.SRC generated from: SRC\initial.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE SRC\initial.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVECTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\initial.lst) TABS(2) SRC(.\OUTPUT\initial.SRC)

$NOMOD51

NAME	INITIAL

P2ETCLR	DATA	0CEH
TB80	BIT	098H.3
P3ETCLR	DATA	0DEH
P1TBPRD	DATA	0A1H
P0	DATA	080H
P4ETCLR	DATA	0F6H
P2TBPRD	DATA	0C1H
P1	DATA	090H
P3TBPRD	DATA	0D1H
P2	DATA	0A0H
P4TBPRD	DATA	0E1H
P3	DATA	0B0H
SM20	BIT	098H.5
P1AQCSFRC	DATA	0B1H
P2AQCSFRC	DATA	0C9H
P3AQCSFRC	DATA	0D9H
P4AQCSFRC	DATA	0F1H
P1TZFLG	DATA	0B2H
P2TZFLG	DATA	0CAH
P3TZFLG	DATA	0DAH
P1TZFRC	DATA	0B4H
IEN0	DATA	0A8H
P4TZFLG	DATA	0F2H
P2TZFRC	DATA	0CCH
IE	DATA	0A8H
EADC	BIT	0B8H.0
IEN1	DATA	0B8H
DPH1	DATA	085H
P3TZFRC	DATA	0DCH
IEN2	DATA	09AH
P4TZFRC	DATA	0F4H
CLK_PD_CON	DATA	08FH
IADC	BIT	0C0H.0
DPL1	DATA	084H
P1TZCLR	DATA	0B3H
P2TZCLR	DATA	0CBH
WDCON_7	BIT	0D8H.7
I2FR	BIT	0C8H.5
P3TZCLR	DATA	0DBH
I3FR	BIT	0C8H.6
P4TZCLR	DATA	0F3H
REN0	BIT	098H.4
ES	BIT	0A8H.4
IEX2	BIT	0C0H.1
IEX3	BIT	0C0H.2
RI	BIT	098H.0
IEX4	BIT	0C0H.3
IEX5	BIT	0C0H.4
IEX6	BIT	0C0H.5
CLK_DIV	DATA	091H
SP	DATA	081H
P1CMPA	DATA	0A3H
P2CMPA	DATA	0C3H
P1CMPB	DATA	0A5H
P3CMPA	DATA	0D3H
P2CMPB	DATA	0C5H
P4CMPA	DATA	0E3H
P3CMPB	DATA	0D5H
P4CMPB	DATA	0E5H
P1TBPRD_H	DATA	0A2H
P2TBPRD_H	DATA	0C2H
P3TBPRD_H	DATA	0D2H
P4TBPRD_H	DATA	0E2H
P1TBPRD_L	DATA	0A1H
P2TBPRD_L	DATA	0C1H
P3TBPRD_L	DATA	0D1H
P4TBPRD_L	DATA	0E1H
BREAKH	DATA	095H
S0RELH	DATA	0BAH
P00	BIT	080H.0
SBUF	DATA	099H
S1RELH	DATA	0BBH
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
BREAKL	DATA	094H
P31	BIT	0B0H.1
S0RELL	DATA	0AAH
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P32	BIT	0B0H.2
P23	BIT	0A0H.3
S1RELL	DATA	09DH
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P34	BIT	0B0H.4
BSHI_0	DATA	0ACH
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P35	BIT	0B0H.5
BSHI_1	DATA	0ADH
P26	BIT	0A0H.6
P17	BIT	090H.7
P36	BIT	0B0H.6
BSHI_2	DATA	0AEH
P27	BIT	0A0H.7
P37	BIT	0B0H.7
BSHI_3	DATA	0AFH
BSHO_0	DATA	0BCH
BSHO_1	DATA	0BDH
IE0	BIT	088H.1
BSHO_2	DATA	0BEH
IE1	BIT	088H.3
BSHO_3	DATA	0BFH
B	DATA	0F0H
MD0	DATA	0E9H
MD1	DATA	0EAH
BSHCTL	DATA	0ABH
MD2	DATA	0EBH
SWDT	BIT	0B8H.6
P1AQSFRC	DATA	0A7H
MD3	DATA	0ECH
P2AQSFRC	DATA	0C7H
MD4	DATA	0EDH
P3AQSFRC	DATA	0D7H
MD5	DATA	0EEH
P4AQSFRC	DATA	0E7H
ACC	DATA	0E0H
ES0	BIT	0A8H.4
IP0	DATA	0A9H
ET0	BIT	0A8H.1
BPCTRL	DATA	093H
IP1	DATA	0B9H
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
P1CMPA_H	DATA	0A4H
TH0	DATA	08CH
P2CMPA_H	DATA	0C4H
P1CMPB_H	DATA	0A6H
EX0	BIT	0A8H.0
TI0	BIT	098H.1
TH1	DATA	08DH
IT0	BIT	088H.0
P3CMPA_H	DATA	0D4H
P2CMPB_H	DATA	0C6H
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P4CMPA_H	DATA	0E4H
P3CMPB_H	DATA	0D6H
EX2	BIT	0B8H.1
P4CMPB_H	DATA	0E6H
P1CMPA_L	DATA	0A3H
EX3	BIT	0B8H.2
SM0	BIT	098H.7
POWER_CON	DATA	097H
TL0	DATA	08AH
P2CMPA_L	DATA	0C3H
P1CMPB_L	DATA	0A5H
EX4	BIT	0B8H.3
SM1	BIT	098H.6
TL1	DATA	08BH
P3CMPA_L	DATA	0D3H
P2CMPB_L	DATA	0C5H
EX5	BIT	0B8H.4
EAL	BIT	0A8H.7
P4CMPA_L	DATA	0E3H
P3CMPB_L	DATA	0D5H
EX6	BIT	0B8H.5
P4CMPB_L	DATA	0E5H
WDTREL	DATA	086H
TR0	BIT	088H.4
TR1	BIT	088H.6
INT_REG1	DATA	0F9H
DPH	DATA	083H
INT_REG2	DATA	0FAH
INT_REG3	DATA	0FDH
INT_REG4	DATA	0FEH
DPL	DATA	082H
S0BUF	DATA	099H
S1BUF	DATA	09CH
S0CON	DATA	098H
S1CON	DATA	09BH
T2CON	DATA	0C8H
DPS	DATA	092H
WDT	BIT	0A8H.6
CKCON	DATA	08EH
ARCON	DATA	0EFH
P1ETFLG	DATA	0B5H
SRAM_CON	DATA	0F8H
P2ETFLG	DATA	0CDH
P3ETFLG	DATA	0DDH
P1ETFRC	DATA	0B7H
P4ETFLG	DATA	0F5H
P2ETFRC	DATA	0CFH
MEM_CONFIG	DATA	0E8H
P3ETFRC	DATA	0DFH
P4ETFRC	DATA	0F7H
PSW	DATA	0D0H
WDCON	DATA	0D8H
IRCON	DATA	0C0H
RB80	BIT	098H.2
P1ETCLR	DATA	0B6H
?PR?InitEXT?INITIAL  SEGMENT CODE 
?PR?InitISDDebug?INITIAL                 SEGMENT CODE 
?PR?InitBreakPoint?INITIAL               SEGMENT CODE 
?PR?epwmOutputDisable?INITIAL            SEGMENT CODE 
?PR?epwmOutputEnable?INITIAL             SEGMENT CODE 
?PR?InitADC?INITIAL  SEGMENT CODE 
?DT?InitADC?INITIAL  SEGMENT DATA 
?PR?Initepwm?INITIAL SEGMENT CODE 
?PR?InitComp234?INITIAL                  SEGMENT CODE 
?PR?InitLED?INITIAL  SEGMENT CODE 
?PR?InitWatchDog?INITIAL                 SEGMENT CODE 
?PR?InitGPIO?INITIAL SEGMENT CODE 
?PR?InitTimer3?INITIAL                   SEGMENT CODE 
?PR?InitTimer01?INITIAL                  SEGMENT CODE 
?PR?SystemClock?INITIAL                  SEGMENT CODE 
?PR?sInitUART1?INITIAL                   SEGMENT CODE 
?PR?sInitUART2?INITIAL                   SEGMENT CODE 
	EXTRN	CODE (__isd_init)
	PUBLIC	sInitUART2
	PUBLIC	sInitUART1
	PUBLIC	SystemClock
	PUBLIC	InitTimer01
	PUBLIC	InitTimer3
	PUBLIC	InitGPIO
	PUBLIC	InitWatchDog
	PUBLIC	InitLED
	PUBLIC	InitComp234
	PUBLIC	Initepwm
	PUBLIC	InitADC
	PUBLIC	epwmOutputEnable
	PUBLIC	epwmOutputDisable
	PUBLIC	InitBreakPoint
	PUBLIC	InitISDDebug
	PUBLIC	InitEXT

	RSEG  ?DT?InitADC?INITIAL
?InitADC?BYTE:
          i?540:   DS   1
; #include "register.h"
; #include <intrins.h>
; #include "app.h"
; #include "initial.h"
; #include "ISD51.H"
; 
; 
; 
; 
; void InitEXT(void)

	RSEG  ?PR?InitEXT?INITIAL
InitEXT:
	USING	0
			; SOURCE LINE # 10
; {	
			; SOURCE LINE # 11
; 		EINT1_EN=0; 
			; SOURCE LINE # 12
	MOV  	DPTR,#0E08DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		EINT2_EN=1;				//enable EXT2
			; SOURCE LINE # 13
	MOV  	DPTR,#0E08DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		EINT3_EN=0;
			; SOURCE LINE # 14
	MOV  	DPTR,#0E08DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FBH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		EINT4_EN=0;
			; SOURCE LINE # 15
	MOV  	DPTR,#0E08DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		
; 		EINT2_CFG=RISING_EDGE;		//rising edge trigger
			; SOURCE LINE # 17
	MOV  	DPTR,#0E0BFH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		EX0=1;
			; SOURCE LINE # 18
	SETB 	EX0
; 		IT0=1;
			; SOURCE LINE # 19
	SETB 	IT0
; 		IE0=0;
			; SOURCE LINE # 20
	CLR  	IE0
; 		INT_REG1 &=0xf0;
			; SOURCE LINE # 21
	ANL  	INT_REG1,#0F0H
; 	
; 	
; }
			; SOURCE LINE # 24
?C0001:
	RET  	
; END OF InitEXT

; 
; void InitISDDebug(void)

	RSEG  ?PR?InitISDDebug?INITIAL
InitISDDebug:
	USING	0
			; SOURCE LINE # 26
; {
			; SOURCE LINE # 27
; 	
;     EAL = 0;
			; SOURCE LINE # 29
	CLR  	EAL
;     //ISD51++++++++++++++++++++++++++
;     #if ISDDebug == ENABLE_ISD
; 		InitBreakPoint();
			; SOURCE LINE # 32
	LCALL	InitBreakPoint
;     sInitUART1();
			; SOURCE LINE # 33
	LCALL	sInitUART1
;  
;     IP0 = 0x30;
			; SOURCE LINE # 35
	MOV  	IP0,#030H
;     IP1 = 0x20;
			; SOURCE LINE # 36
	MOV  	IP1,#020H
;     ET0 = 0;
			; SOURCE LINE # 37
	CLR  	ET0
;     EX6 = 0 ;
			; SOURCE LINE # 38
	CLR  	EX6
;     ES0 = 1;
			; SOURCE LINE # 39
	SETB 	ES0
;     EAL = 1;
			; SOURCE LINE # 40
	SETB 	EAL
;     _nop_();
			; SOURCE LINE # 41
	NOP  	
;     _nop_();
			; SOURCE LINE # 42
	NOP  	
;     _nop_();
			; SOURCE LINE # 43
	NOP  	
?C0002:
;     while(1)
			; SOURCE LINE # 44
;     {
			; SOURCE LINE # 45
;         P10 = 0;
			; SOURCE LINE # 46
	CLR  	P10
;         P10 = 1;
			; SOURCE LINE # 47
	SETB 	P10
;         ISDcheck();      // initialize uVision2 Debugger and continue program run
			; SOURCE LINE # 48
	JB   	ES,?C0004
	JNB  	RI,?C0004
	MOV  	A,SBUF
	XRL  	A,#0A5H
	JZ   	?C0006
	CLR  	RI
	SJMP 	?C0004
?C0006:
	LCALL	__isd_init
?C0007:
?C0005:
?C0004:
;         if((BPCTRL & 0x10) != 0) break;
			; SOURCE LINE # 49
	MOV  	A,BPCTRL
	JNB  	ACC.4,?C0002
	SJMP 	?C0003
?C0008:
;     }
			; SOURCE LINE # 50
	SJMP 	?C0002
?C0003:
;     _nop_();
			; SOURCE LINE # 51
	NOP  	
;     _nop_();
			; SOURCE LINE # 52
	NOP  	
;     _nop_();
			; SOURCE LINE # 53
	NOP  	
;     ET0 = 1;
			; SOURCE LINE # 54
	SETB 	ET0
;     EX6 = 1;
			; SOURCE LINE # 55
	SETB 	EX6
;     _nop_();
			; SOURCE LINE # 56
	NOP  	
;     _nop_();
			; SOURCE LINE # 57
	NOP  	
;     _nop_();
			; SOURCE LINE # 58
	NOP  	
;     #endif
;     //++++++++++++++++++++++++++++++
; 		EAL = 1;                                //enable all interrupts
			; SOURCE LINE # 61
	SETB 	EAL
; }
			; SOURCE LINE # 62
?C0009:
	RET  	
; END OF InitISDDebug

; 
; 
; 
; 
; 
; void InitBreakPoint  (void)

	RSEG  ?PR?InitBreakPoint?INITIAL
InitBreakPoint:
			; SOURCE LINE # 68
; {
			; SOURCE LINE # 69
;     BPCTRL   = 0x01;
			; SOURCE LINE # 70
	MOV  	BPCTRL,#01H
; 	BREAKL   = 0xff;
			; SOURCE LINE # 71
	MOV  	BREAKL,#0FFH
; 	BREAKH   = 0xff;
			; SOURCE LINE # 72
	MOV  	BREAKH,#0FFH
; }
			; SOURCE LINE # 73
?C0010:
	RET  	
; END OF InitBreakPoint

; 
; void epwmOutputDisable(void)

	RSEG  ?PR?epwmOutputDisable?INITIAL
epwmOutputDisable:
			; SOURCE LINE # 75
; {
			; SOURCE LINE # 76
; 	P1AQCSFRC = 0x05;						// force epwmxA and epwmxB output low
			; SOURCE LINE # 77
	MOV  	P1AQCSFRC,#05H
; 	P2AQCSFRC = 0x05;
			; SOURCE LINE # 78
	MOV  	P2AQCSFRC,#05H
; 	P3AQCSFRC = 0x05;
			; SOURCE LINE # 79
	MOV  	P3AQCSFRC,#05H
; 	P4AQCSFRC = 0x05;
			; SOURCE LINE # 80
	MOV  	P4AQCSFRC,#05H
; }
			; SOURCE LINE # 81
?C0011:
	RET  	
; END OF epwmOutputDisable

; 
; void epwmOutputEnable(void)

	RSEG  ?PR?epwmOutputEnable?INITIAL
epwmOutputEnable:
			; SOURCE LINE # 83
; {
			; SOURCE LINE # 84
; 	P1AQCSFRC = 0x0F;						// software force disable
			; SOURCE LINE # 85
	MOV  	P1AQCSFRC,#0FH
; 	P2AQCSFRC = 0x0F;
			; SOURCE LINE # 86
	MOV  	P2AQCSFRC,#0FH
; 	P3AQCSFRC = 0x0F;
			; SOURCE LINE # 87
	MOV  	P3AQCSFRC,#0FH
; 	P4AQCSFRC = 0x0F;
			; SOURCE LINE # 88
	MOV  	P4AQCSFRC,#0FH
; }
			; SOURCE LINE # 89
?C0012:
	RET  	
; END OF epwmOutputEnable

; 
; void InitADC(void)

	RSEG  ?PR?InitADC?INITIAL
InitADC:
	USING	0
			; SOURCE LINE # 91
; {
			; SOURCE LINE # 92
;     unsigned char i;
;     //unsigned short j;
; 
;     OPAMP_SEL = 0x0F;
			; SOURCE LINE # 96
	MOV  	DPTR,#0E0A5H
	MOV  	A,#0FH
	MOVX 	@DPTR,A
;     ADC_ISEL = 0x05;
			; SOURCE LINE # 97
	MOV  	DPTR,#0E0BEH
	MOV  	A,#05H
	MOVX 	@DPTR,A
;     ADC_CLK_CTRL = 0x03;
			; SOURCE LINE # 98
	MOV  	DPTR,#0E0ECH
	MOV  	A,#03H
	MOVX 	@DPTR,A
;     LDO_CON |= 1 << 1;
			; SOURCE LINE # 99
	MOV  	DPTR,#0E09DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     //for(j = 0;j < 2500;j++);
;     ADCHS = 0x40;
			; SOURCE LINE # 101
	MOV  	DPTR,#0E05CH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#040H
	MOVX 	@DPTR,A
; //    ADCHS = 0x07;//0x38;//0x02;//0x20;//0x10;//0x08;//0x38;//0x18;//0x08;                           // select channel 4
; //    ADSHBP = 0x00;//0x38;                          // ADC channel 4,5,6 S/H bypass
; //    AD1OST_L = 0x00;
; //    AD1OST_H = 0xFC;//0x04;
; //    AD2OST_L = 0x00;
; //    AD2OST_H = 0xFC;//0x04;
; //    AD3OST_L = 0x00;
; //    AD3OST_H = 0xFC;//0x04;
; //    AD4OST_L = 0x00;
; //    AD4OST_H = 0xFC;//0x04;
; //    AD5OST_L = 0x00;
; //    AD5OST_H = 0xFC;//0x04;
; //    AD6OST_L = 0x00;
; //    AD6OST_H = 0xFC;//0x04;
;     //AD7OST_L = 0x00;
;     //AD7OST_H = 0x04;
;     i = ADFLG;
			; SOURCE LINE # 118
	MOV  	DPTR,#0E05BH
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	i?540,R7
;     IADC = 0;
			; SOURCE LINE # 119
	CLR  	IADC
;     ADCTL = 0x01;                           // select software force trigger and enable ADC INT
			; SOURCE LINE # 120
	MOV  	DPTR,#0E05AH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#01H
	MOVX 	@DPTR,A
;     //ADCTL = 0x09;//0x11;                           // select epwm soca and enable ADC INT
;     EADC = 1;
			; SOURCE LINE # 122
	SETB 	EADC
; }
			; SOURCE LINE # 123
?C0013:
	RET  	
; END OF InitADC

; 
; 
; void Initepwm(void)

	RSEG  ?PR?Initepwm?INITIAL
Initepwm:
	USING	0
			; SOURCE LINE # 126
; {
			; SOURCE LINE # 127
; 	P2_FN_H = 0x55;							// p2_4 ~ p2_7 as pwm2x ~ pwm1x
			; SOURCE LINE # 128
	MOV  	DPTR,#0E0E0H
	MOV  	A,#055H
	MOVX 	@DPTR,A
; 	P2_FN_L = P2_FN_L & 0x0F | 0x50;		// p2_2 ~ p2_3 as pwm3x
			; SOURCE LINE # 129
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#050H
	MOV  	R7,A
	MOV  	DPTR,#0E0E1H
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	//P0_FN_L = P0_FN_L & 0xF0 | 0x05;		  // p0_0 ~ p0_1 as pwm4x
; 
; //	P1TBPRD_L = 0x90;						// pwm period is 10KHz
; //	P1TBPRD_H = 0x01;
; //	P2TBPRD_L = 0x90;
; //	P2TBPRD_H = 0x01;
; //	P3TBPRD_L = 0x90;
; //	P3TBPRD_H = 0x01;
; //	P4TBPRD_L = 0x90;
; //	P4TBPRD_H = 0x01;
; 
; 	PCLKCR = 0x1E;//0x1F							// clock for pwm1 ~ pwm4 is enable,and synchronize all channel disable
			; SOURCE LINE # 141
	MOV  	DPTR,#0E000H
	MOV  	A,#01EH
	MOVX 	@DPTR,A
; 	PSYNCICR = 0x3C;//0x1F;						// all synchronize input enable
			; SOURCE LINE # 142
	MOV  	DPTR,#0E001H
	MOV  	A,#03CH
	MOVX 	@DPTR,A
; 
; 	P1TBCTL_L = 0x02;//0x12;						// period load from shadow,up down mode,synchronize at CTR = ZERO
			; SOURCE LINE # 144
	MOV  	DPTR,#0E003H
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	P1TBCTL_H = 0x80;						// time base free run when emulation
			; SOURCE LINE # 145
	MOV  	DPTR,#0E002H
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 	P2TBCTL_L = 0x02;//0x12;
			; SOURCE LINE # 146
	MOV  	DPTR,#0E019H
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	P2TBCTL_H = 0x80;
			; SOURCE LINE # 147
	MOV  	DPTR,#0E018H
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 	P3TBCTL_L = 0x02;//0x12;
			; SOURCE LINE # 148
	MOV  	DPTR,#0E02FH
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	P3TBCTL_H = 0x80;
			; SOURCE LINE # 149
	MOV  	DPTR,#0E02EH
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 	P4TBCTL_L = 0x02;//0x12;
			; SOURCE LINE # 150
	MOV  	DPTR,#0E045H
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	P4TBCTL_H = 0x80;
			; SOURCE LINE # 151
	MOV  	DPTR,#0E044H
	MOV  	A,#080H
	MOVX 	@DPTR,A
; 
; //	P1TBCTL_L = 0x00;						// period load from shadow,up mode
; //	P1TBCTL_H = 0x80;
; //	P2TBCTL_L = 0x00;
; //	P2TBCTL_H = 0x80;
; //	P3TBCTL_L = 0x00;
; //	P3TBCTL_H = 0x80;
; //	P4TBCTL_L = 0x00;
; //	P4TBCTL_H = 0x80;
; 
; 	P1CMPCTL = 0x00;						// shadow on,update at CTR = ZERO
			; SOURCE LINE # 162
	MOV  	DPTR,#0E007H
	CLR  	A
	MOVX 	@DPTR,A
; 	P2CMPCTL = 0x00;
			; SOURCE LINE # 163
	MOV  	DPTR,#0E01DH
	CLR  	A
	MOVX 	@DPTR,A
; 	P3CMPCTL = 0x00;
			; SOURCE LINE # 164
	MOV  	DPTR,#0E033H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4CMPCTL = 0x00;
			; SOURCE LINE # 165
	MOV  	DPTR,#0E049H
	CLR  	A
	MOVX 	@DPTR,A
; 	P1AQCTLA_L = 0x60;						// when cmpA,count up is set,count down is clear
			; SOURCE LINE # 166
	MOV  	DPTR,#0E009H
	MOV  	A,#060H
	MOVX 	@DPTR,A
; 	P1AQCTLA_H = 0x00;						// when cmpB pwmxA do nothing
			; SOURCE LINE # 167
	MOV  	DPTR,#0E008H
	CLR  	A
	MOVX 	@DPTR,A
; 	P2AQCTLA_L = 0x60;
			; SOURCE LINE # 168
	MOV  	DPTR,#0E01FH
	MOV  	A,#060H
	MOVX 	@DPTR,A
; 	P2AQCTLA_H = 0x00;
			; SOURCE LINE # 169
	MOV  	DPTR,#0E01EH
	CLR  	A
	MOVX 	@DPTR,A
; 	P3AQCTLA_L = 0x60;
			; SOURCE LINE # 170
	MOV  	DPTR,#0E035H
	MOV  	A,#060H
	MOVX 	@DPTR,A
; 	P3AQCTLA_H = 0x00;
			; SOURCE LINE # 171
	MOV  	DPTR,#0E034H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4AQCTLA_L = 0x60;
			; SOURCE LINE # 172
	MOV  	DPTR,#0E04BH
	MOV  	A,#060H
	MOVX 	@DPTR,A
; 	P4AQCTLA_H = 0x00;
			; SOURCE LINE # 173
	MOV  	DPTR,#0E04AH
	CLR  	A
	MOVX 	@DPTR,A
; 	P1AQCTLB_L = 0x00;//0x60;
			; SOURCE LINE # 174
	MOV  	DPTR,#0E00BH
	CLR  	A
	MOVX 	@DPTR,A
; 	P1AQCTLB_H = 0x00;
			; SOURCE LINE # 175
	MOV  	DPTR,#0E00AH
	CLR  	A
	MOVX 	@DPTR,A
; 	P2AQCTLB_L = 0x00;//0x60;
			; SOURCE LINE # 176
	MOV  	DPTR,#0E021H
	CLR  	A
	MOVX 	@DPTR,A
; 	P2AQCTLB_H = 0x00;
			; SOURCE LINE # 177
	MOV  	DPTR,#0E020H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3AQCTLB_L = 0x00;//0x60;
			; SOURCE LINE # 178
	MOV  	DPTR,#0E037H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3AQCTLB_H = 0x00;
			; SOURCE LINE # 179
	MOV  	DPTR,#0E036H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4AQCTLB_L = 0x00;//0x60;
			; SOURCE LINE # 180
	MOV  	DPTR,#0E04DH
	CLR  	A
	MOVX 	@DPTR,A
; 	P4AQCTLB_H = 0x00;
			; SOURCE LINE # 181
	MOV  	DPTR,#0E04CH
	CLR  	A
	MOVX 	@DPTR,A
; 
; //	P1AQCTLA_L = 0x12;							// CTR = ZERO set,CTR = CMPA up clear,CTR = PRD nothing,CTR = CMPA down nothing
; //	P1AQCTLA_H = 0x00;							// when cmpB pwmxA do nothing
; //	P1AQCTLB_L = 0x02;							// CTR = ZERO set,CTR = CMPA up nothing,CTR = PRD nothing,CTR = CMPA down nothing
; //	P1AQCTLB_H = 0x01;							// CTR = CMPB clear
; //	P2AQCTLA_L = 0x12;
; //	P2AQCTLA_H = 0x00;
; //	P2AQCTLB_L = 0x02;
; //	P2AQCTLB_H = 0x01;
; //	P3AQCTLA_L = 0x12;
; //	P3AQCTLA_H = 0x00;
; //	P3AQCTLB_L = 0x02;
; //	P3AQCTLB_H = 0x01;
; //	P4AQCTLA_L = 0x12;
; //	P4AQCTLA_H = 0x00;
; //	P4AQCTLB_L = 0x02;
; //	P4AQCTLB_H = 0x01;
; 
; 	P1DBCTL = 0x0B;							// delay source is epwmxA,dead band full,epwmxB invert
			; SOURCE LINE # 200
	MOV  	DPTR,#0E00CH
	MOV  	A,#0BH
	MOVX 	@DPTR,A
; 	P2DBCTL = 0x0B;
			; SOURCE LINE # 201
	MOV  	DPTR,#0E022H
	MOV  	A,#0BH
	MOVX 	@DPTR,A
; 	P3DBCTL = 0x0B;
			; SOURCE LINE # 202
	MOV  	DPTR,#0E038H
	MOV  	A,#0BH
	MOVX 	@DPTR,A
; 	P4DBCTL = 0x0B;
			; SOURCE LINE # 203
	MOV  	DPTR,#0E04EH
	MOV  	A,#0BH
	MOVX 	@DPTR,A
; //	P1DBCTL = 0x07;							// delay source is epwmxA,dead band full,epwmxA invert
; //	P2DBCTL = 0x07;
; //	P3DBCTL = 0x07;
; //	P4DBCTL = 0x07;
; 	P1DBRED_L = 0x32;//0x0A						// rise edge dead time is 1.25uS
			; SOURCE LINE # 208
	MOV  	DPTR,#0E00EH
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P1DBRED_H = 0x00;
			; SOURCE LINE # 209
	MOV  	DPTR,#0E00DH
	CLR  	A
	MOVX 	@DPTR,A
; 	P2DBRED_L = 0x32;
			; SOURCE LINE # 210
	MOV  	DPTR,#0E024H
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P2DBRED_H = 0x00;
			; SOURCE LINE # 211
	MOV  	DPTR,#0E023H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3DBRED_L = 0x32;
			; SOURCE LINE # 212
	MOV  	DPTR,#0E03AH
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P3DBRED_H = 0x00;
			; SOURCE LINE # 213
	MOV  	DPTR,#0E039H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4DBRED_L = 0x32;
			; SOURCE LINE # 214
	MOV  	DPTR,#0E050H
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P4DBRED_H = 0x00;
			; SOURCE LINE # 215
	MOV  	DPTR,#0E04FH
	CLR  	A
	MOVX 	@DPTR,A
; 	P1DBFED_L = 0x32;						// fall edge dead time is 1.25uS
			; SOURCE LINE # 216
	MOV  	DPTR,#0E010H
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P1DBFED_H = 0x00;
			; SOURCE LINE # 217
	MOV  	DPTR,#0E00FH
	CLR  	A
	MOVX 	@DPTR,A
; 	P2DBFED_L = 0x32;
			; SOURCE LINE # 218
	MOV  	DPTR,#0E026H
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P2DBFED_H = 0x00;
			; SOURCE LINE # 219
	MOV  	DPTR,#0E025H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3DBFED_L = 0x32;
			; SOURCE LINE # 220
	MOV  	DPTR,#0E03CH
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P3DBFED_H = 0x00;
			; SOURCE LINE # 221
	MOV  	DPTR,#0E03BH
	CLR  	A
	MOVX 	@DPTR,A
; 	P4DBFED_L = 0x32;
			; SOURCE LINE # 222
	MOV  	DPTR,#0E052H
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P4DBFED_H = 0x00;
			; SOURCE LINE # 223
	MOV  	DPTR,#0E051H
	CLR  	A
	MOVX 	@DPTR,A
; 
; //	P1DBCTL = 0x00;							// dead band is bypass
; //	P2DBCTL = 0x00;
; //	P3DBCTL = 0x00;
; //	P4DBCTL = 0x00;
; 
; 	P1TZSEL = 0x00;							// disable all trigger zone
			; SOURCE LINE # 230
	MOV  	DPTR,#0E011H
	CLR  	A
	MOVX 	@DPTR,A
; 	P2TZSEL = 0x00;
			; SOURCE LINE # 231
	MOV  	DPTR,#0E027H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3TZSEL = 0x00;
			; SOURCE LINE # 232
	MOV  	DPTR,#0E03DH
	CLR  	A
	MOVX 	@DPTR,A
; 	P4TZSEL = 0x00;
			; SOURCE LINE # 233
	MOV  	DPTR,#0E053H
	CLR  	A
	MOVX 	@DPTR,A
; 	P1TZCTL = 0x00;							// when trigger,epwmxA and epwmxB high impedance
			; SOURCE LINE # 234
	MOV  	DPTR,#0E012H
	CLR  	A
	MOVX 	@DPTR,A
; 	P2TZCTL = 0x00;
			; SOURCE LINE # 235
	MOV  	DPTR,#0E028H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3TZCTL = 0x00;
			; SOURCE LINE # 236
	MOV  	DPTR,#0E03EH
	CLR  	A
	MOVX 	@DPTR,A
; 	P4TZCTL = 0x00;
			; SOURCE LINE # 237
	MOV  	DPTR,#0E054H
	CLR  	A
	MOVX 	@DPTR,A
; //	P1TZEINT = 0x00;						// CBC trigger interrupt and OST interrupt disable
; //	P2TZEINT = 0x00;
; //	P3TZEINT = 0x00;
; //	P4TZEINT = 0x00;
; 
; //	P1TZSEL = 0x01;							// OSHT enable
; //	P2TZSEL = 0x01;
; //	P3TZSEL = 0x01;
; //	P4TZSEL = 0x01;
; //	P1TZCTL = 0x00;							// when trigger,epwmxA and epwmxB high impedance
; //	P2TZCTL = 0x00;
; //	P3TZCTL = 0x00;
; //	P4TZCTL = 0x00;
; //	P1TZEINT = 0x00;						// CBC trigger interrupt and OST interrupt disable
; //	P2TZEINT = 0x00;
; //	P3TZEINT = 0x00;
; //	P4TZEINT = 0x00;
; 
; //	P1TZSEL = 0x02;							// CBC enable
; //	P2TZSEL = 0x02;
; //	P3TZSEL = 0x02;
; //	P4TZSEL = 0x02;
; //	P1TZCTL = 0x00;							// when trigger,epwmxA and epwmxB high impedance
; //	P2TZCTL = 0x00;
; //	P3TZCTL = 0x00;
; //	P4TZCTL = 0x00;
; //	P1TZEINT = 0x00;						// CBC trigger interrupt and OST interrupt disable
; //	P2TZEINT = 0x00;
; //	P3TZEINT = 0x00;
; //	P4TZEINT = 0x00;
; 
; 	P1ETSEL_L = 0x09;						// epwm interrupt enable at CTR = ZERO
			; SOURCE LINE # 269
	MOV  	DPTR,#0E015H
	MOV  	A,#09H
	MOVX 	@DPTR,A
;     P1ETSEL_H = 0x0C;//0xE0;//0xA0;//0x90;//0x0A;//0x09;                       // enable SOCA,SOCA is CTR = ZERO
			; SOURCE LINE # 270
	MOV  	DPTR,#0E014H
	MOV  	A,#0CH
	MOVX 	@DPTR,A
; 	P2ETSEL_L = 0x00;
			; SOURCE LINE # 271
	MOV  	DPTR,#0E02BH
	CLR  	A
	MOVX 	@DPTR,A
; 	P2ETSEL_H = 0x00;//0xF0;//0x00;
			; SOURCE LINE # 272
	MOV  	DPTR,#0E02AH
	CLR  	A
	MOVX 	@DPTR,A
; 	P3ETSEL_L = 0x00;
			; SOURCE LINE # 273
	MOV  	DPTR,#0E041H
	CLR  	A
	MOVX 	@DPTR,A
; 	P3ETSEL_H = 0x00;
			; SOURCE LINE # 274
	MOV  	DPTR,#0E040H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4ETSEL_L = 0x00;
			; SOURCE LINE # 275
	MOV  	DPTR,#0E057H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4ETSEL_H = 0x00;
			; SOURCE LINE # 276
	MOV  	DPTR,#0E056H
	CLR  	A
	MOVX 	@DPTR,A
; 	P1ETPS_L = 0x05;						// 1 event 1 interrupt
			; SOURCE LINE # 277
	MOV  	DPTR,#0E017H
	MOV  	A,#05H
	MOVX 	@DPTR,A
;     P1ETPS_H = 0x05;//0x50;//0x05;                        // 1 evnt,SOCA period is 1
			; SOURCE LINE # 278
	MOV  	DPTR,#0E016H
	MOV  	A,#05H
	MOVX 	@DPTR,A
; 	P2ETPS_L = 0x00;
			; SOURCE LINE # 279
	MOV  	DPTR,#0E02DH
	CLR  	A
	MOVX 	@DPTR,A
;     P2ETPS_H = 0x00;//0x50;
			; SOURCE LINE # 280
	MOV  	DPTR,#0E02CH
	CLR  	A
	MOVX 	@DPTR,A
; 	P3ETPS_L = 0x00;
			; SOURCE LINE # 281
	MOV  	DPTR,#0E043H
	CLR  	A
	MOVX 	@DPTR,A
; 	P4ETPS_L = 0x00;
			; SOURCE LINE # 282
	MOV  	DPTR,#0E059H
	CLR  	A
	MOVX 	@DPTR,A
; 
; 	P1TBPRD_L = 0xD0;						// pwm period is 0x0190@8MHz 10KHz 0x7D0@40MHz
			; SOURCE LINE # 284
	MOV  	P1TBPRD_L,#0D0H
; 	P1TBPRD_H = 0x07;
			; SOURCE LINE # 285
	MOV  	P1TBPRD_H,#07H
; 	P2TBPRD_L = 0xD0;
			; SOURCE LINE # 286
	MOV  	P2TBPRD_L,#0D0H
; 	P2TBPRD_H = 0x07;
			; SOURCE LINE # 287
	MOV  	P2TBPRD_H,#07H
; 	P3TBPRD_L = 0xD0;
			; SOURCE LINE # 288
	MOV  	P3TBPRD_L,#0D0H
; 	P3TBPRD_H = 0x07;
			; SOURCE LINE # 289
	MOV  	P3TBPRD_H,#07H
; 	P4TBPRD_L = 0xD0;
			; SOURCE LINE # 290
	MOV  	P4TBPRD_L,#0D0H
; 	P4TBPRD_H = 0x07;
			; SOURCE LINE # 291
	MOV  	P4TBPRD_H,#07H
; 
; //	P1TBPRD_L = 0x1F;						// pwm period is 10KHz
; //	P1TBPRD_H = 0x03;
; //	P2TBPRD_L = 0x1F;
; //	P2TBPRD_H = 0x03;
; //	P3TBPRD_L = 0x1F;
; //	P3TBPRD_H = 0x03;
; //	P4TBPRD_L = 0x1F;
; //	P4TBPRD_H = 0x03;
; 
; 	P1CMPA_L = 0xE8;						// pwm period is 0x0C8@8MHz 10KHz
			; SOURCE LINE # 302
	MOV  	P1CMPA_L,#0E8H
; 	P1CMPA_H = 0x03;
			; SOURCE LINE # 303
	MOV  	P1CMPA_H,#03H
; 	//P1CMPB_L = 0xC8;
; 	//P1CMPB_H = 0x00;
; 	P2CMPA_L = 0xE8;
			; SOURCE LINE # 306
	MOV  	P2CMPA_L,#0E8H
; 	P2CMPA_H = 0x03;
			; SOURCE LINE # 307
	MOV  	P2CMPA_H,#03H
; 	//P2CMPB_L = 0xC8;
; 	//P2CMPB_H = 0x00;
; 	P3CMPA_L = 0xE8;
			; SOURCE LINE # 310
	MOV  	P3CMPA_L,#0E8H
; 	P3CMPA_H = 0x03;
			; SOURCE LINE # 311
	MOV  	P3CMPA_H,#03H
; 	//P3CMPB_L = 0xC8;
; 	//P3CMPB_H = 0x00;
; 	P4CMPA_L = 0xE8;
			; SOURCE LINE # 314
	MOV  	P4CMPA_L,#0E8H
; 	P4CMPA_H = 0x03;
			; SOURCE LINE # 315
	MOV  	P4CMPA_H,#03H
; 	//P4CMPB_L = 0xC8;
; 	//P4CMPB_H = 0x00;
; 
; //	P1CMPA_L = 0xF4;						// pwm period is 0x0C8@8MHz 10KHz
; //	P1CMPA_H = 0x01;
; //	P1CMPB_L = 0xEE;
; //	P1CMPB_H = 0x02;
; //	P2CMPA_L = 0xE8;
; //	P2CMPA_H = 0x03;
; //	P2CMPB_L = 0xE2;
; //	P2CMPB_H = 0x04;
; //	P3CMPA_L = 0xDC;
; //	P3CMPA_H = 0x05;
; 
; //	P1CMPA_L = 0x90;
; //	P1CMPA_H = 0x01;
; //	P1CMPB_L = 0x90;
; //	P1CMPB_H = 0x01;
; //	P2CMPA_L = 0x90;
; //	P2CMPA_H = 0x01;
; //	P2CMPB_L = 0x90;
; //	P2CMPB_H = 0x01;
; //	P3CMPA_L = 0x90;
; //	P3CMPA_H = 0x01;
; //	P3CMPB_L = 0x90;
; //	P3CMPB_H = 0x01;
; //	P4CMPA_L = 0x90;
; //	P4CMPA_H = 0x01;
; //	P4CMPB_L = 0x90;
; //	P4CMPB_H = 0x01;
; 
; //	OPAMP_SEL = 0xF0;
; //	COMP_INT_EN = COMP_INT_EN | (1 << 0);	// comparator1 interrupt output enable
; //	COMP_INT_SET = COMP_INT_SET & 0xFC;		// comparator1 falling edge trigger
; //	P1_FN_H = P1_FN_H & 0xF3 | 0x08;		// comp1 output
; //	ex1 = 1;								// enable comp1 to CPU interrupt
; 
; 	PCLKCR = PCLKCR | 1;					// all epwm channel synchronize enable
			; SOURCE LINE # 353
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 	P1ETCLR = 1;
			; SOURCE LINE # 355
	MOV  	P1ETCLR,#01H
; 	I2FR = 1;
			; SOURCE LINE # 356
	SETB 	I2FR
; 	EX2 = 1;								// enable epwm1,2,3 interrupt
			; SOURCE LINE # 357
	SETB 	EX2
; 	//ex3 = 1;								// enable epwm4 interrupt
; }
			; SOURCE LINE # 359
?C0014:
	RET  	
; END OF Initepwm

; 
; 
; void InitComp234(void)

	RSEG  ?PR?InitComp234?INITIAL
InitComp234:
	USING	0
			; SOURCE LINE # 362
; {
			; SOURCE LINE # 363
; 	P1_FN_L = P1_FN_L & 0x0F | 0xA0;
			; SOURCE LINE # 364
	MOV  	DPTR,#0E0DBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#0A0H
	MOV  	R7,A
	MOV  	DPTR,#0E0DBH
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1_FN_H = P1_FN_H & 0xF0 | 0x0A;
			; SOURCE LINE # 365
	MOV  	DPTR,#0E0DAH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F0H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#0AH
	MOV  	R7,A
	MOV  	DPTR,#0E0DAH
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	//COMP_FILTER_1 = 4;
; 	//COMP_FILTER_2 = 4;
; 	//COMP_FILTER_3 = 4;
; 	//COMP_FILTER_4 = 4;
; 	OPAMP_SEL = 0xF0;
			; SOURCE LINE # 370
	MOV  	DPTR,#0E0A5H
	MOV  	A,#0F0H
	MOVX 	@DPTR,A
;     COMP_INT_SEL = 0xAA;//0;//0x55;                    // comp1 ~ comp4 all trigger at rise egde
			; SOURCE LINE # 371
	MOV  	DPTR,#0E0C6H
	MOV  	A,#0AAH
	MOVX 	@DPTR,A
; 	COMP_INT_EN = 0x3E;//0x1E;//0x14;						// comp2,3,4 interrupt enable,and comp2,3,4 to CPU enable
			; SOURCE LINE # 372
	MOV  	DPTR,#0E0EBH
	MOV  	A,#03EH
	MOVX 	@DPTR,A
; 	EX4 = 1;								// external interrupt 4 enable
			; SOURCE LINE # 373
	SETB 	EX4
; }
			; SOURCE LINE # 374
?C0015:
	RET  	
; END OF InitComp234

; 
; void InitLED(void)

	RSEG  ?PR?InitLED?INITIAL
InitLED:
	USING	0
			; SOURCE LINE # 376
; {
			; SOURCE LINE # 377
; 	P0_FN_L = 0x00;															// p0_0 ~ p0_3 as GPIO
			; SOURCE LINE # 378
	MOV  	DPTR,#0E0D5H
	CLR  	A
	MOVX 	@DPTR,A
; 	P0_FN_H = 0x00;															// p0_4 ~ p0_7 as GPIO
			; SOURCE LINE # 379
	MOV  	DPTR,#0E0D4H
	CLR  	A
	MOVX 	@DPTR,A
; 	P1_FN_L = 0x00;															// p1_0 ~ p1_3 as GPIO
			; SOURCE LINE # 380
	MOV  	DPTR,#0E0DBH
	CLR  	A
	MOVX 	@DPTR,A
; 	P1_FN_H = 0x00;															// p1_4 ~ p1_7 as GPIO
			; SOURCE LINE # 381
	MOV  	DPTR,#0E0DAH
	CLR  	A
	MOVX 	@DPTR,A
; 	P0_DD = P0_DD | (1 << 3) | (1 << 6) | (1 << 7);							// p0_0 ~ p0_7 output
			; SOURCE LINE # 382
	MOV  	DPTR,#0E0D6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#0C8H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1_DD = P1_DD | (1 << 2) | (1 << 3) | (1 << 4) | (1 << 5);				// p1_0 ~ p1_7 output
			; SOURCE LINE # 383
	MOV  	DPTR,#0E0DCH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03CH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 384
?C0016:
	RET  	
; END OF InitLED

; 
; 
; void InitWatchDog(void)

	RSEG  ?PR?InitWatchDog?INITIAL
InitWatchDog:
	USING	0
			; SOURCE LINE # 387
; {
			; SOURCE LINE # 388
; 		WDTREL = 0xFF;
			; SOURCE LINE # 389
	MOV  	WDTREL,#0FFH
; 	WDT = 1;
			; SOURCE LINE # 390
	SETB 	WDT
; 	SWDT = 1;
			; SOURCE LINE # 391
	SETB 	SWDT
;     P1_FN_L = P1_FN_L & 0xFC;               //p1_0 as GPIO
			; SOURCE LINE # 392
	MOV  	DPTR,#0E0DBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P1_DD = P1_DD & 0xFE;               	//p1_0 as output
			; SOURCE LINE # 393
	MOV  	DPTR,#0E0DCH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 394
?C0017:
	RET  	
; END OF InitWatchDog

; 
; 
; void InitGPIO(void)

	RSEG  ?PR?InitGPIO?INITIAL
InitGPIO:
	USING	0
			; SOURCE LINE # 397
; {
			; SOURCE LINE # 398
; 		P0_FN_L = 0x00;									// P00 ~ P03as GPIO
			; SOURCE LINE # 399
	MOV  	DPTR,#0E0D5H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_FN_H = 0x00;									// P04 ~ P07 as GPIO
			; SOURCE LINE # 400
	MOV  	DPTR,#0E0D4H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_DD = 0x00;										// 	P00 ~  P07 intput
			; SOURCE LINE # 401
	MOV  	DPTR,#0E0D6H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_PE = 0xFF;										// output resistor enable	
			; SOURCE LINE # 402
	MOV  	DPTR,#0E0D8H
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P0_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 403
	MOV  	DPTR,#0E0D7H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 404
	MOV  	DPTR,#0E0D9H
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 		P1_FN_L = 0x00;									// P10 ~ P13 as GPIO
			; SOURCE LINE # 406
	MOV  	DPTR,#0E0DBH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_FN_H = 0x00;									// P14 ~ P17 as GPIO
			; SOURCE LINE # 407
	MOV  	DPTR,#0E0DAH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_DD = 0x00;										// P10 ~ P17 intput
			; SOURCE LINE # 408
	MOV  	DPTR,#0E0DCH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_PE = 0xFF;										// output resistor enable	
			; SOURCE LINE # 409
	MOV  	DPTR,#0E0DEH
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P1_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 410
	MOV  	DPTR,#0E0DDH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 411
	MOV  	DPTR,#0E0DFH
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 		P2_FN_L = 0x00;									// P20 ~ P23 as GPIO
			; SOURCE LINE # 413
	MOV  	DPTR,#0E0E1H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_FN_H = 0x00;									// P24 ~ P27 as GPIO
			; SOURCE LINE # 414
	MOV  	DPTR,#0E0E0H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_DD = 0x00;										// P20~ P27 intput
			; SOURCE LINE # 415
	MOV  	DPTR,#0E0E2H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_PE = 0xFF;										// pull/down resistor enable	
			; SOURCE LINE # 416
	MOV  	DPTR,#0E0E4H
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P2_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 417
	MOV  	DPTR,#0E0E3H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 418
	MOV  	DPTR,#0E0E5H
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 	// use P26 and P00 as output
; 	
;     P00_FN= CFG0;              	 // P00 as GPIO
			; SOURCE LINE # 422
	MOV  	DPTR,#0E0D5H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P00_DD = OUTPUT;               //P00 as output
			; SOURCE LINE # 423
	MOV  	DPTR,#0E0D6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P00_PE = RES_DIS;               //P00 pull resistor off
			; SOURCE LINE # 424
	MOV  	DPTR,#0E0D8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P00_DS = I_4MA;
			; SOURCE LINE # 425
	MOV  	DPTR,#0E0D7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
;     P26_FN = CFG0;               //P26 as GPIO
			; SOURCE LINE # 427
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P26_DD = OUTPUT;               //P26 as output
			; SOURCE LINE # 428
	MOV  	DPTR,#0E0E2H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P26_PE = RES_DIS;               //P26 output resistor off
			; SOURCE LINE # 429
	MOV  	DPTR,#0E0E4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P26_DS = I_4MA;
			; SOURCE LINE # 430
	MOV  	DPTR,#0E0E3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 	
; 	
; 	
; 	// use P20 as EXT2
; 	
; 	    P20_FN= CFG1;              	 //P20 as EXT2
			; SOURCE LINE # 437
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			P20_DD = INPUT;               //P20 as input
			; SOURCE LINE # 438
	MOV  	DPTR,#0E0E2H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			P20_PE = RES_EN;               // P20 output resistor enable
			; SOURCE LINE # 439
	MOV  	DPTR,#0E0E4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			P20_PS = PULL_DOWN;               //P20 with pull down resistor
			; SOURCE LINE # 440
	MOV  	DPTR,#0E0E5H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	
; }
			; SOURCE LINE # 444
?C0018:
	RET  	
; END OF InitGPIO

; 
; void InitTimer3(void)

	RSEG  ?PR?InitTimer3?INITIAL
InitTimer3:
	USING	0
			; SOURCE LINE # 446
; {
			; SOURCE LINE # 447
; 	T3PS = 0;								// no divider
			; SOURCE LINE # 448
	MOV  	DPTR,#0E0C9H
	CLR  	A
	MOVX 	@DPTR,A
; 	T3RC_L = 0xC0;
			; SOURCE LINE # 449
	MOV  	DPTR,#0E0CDH
	MOV  	A,#0C0H
	MOVX 	@DPTR,A
; 	T3RC_H = 0xE0;
			; SOURCE LINE # 450
	MOV  	DPTR,#0E0CCH
	MOV  	A,#0E0H
	MOVX 	@DPTR,A
; 	T3CON = 0x20;//0x29;//0x28;							// capture mode,timer3 overflow interrupt enable
			; SOURCE LINE # 451
	MOV  	DPTR,#0E0C8H
	MOV  	A,#020H
	MOVX 	@DPTR,A
; 	T3CON = T3CON | (1 << 2);				// start timer3
			; SOURCE LINE # 452
	MOV  	DPTR,#0E0C8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	EX1 = 1;
			; SOURCE LINE # 453
	SETB 	EX1
; }
			; SOURCE LINE # 454
?C0019:
	RET  	
; END OF InitTimer3

; void InitTimer01(void)

	RSEG  ?PR?InitTimer01?INITIAL
InitTimer01:
	USING	0
			; SOURCE LINE # 455
; {
			; SOURCE LINE # 456
; 		T01_DIV = 0x0240;                 //clock divider is 122
			; SOURCE LINE # 457
	MOV  	DPTR,#0E0EEH
	MOV  	A,#02H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#040H
	MOVX 	@DPTR,A
;     TMOD = TMOD & 0xF0 | (3 << 0);                     //timer0 is 16bit timer
			; SOURCE LINE # 458
	MOV  	A,TMOD
	ANL  	A,#0F0H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	TMOD,A
;     TL0 = 0x00;
			; SOURCE LINE # 459
	MOV  	TL0,#00H
;     TH0= 0x00;
			; SOURCE LINE # 460
	MOV  	TH0,#00H
;     ET0 = 1;                                //enable timer0 overflow interrupt
			; SOURCE LINE # 461
	SETB 	ET0
;     ET1 = 1;                                //enable timer1 overflow interrupt
			; SOURCE LINE # 462
	SETB 	ET1
; 		TR0= 1;                                //start timer0
			; SOURCE LINE # 463
	SETB 	TR0
; 		TR1 = 1;    
			; SOURCE LINE # 464
	SETB 	TR1
; }
			; SOURCE LINE # 465
?C0020:
	RET  	
; END OF InitTimer01

; void SystemClock(void)

	RSEG  ?PR?SystemClock?INITIAL
SystemClock:
	USING	0
			; SOURCE LINE # 466
; {
			; SOURCE LINE # 467
;     RC80M_RES = 0x2e;
			; SOURCE LINE # 468
	MOV  	DPTR,#0E0B2H
	MOV  	A,#02EH
	MOVX 	@DPTR,A
; 	  #pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; 	
; 	  CLK_DIV_L = 0x02;
			; SOURCE LINE # 505
	MOV  	DPTR,#0E0E7H
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	  CLK_DIV_H = 0x00;
			; SOURCE LINE # 506
	MOV  	DPTR,#0E0E6H
	CLR  	A
	MOVX 	@DPTR,A
; 		
; 		#pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; }
			; SOURCE LINE # 542
?C0021:
	RET  	
; END OF SystemClock

; 
; 
; 
; //initial UART1, there are 2 different ways to generate baudrate
; //way 1
; void sInitUART1(void)

	RSEG  ?PR?sInitUART1?INITIAL
sInitUART1:
			; SOURCE LINE # 548
; {
			; SOURCE LINE # 549
; 	S0CON  = 0x50;		      // set as 8-bit UART,  enable serial 0 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 550
	MOV  	S0CON,#050H
;     WDCON = 0x80;            // 0x80: baud rate = (2^smod) * Fclk / (64 * (2^10 - s0rel));
			; SOURCE LINE # 551
	MOV  	WDCON,#080H
;                               // 0x00: baud rate = (2^smod) * Fclk / (32 * 12 * (256 - th1));
;                               // smod = 0;	Fclk = system clock
;     S0RELL = 0xF3;             //Fclk = 8MHz, baud rate = 9600
			; SOURCE LINE # 554
	MOV  	S0RELL,#0F3H
;     S0RELH = 0x03;	
			; SOURCE LINE # 555
	MOV  	S0RELH,#03H
; }
			; SOURCE LINE # 556
?C0022:
	RET  	
; END OF sInitUART1

; 
; void sInitUART2(void)

	RSEG  ?PR?sInitUART2?INITIAL
sInitUART2:
			; SOURCE LINE # 558
; {
			; SOURCE LINE # 559
;     S1CON  = 0x90;		        //enable serial 1 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 560
	MOV  	S1CON,#090H
;                                 //s1con.7 = 1: 8-bit UART(mode B)    s1con.7 = 0: 9-bit UART(mode A)
;     S1RELL = 0xE6;            //baud rate = Fclk / (32 * (2^10 - s0rel));
			; SOURCE LINE # 562
	MOV  	S1RELL,#0E6H
;     S1RELH = 0x03;	          //Fclk = 8MHz, baud rate = 9600
			; SOURCE LINE # 563
	MOV  	S1RELH,#03H
; }
			; SOURCE LINE # 564
?C0023:
	RET  	
; END OF sInitUART2

	END
