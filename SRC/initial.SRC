; .\initial.SRC generated from: initial.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE initial.c LARGE WARNINGLEVEL(0) OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X2000) DEBUG OBJECTEXTEND TABS(2) SRC(.\initial.SRC)

$NOMOD51

NAME	INITIAL

P2ETCLR	DATA	0CEH
ie0	BIT	088H.1
P3ETCLR	DATA	0DEH
ie1	BIT	088H.3
P4ETCLR	DATA	0F6H
md0	DATA	0E9H
md1	DATA	0EAH
ien0_5	BIT	0A8H.5
md2	DATA	0EBH
bshctl	DATA	0ABH
md3	DATA	0ECH
md4	DATA	0EDH
md5	DATA	0EEH
P1AQCSFRC	DATA	0B1H
P2AQCSFRC	DATA	0C9H
P3AQCSFRC	DATA	0D9H
ip0	DATA	0A9H
et0	BIT	0A8H.1
P4AQCSFRC	DATA	0F1H
P1TZFLG	DATA	0B2H
ip1	DATA	0B9H
et1	BIT	0A8H.3
tf0	BIT	088H.5
P2TZFLG	DATA	0CAH
tf1	BIT	088H.7
P3TZFLG	DATA	0DAH
P1TZFRC	DATA	0B4H
th0	DATA	08CH
P4TZFLG	DATA	0F2H
P2TZFRC	DATA	0CCH
ex0	BIT	0A8H.0
ti0	BIT	098H.1
th1	DATA	08DH
it0	BIT	088H.0
P3TZFRC	DATA	0DCH
eadc	BIT	0B8H.0
ex1	BIT	0A8H.2
it1	BIT	088H.2
P4TZFRC	DATA	0F4H
ex2	BIT	0B8H.1
ex3	BIT	0B8H.2
sm0	BIT	098H.7
ckcon	DATA	08EH
tl0	DATA	08AH
ex4	BIT	0B8H.3
sm1	BIT	098H.6
tl1	DATA	08BH
P1TZCLR	DATA	0B3H
wdtcon	DATA	0D8H
iadc	BIT	0C0H.0
ex5	BIT	0B8H.4
clk_pd_con	DATA	08FH
P2TZCLR	DATA	0CBH
ex6	BIT	0B8H.5
P3TZCLR	DATA	0DBH
P4TZCLR	DATA	0F3H
arcon	DATA	0EFH
wdtrel	DATA	086H
tr0	BIT	088H.4
ES	BIT	0A8H.4
tr1	BIT	088H.6
mem_config	DATA	0E8H
RI	BIT	098H.0
int_reg1	DATA	0F9H
ircon	DATA	0C0H
int_reg2	DATA	0FAH
int_reg3	DATA	0FDH
p0	DATA	080H
int_reg4	DATA	0FEH
p1	DATA	090H
p2	DATA	0A0H
p3	DATA	0B0H
P1TBPRD_H	DATA	0A2H
acc	DATA	0E0H
P2TBPRD_H	DATA	0C2H
P3TBPRD_H	DATA	0D2H
wdtcon_7	BIT	0D8H.7
P4TBPRD_H	DATA	0E2H
P1TBPRD_L	DATA	0A1H
P2TBPRD_L	DATA	0C1H
P3TBPRD_L	DATA	0D1H
P4TBPRD_L	DATA	0E1H
p0_0	BIT	080H.0
SBUF	DATA	099H
p1_0	BIT	090H.0
p0_1	BIT	080H.1
p2_0	BIT	0A0H.0
p1_1	BIT	090H.1
pcon	DATA	087H
p0_2	BIT	080H.2
p3_0	BIT	0B0H.0
eal	BIT	0A8H.7
p2_1	BIT	0A0H.1
p1_2	BIT	090H.2
p0_3	BIT	080H.3
p3_1	BIT	0B0H.1
p2_2	BIT	0A0H.2
p1_3	BIT	090H.3
p0_4	BIT	080H.4
p3_2	BIT	0B0H.2
p2_3	BIT	0A0H.3
p1_4	BIT	090H.4
p0_5	BIT	080H.5
p3_3	BIT	0B0H.3
p2_4	BIT	0A0H.4
p1_5	BIT	090H.5
tmod	DATA	089H
tcon	DATA	088H
p0_6	BIT	080H.6
p3_4	BIT	0B0H.4
p2_5	BIT	0A0H.5
p1_6	BIT	090H.6
p0_7	BIT	080H.7
p3_5	BIT	0B0H.5
bshi_0	DATA	0ACH
p2_6	BIT	0A0H.6
p1_7	BIT	090H.7
p3_6	BIT	0B0H.6
bshi_1	DATA	0ADH
p2_7	BIT	0A0H.7
p3_7	BIT	0B0H.7
bshi_2	DATA	0AEH
bshi_3	DATA	0AFH
rb80	BIT	098H.2
dph	DATA	083H
bsho_0	DATA	0BCH
bsho_1	DATA	0BDH
tb80	BIT	098H.3
bsho_2	DATA	0BEH
bsho_3	DATA	0BFH
dpl	DATA	082H
sm20	BIT	098H.5
P1AQSFRC	DATA	0A7H
swdt	BIT	0B8H.6
P2AQSFRC	DATA	0C7H
P3AQSFRC	DATA	0D7H
P4AQSFRC	DATA	0E7H
dps	DATA	092H
P1CMPA_H	DATA	0A4H
P2CMPA_H	DATA	0C4H
P1CMPB_H	DATA	0A6H
P3CMPA_H	DATA	0D4H
P2CMPB_H	DATA	0C6H
P4CMPA_H	DATA	0E4H
P3CMPB_H	DATA	0D6H
P4CMPB_H	DATA	0E6H
P1CMPA_L	DATA	0A3H
wdt	BIT	0A8H.6
P2CMPA_L	DATA	0C3H
P1CMPB_L	DATA	0A5H
s0relh	DATA	0BAH
P3CMPA_L	DATA	0D3H
P2CMPB_L	DATA	0C5H
s1relh	DATA	0BBH
power_con	DATA	097H
P4CMPA_L	DATA	0E3H
P3CMPB_L	DATA	0D5H
P4CMPB_L	DATA	0E5H
s0rell	DATA	0AAH
s1rell	DATA	09DH
sram_con	DATA	0F8H
psw	DATA	0D0H
clk_div	DATA	091H
b	DATA	0F0H
s1buf	DATA	09CH
sp	DATA	081H
s0con	DATA	098H
s1con	DATA	09BH
t2con	DATA	0C8H
ien0	DATA	0A8H
ien1	DATA	0B8H
dph1	DATA	085H
ien2	DATA	09AH
dpl1	DATA	084H
i2fr	BIT	0C8H.5
P1ETFLG	DATA	0B5H
i3fr	BIT	0C8H.6
P2ETFLG	DATA	0CDH
ren0	BIT	098H.4
P3ETFLG	DATA	0DDH
P1ETFRC	DATA	0B7H
P4ETFLG	DATA	0F5H
P2ETFRC	DATA	0CFH
P3ETFRC	DATA	0DFH
iex2	BIT	0C0H.1
P4ETFRC	DATA	0F7H
iex3	BIT	0C0H.2
iex4	BIT	0C0H.3
iex5	BIT	0C0H.4
P1ETCLR	DATA	0B6H
iex6	BIT	0C0H.5
?PR?sSystemClockConfig?INITIAL           SEGMENT CODE 
?PR?sInitUART1?INITIAL                   SEGMENT CODE 
?PR?sInitUART2?INITIAL                   SEGMENT CODE 
	EXTRN	XDATA (RC80M_RES)
	EXTRN	XDATA (CLK_DIV_H)
	EXTRN	XDATA (CLK_DIV_L)
	PUBLIC	sInitUART2
	PUBLIC	sInitUART1
	PUBLIC	sSystemClockConfig
; #include "JEMCU_REGX.h"
; #include <intrins.h>
; #include "app.h"
; #include "initial.h"
; 
; void sSystemClockConfig(void);
; void sInitUART1(void);
; 
; void sSystemClockConfig(void)

	RSEG  ?PR?sSystemClockConfig?INITIAL
sSystemClockConfig:
	USING	0
			; SOURCE LINE # 9
; {
			; SOURCE LINE # 10
;     RC80M_RES = 0x2e;
			; SOURCE LINE # 11
	MOV  	DPTR,#RC80M_RES
	MOV  	A,#02EH
	MOVX 	@DPTR,A
; 	  #pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; 	
; 	  CLK_DIV_L = 0x02;
			; SOURCE LINE # 48
	MOV  	DPTR,#CLK_DIV_L
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 	  CLK_DIV_H = 0x00;
			; SOURCE LINE # 49
	CLR  	A
	MOV  	DPTR,#CLK_DIV_H
	MOVX 	@DPTR,A
; 		
; 		#pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; }
			; SOURCE LINE # 85
	RET  	
; END OF sSystemClockConfig

; 
; 
; 
; //initial UART1, there are 2 different ways to generate baudrate
; //way 1
; void sInitUART1(void)

	RSEG  ?PR?sInitUART1?INITIAL
sInitUART1:
			; SOURCE LINE # 91
; {
			; SOURCE LINE # 92
; 	s0con  = 0x50;		      // set as 8-bit UART,  enable serial 0 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 93
	MOV  	s0con,#050H
;     wdtcon = 0x80;            // 0x80: baud rate = (2^smod) * Fclk / (64 * (2^10 - s0rel));
			; SOURCE LINE # 94
	MOV  	wdtcon,#080H
;                               // 0x00: baud rate = (2^smod) * Fclk / (32 * 12 * (256 - th1));
;                               // smod = 0;	Fclk = system clock
;     s0rell = 0xF3;             //Fclk = 8MHz, baud rate = 9600
			; SOURCE LINE # 97
	MOV  	s0rell,#0F3H
;     s0relh = 0x03;	
			; SOURCE LINE # 98
	MOV  	s0relh,#03H
; }
			; SOURCE LINE # 99
	RET  	
; END OF sInitUART1

; 
; void sInitUART2(void)

	RSEG  ?PR?sInitUART2?INITIAL
sInitUART2:
			; SOURCE LINE # 101
; {
			; SOURCE LINE # 102
;     s1con  = 0x90;		        //enable serial 1 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 103
	MOV  	s1con,#090H
;                                 //s1con.7 = 1: 8-bit UART(mode B)    s1con.7 = 0: 9-bit UART(mode A)
;     s1rell = 0xE6;            //baud rate = Fclk / (32 * (2^10 - s0rel));
			; SOURCE LINE # 105
	MOV  	s1rell,#0E6H
;     s1relh = 0x03;	          //Fclk = 8MHz, baud rate = 9600
			; SOURCE LINE # 106
	MOV  	s1relh,#03H
; }
			; SOURCE LINE # 107
	RET  	
; END OF sInitUART2

	END
