; .\OUTPUT\initial.SRC generated from: SRC\initial.c
; COMPILER INVOKED BY:
;        C:\Keil\v5\C51\BIN\C51.EXE SRC\initial.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVECTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\initial.lst) TABS(2) SRC(.\OUTPUT\initial.SRC)

$NOMOD51

NAME	INITIAL

P2ETCLR	DATA	0CEH
TB80	BIT	098H.3
P3ETCLR	DATA	0DEH
P1TBPRD	DATA	0A1H
P0	DATA	080H
P4ETCLR	DATA	0F6H
P2TBPRD	DATA	0C1H
P1	DATA	090H
P3TBPRD	DATA	0D1H
P2	DATA	0A0H
P4TBPRD	DATA	0E1H
P3	DATA	0B0H
SM20	BIT	098H.5
P1AQCSFRC	DATA	0B1H
P2AQCSFRC	DATA	0C9H
P3AQCSFRC	DATA	0D9H
P4AQCSFRC	DATA	0F1H
P1TZFLG	DATA	0B2H
P2TZFLG	DATA	0CAH
P3TZFLG	DATA	0DAH
P1TZFRC	DATA	0B4H
IEN0	DATA	0A8H
P4TZFLG	DATA	0F2H
P2TZFRC	DATA	0CCH
IE	DATA	0A8H
EADC	BIT	0B8H.0
IEN1	DATA	0B8H
DPH1	DATA	085H
P3TZFRC	DATA	0DCH
IEN2	DATA	09AH
P4TZFRC	DATA	0F4H
CLK_PD_CON	DATA	08FH
IADC	BIT	0C0H.0
DPL1	DATA	084H
P1TZCLR	DATA	0B3H
P2TZCLR	DATA	0CBH
WDCON_7	BIT	0D8H.7
I2FR	BIT	0C8H.5
P3TZCLR	DATA	0DBH
I3FR	BIT	0C8H.6
P4TZCLR	DATA	0F3H
REN0	BIT	098H.4
ES	BIT	0A8H.4
IEX2	BIT	0C0H.1
IEX3	BIT	0C0H.2
RI	BIT	098H.0
IEX4	BIT	0C0H.3
IEX5	BIT	0C0H.4
IEX6	BIT	0C0H.5
CLK_DIV	DATA	091H
SP	DATA	081H
P1CMPA	DATA	0A3H
P2CMPA	DATA	0C3H
P1CMPB	DATA	0A5H
P3CMPA	DATA	0D3H
P2CMPB	DATA	0C5H
P4CMPA	DATA	0E3H
P3CMPB	DATA	0D5H
BSHI	DATA	0ACH
P4CMPB	DATA	0E5H
P1TBPRD_H	DATA	0A2H
P2TBPRD_H	DATA	0C2H
P3TBPRD_H	DATA	0D2H
P4TBPRD_H	DATA	0E2H
P1TBPRD_L	DATA	0A1H
P2TBPRD_L	DATA	0C1H
BSHO	DATA	0BCH
P3TBPRD_L	DATA	0D1H
P4TBPRD_L	DATA	0E1H
BREAKH	DATA	095H
S0RELH	DATA	0BAH
P00	BIT	080H.0
SBUF	DATA	099H
S1RELH	DATA	0BBH
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
BREAKL	DATA	094H
P31	BIT	0B0H.1
S0RELL	DATA	0AAH
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P32	BIT	0B0H.2
P23	BIT	0A0H.3
S1RELL	DATA	09DH
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P34	BIT	0B0H.4
BSHI_0	DATA	0ACH
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P35	BIT	0B0H.5
BSHI_1	DATA	0ADH
P26	BIT	0A0H.6
P17	BIT	090H.7
P36	BIT	0B0H.6
BSHI_2	DATA	0AEH
P27	BIT	0A0H.7
P37	BIT	0B0H.7
BSHI_3	DATA	0AFH
BSHO_0	DATA	0BCH
BSHO_1	DATA	0BDH
IE0	BIT	088H.1
BSHO_2	DATA	0BEH
IE1	BIT	088H.3
BSHO_3	DATA	0BFH
B	DATA	0F0H
MD0	DATA	0E9H
MD1	DATA	0EAH
BSHCTL	DATA	0ABH
MD2	DATA	0EBH
SWDT	BIT	0B8H.6
P1AQSFRC	DATA	0A7H
MD3	DATA	0ECH
P2AQSFRC	DATA	0C7H
MD4	DATA	0EDH
P3AQSFRC	DATA	0D7H
MD5	DATA	0EEH
P4AQSFRC	DATA	0E7H
ACC	DATA	0E0H
ES0	BIT	0A8H.4
IP0	DATA	0A9H
ET0	BIT	0A8H.1
BPCTRL	DATA	093H
IP1	DATA	0B9H
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
P1CMPA_H	DATA	0A4H
TH0	DATA	08CH
P2CMPA_H	DATA	0C4H
P1CMPB_H	DATA	0A6H
EX0	BIT	0A8H.0
TI0	BIT	098H.1
TH1	DATA	08DH
IT0	BIT	088H.0
P3CMPA_H	DATA	0D4H
P2CMPB_H	DATA	0C6H
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P4CMPA_H	DATA	0E4H
P3CMPB_H	DATA	0D6H
EX2	BIT	0B8H.1
P4CMPB_H	DATA	0E6H
P1CMPA_L	DATA	0A3H
EX3	BIT	0B8H.2
SM0	BIT	098H.7
POWER_CON	DATA	097H
TL0	DATA	08AH
P2CMPA_L	DATA	0C3H
P1CMPB_L	DATA	0A5H
EX4	BIT	0B8H.3
SM1	BIT	098H.6
TL1	DATA	08BH
P3CMPA_L	DATA	0D3H
P2CMPB_L	DATA	0C5H
EX5	BIT	0B8H.4
EAL	BIT	0A8H.7
P4CMPA_L	DATA	0E3H
P3CMPB_L	DATA	0D5H
EX6	BIT	0B8H.5
P4CMPB_L	DATA	0E5H
WDTREL	DATA	086H
TR0	BIT	088H.4
TR1	BIT	088H.6
INT_REG1	DATA	0F9H
DPH	DATA	083H
INT_REG2	DATA	0FAH
INT_REG3	DATA	0FDH
INT_REG4	DATA	0FEH
DPL	DATA	082H
S0BUF	DATA	099H
S1BUF	DATA	09CH
S0CON	DATA	098H
S1CON	DATA	09BH
T2CON	DATA	0C8H
DPS	DATA	092H
WDT	BIT	0A8H.6
CKCON	DATA	08EH
ARCON	DATA	0EFH
P1ETFLG	DATA	0B5H
SRAM_CON	DATA	0F8H
P2ETFLG	DATA	0CDH
P3ETFLG	DATA	0DDH
P1ETFRC	DATA	0B7H
P4ETFLG	DATA	0F5H
P2ETFRC	DATA	0CFH
MEM_CONFIG	DATA	0E8H
P3ETFRC	DATA	0DFH
P4ETFRC	DATA	0F7H
PSW	DATA	0D0H
WDCON	DATA	0D8H
IRCON	DATA	0C0H
RB80	BIT	098H.2
P1ETCLR	DATA	0B6H
?PR?InitEXT?INITIAL  SEGMENT CODE 
?PR?InitISDDebug?INITIAL                 SEGMENT CODE 
?PR?InitBreakPoint?INITIAL               SEGMENT CODE 
?PR?epwmOutputDisable?INITIAL            SEGMENT CODE 
?PR?epwmOutputEnable?INITIAL             SEGMENT CODE 
?PR?InitADC?INITIAL  SEGMENT CODE 
?PR?Initepwm?INITIAL SEGMENT CODE 
?PR?InitComparator?INITIAL               SEGMENT CODE 
?PR?InitWatchDog?INITIAL                 SEGMENT CODE 
?PR?InitGPIO?INITIAL SEGMENT CODE 
?PR?InitTimer01?INITIAL                  SEGMENT CODE 
?PR?InitTimer3?INITIAL                   SEGMENT CODE 
?PR?InitTimer4?INITIAL                   SEGMENT CODE 
?PR?InitTimer5?INITIAL                   SEGMENT CODE 
?PR?InitTimer6?INITIAL                   SEGMENT CODE 
?PR?SystemClock?INITIAL                  SEGMENT CODE 
?PR?sInitUART1?INITIAL                   SEGMENT CODE 
?PR?sInitUART2?INITIAL                   SEGMENT CODE 
?PR?InitDAC?INITIAL  SEGMENT CODE 
	EXTRN	CODE (__isd_init)
	PUBLIC	InitDAC
	PUBLIC	sInitUART2
	PUBLIC	sInitUART1
	PUBLIC	SystemClock
	PUBLIC	InitTimer6
	PUBLIC	InitTimer5
	PUBLIC	InitTimer4
	PUBLIC	InitTimer3
	PUBLIC	InitTimer01
	PUBLIC	InitGPIO
	PUBLIC	InitWatchDog
	PUBLIC	InitComparator
	PUBLIC	Initepwm
	PUBLIC	InitADC
	PUBLIC	epwmOutputEnable
	PUBLIC	epwmOutputDisable
	PUBLIC	InitBreakPoint
	PUBLIC	InitISDDebug
	PUBLIC	InitEXT
; #include "register.h"
; #include <intrins.h>
; #include "app.h"
; #include "initial.h"
; #include "ISD51.H"
; #include "epwm.h"
; 
; 
; 
; 
; void InitEXT(void)

	RSEG  ?PR?InitEXT?INITIAL
InitEXT:
	USING	0
			; SOURCE LINE # 11
; {	
			; SOURCE LINE # 12
; //		EINT1_EN=0; 
; //		EINT2_EN=1;				//enable EXT2
; //		EINT3_EN=0;
; //		EINT4_EN=0;
; 	
; 			EXINT_EN = 0x02;					//RXINT_EN cannot be read, it can be write only
			; SOURCE LINE # 18
	MOV  	DPTR,#0E08DH
	MOV  	A,#02H
	MOVX 	@DPTR,A
; 																//EXINT_EN= 0x01      -----enable EXT1
; 																//					0x02			-----enable EXT2
; 																//					0x04		  -----enable EXT3
; 																//					0x08			-----enable EXT4
; 	
; 		EINT2_CFG=RISING_EDGE;		//rising edge trigger
			; SOURCE LINE # 24
	MOV  	DPTR,#0E0BFH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		EX0=1;
			; SOURCE LINE # 25
	SETB 	EX0
; 		IT0=1;
			; SOURCE LINE # 26
	SETB 	IT0
; 		IE0=0;
			; SOURCE LINE # 27
	CLR  	IE0
; 		INT_REG1 &=0xf0;              
			; SOURCE LINE # 28
	ANL  	INT_REG1,#0F0H
; 	
; }
			; SOURCE LINE # 30
?C0001:
	RET  	
; END OF InitEXT

; 
; void InitISDDebug(void)

	RSEG  ?PR?InitISDDebug?INITIAL
InitISDDebug:
	USING	0
			; SOURCE LINE # 32
; {
			; SOURCE LINE # 33
; 	
;     EAL = 0;
			; SOURCE LINE # 35
	CLR  	EAL
;     //ISD51++++++++++++++++++++++++++
;     #if ISDDebug == ENABLE_ISD
; 		InitBreakPoint();
			; SOURCE LINE # 38
	LCALL	InitBreakPoint
;     sInitUART1();
			; SOURCE LINE # 39
	LCALL	sInitUART1
;  
;     IP0 = 0x30;
			; SOURCE LINE # 41
	MOV  	IP0,#030H
;     IP1 = 0x20;
			; SOURCE LINE # 42
	MOV  	IP1,#020H
;     ET0 = 0;
			; SOURCE LINE # 43
	CLR  	ET0
;     EX6 = 0 ;
			; SOURCE LINE # 44
	CLR  	EX6
;     ES0 = 1;
			; SOURCE LINE # 45
	SETB 	ES0
;     EAL = 1;
			; SOURCE LINE # 46
	SETB 	EAL
;     _nop_();
			; SOURCE LINE # 47
	NOP  	
;     _nop_();
			; SOURCE LINE # 48
	NOP  	
;     _nop_();
			; SOURCE LINE # 49
	NOP  	
?C0002:
;     while(1)
			; SOURCE LINE # 50
;     {
			; SOURCE LINE # 51
;         P10 = 0;
			; SOURCE LINE # 52
	CLR  	P10
;         P10 = 1;
			; SOURCE LINE # 53
	SETB 	P10
;         ISDcheck();      // initialize uVision2 Debugger and continue program run
			; SOURCE LINE # 54
	JB   	ES,?C0004
	JNB  	RI,?C0004
	MOV  	A,SBUF
	XRL  	A,#0A5H
	JZ   	?C0006
	CLR  	RI
	SJMP 	?C0004
?C0006:
	LCALL	__isd_init
?C0007:
?C0005:
?C0004:
;         if((BPCTRL & 0x10) != 0) break;
			; SOURCE LINE # 55
	MOV  	A,BPCTRL
	JNB  	ACC.4,?C0002
	SJMP 	?C0003
?C0008:
;     }
			; SOURCE LINE # 56
	SJMP 	?C0002
?C0003:
;     _nop_();
			; SOURCE LINE # 57
	NOP  	
;     _nop_();
			; SOURCE LINE # 58
	NOP  	
;     _nop_();
			; SOURCE LINE # 59
	NOP  	
;     ET0 = 1;
			; SOURCE LINE # 60
	SETB 	ET0
;     EX6 = 1;
			; SOURCE LINE # 61
	SETB 	EX6
;     _nop_();
			; SOURCE LINE # 62
	NOP  	
;     _nop_();
			; SOURCE LINE # 63
	NOP  	
;     _nop_();
			; SOURCE LINE # 64
	NOP  	
;     #endif
;     //++++++++++++++++++++++++++++++
; 		EAL = 1;                                //enable all interrupts
			; SOURCE LINE # 67
	SETB 	EAL
; }
			; SOURCE LINE # 68
?C0009:
	RET  	
; END OF InitISDDebug

; 
; 
; 
; 
; 
; void InitBreakPoint  (void)

	RSEG  ?PR?InitBreakPoint?INITIAL
InitBreakPoint:
			; SOURCE LINE # 74
; {
			; SOURCE LINE # 75
;     BPCTRL   = 0x01;
			; SOURCE LINE # 76
	MOV  	BPCTRL,#01H
; 	BREAKL   = 0xff;
			; SOURCE LINE # 77
	MOV  	BREAKL,#0FFH
; 	BREAKH   = 0xff;
			; SOURCE LINE # 78
	MOV  	BREAKH,#0FFH
; }
			; SOURCE LINE # 79
?C0010:
	RET  	
; END OF InitBreakPoint

; 
; void epwmOutputDisable(void)

	RSEG  ?PR?epwmOutputDisable?INITIAL
epwmOutputDisable:
			; SOURCE LINE # 81
; {
			; SOURCE LINE # 82
; 	P1AQCSFRC = 0x05;						// force epwmxA and epwmxB output low
			; SOURCE LINE # 83
	MOV  	P1AQCSFRC,#05H
; 	P2AQCSFRC = 0x05;
			; SOURCE LINE # 84
	MOV  	P2AQCSFRC,#05H
; 	P3AQCSFRC = 0x05;
			; SOURCE LINE # 85
	MOV  	P3AQCSFRC,#05H
; 	P4AQCSFRC = 0x05;
			; SOURCE LINE # 86
	MOV  	P4AQCSFRC,#05H
; }
			; SOURCE LINE # 87
?C0011:
	RET  	
; END OF epwmOutputDisable

; 
; void epwmOutputEnable(void)

	RSEG  ?PR?epwmOutputEnable?INITIAL
epwmOutputEnable:
			; SOURCE LINE # 89
; {
			; SOURCE LINE # 90
; 	P1AQCSFRC = 0x0F;						// software force disable
			; SOURCE LINE # 91
	MOV  	P1AQCSFRC,#0FH
; 	P2AQCSFRC = 0x0F;
			; SOURCE LINE # 92
	MOV  	P2AQCSFRC,#0FH
; 	P3AQCSFRC = 0x0F;
			; SOURCE LINE # 93
	MOV  	P3AQCSFRC,#0FH
; 	P4AQCSFRC = 0x0F;
			; SOURCE LINE # 94
	MOV  	P4AQCSFRC,#0FH
; }
			; SOURCE LINE # 95
?C0012:
	RET  	
; END OF epwmOutputEnable

; 
; void InitADC(void)

	RSEG  ?PR?InitADC?INITIAL
InitADC:
	USING	0
			; SOURCE LINE # 97
; {
			; SOURCE LINE # 98
; 
; 		AD_PD = 0;							//Power up ADD
			; SOURCE LINE # 100
	MOV  	DPTR,#0E08BH
	CLR  	A
	MOVX 	@DPTR,A
; 	  ADC_CLK_EN=1;
			; SOURCE LINE # 101
	MOV  	DPTR,#0E0ECH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		ADC_CLK_DIV_SEL=0x03;    //system divided by 4
			; SOURCE LINE # 102
	MOV  	DPTR,#0E0ECH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     ADCHS = 0x0f;						// select channel CH1-CH4
			; SOURCE LINE # 103
	MOV  	DPTR,#0E05CH
	MOV  	A,#0FH
	MOVX 	@DPTR,A
; 		
; 	
; 	
; 		DAC1_PD = 1;						// DAC12 down
			; SOURCE LINE # 107
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		DAC2_PD = 1;
			; SOURCE LINE # 108
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	
; 		C1PDO1PD=CFG2;								//COMP1 power off and OP1 power on
			; SOURCE LINE # 112
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C2PDO2PD=CFG2;								//COMP2 power off and OP2 power on
			; SOURCE LINE # 113
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C3PDO3PD=CFG2;								//COMP3 power off and OP3 power on
			; SOURCE LINE # 114
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 		LDO25_PD=0;             //use internal 2.5V for AD VREF
			; SOURCE LINE # 117
	MOV  	DPTR,#0E09DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		BP4=0;                  //CH4 normal and no bypass
			; SOURCE LINE # 118
	MOV  	DPTR,#0E05DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 		SWFTRG=1;
			; SOURCE LINE # 120
	MOV  	DPTR,#0E05AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	  INTEN=1;
			; SOURCE LINE # 121
	MOV  	DPTR,#0E05AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		AD4OST=0x0000;					//AD offset   0xFC
			; SOURCE LINE # 122
	MOV  	DPTR,#0E064H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	CLR  	A
	MOVX 	@DPTR,A
; 
; 	
; 	
; 		EADC=1;
			; SOURCE LINE # 126
	SETB 	EADC
; 		IADC=0;
			; SOURCE LINE # 127
	CLR  	IADC
; 
; 	}
			; SOURCE LINE # 129
?C0013:
	RET  	
; END OF InitADC

; 
; 
; void Initepwm(void)

	RSEG  ?PR?Initepwm?INITIAL
Initepwm:
	USING	0
			; SOURCE LINE # 132
; {
			; SOURCE LINE # 133
; 	
; 	
; 	// config IO for ePWM output
; 
; 	P22_FN=CFG1;          //P22 output  PWM3B
			; SOURCE LINE # 138
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P23_FN=CFG1;					//P23 output  PWM3A
			; SOURCE LINE # 139
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P24_FN=CFG1;          //P24 output  PWM2B
			; SOURCE LINE # 141
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P25_FN=CFG1;					//P25 output  PWM2A
			; SOURCE LINE # 142
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P26_FN=CFG1;					//P26 output  PWM1B
			; SOURCE LINE # 144
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P27_FN=CFG1;          //P27 output  PWM1A
			; SOURCE LINE # 145
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; //	P00_FN=CFG1;					//P00 output  PWM4B
; //  P01_FN=CFG1;          //P01 output  PWM4A	
; 
; 
; // set period	
; 
; 	P1TBPRD	=	0x0190;						// 400 step per pwm period or 10KHz
			; SOURCE LINE # 153
	MOV  	P1TBPRD+01H,#01H
	MOV  	P1TBPRD,#090H
; 	P2TBPRD = 0x0190;
			; SOURCE LINE # 154
	MOV  	P2TBPRD+01H,#01H
	MOV  	P2TBPRD,#090H
; 	P3TBPRD = 0x0190;
			; SOURCE LINE # 155
	MOV  	P3TBPRD+01H,#01H
	MOV  	P3TBPRD,#090H
; 	P4TBPRD = 0x0190;
			; SOURCE LINE # 156
	MOV  	P4TBPRD+01H,#01H
	MOV  	P4TBPRD,#090H
; 
; 	
; //enable epwm clock 
; 	
; 	
; 	EPWM1_ENCLK =1;							// clock for pwm1 ~ pwm4 is enable,and synchronize all channel disable
			; SOURCE LINE # 162
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	EPWM2_ENCLK	=1;
			; SOURCE LINE # 163
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	EPWM3_ENCLK =1;
			; SOURCE LINE # 164
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	EPWM4_ENCLK =1;
			; SOURCE LINE # 165
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	TBCLKSYNC=0;
			; SOURCE LINE # 166
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	//pwm count up or down
; 	
; 	P1CTRMODE=TB_COUNT_UPDOWN;     // period load from shadow,up down mode,synchronize at CTR = ZERO
			; SOURCE LINE # 171
	MOV  	DPTR,#0E003H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2CTRMODE=TB_COUNT_UPDOWN;
			; SOURCE LINE # 172
	MOV  	DPTR,#0E019H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3CTRMODE=TB_COUNT_UPDOWN;
			; SOURCE LINE # 173
	MOV  	DPTR,#0E02FH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4CTRMODE=TB_COUNT_UPDOWN;
			; SOURCE LINE # 174
	MOV  	DPTR,#0E045H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	P1PRDLD=TB_SHADOW;
			; SOURCE LINE # 177
	MOV  	DPTR,#0E003H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	//time base free run or emulation 
; 	
; 	P1FREE_SOFT=FREE_RUN;							// time base free run when emulation
			; SOURCE LINE # 182
	MOV  	DPTR,#0E002H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#080H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2FREE_SOFT=FREE_RUN;
			; SOURCE LINE # 183
	MOV  	DPTR,#0E018H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#080H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3FREE_SOFT=FREE_RUN;
			; SOURCE LINE # 184
	MOV  	DPTR,#0E02EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#080H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4FREE_SOFT=FREE_RUN;
			; SOURCE LINE # 185
	MOV  	DPTR,#0E044H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#080H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; // shadow register load mode
; 
; 
; 	P1SHDWA_MODE = CC_SHADOW;;						// shadow on,update at CTR = ZERO
			; SOURCE LINE # 190
	MOV  	DPTR,#0E007H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1SHDWB_MODE = CC_SHADOW;
			; SOURCE LINE # 191
	MOV  	DPTR,#0E007H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1LOADA_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 192
	MOV  	DPTR,#0E007H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1LOADB_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 193
	MOV  	DPTR,#0E007H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P2SHDWA_MODE = CC_SHADOW;;						// shadow on,update at CTR = ZERO
			; SOURCE LINE # 195
	MOV  	DPTR,#0E01DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2SHDWB_MODE = CC_SHADOW;
			; SOURCE LINE # 196
	MOV  	DPTR,#0E01DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2LOADA_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 197
	MOV  	DPTR,#0E01DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2LOADB_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 198
	MOV  	DPTR,#0E01DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P3SHDWA_MODE = CC_SHADOW;;						// shadow on,update at CTR = ZERO
			; SOURCE LINE # 200
	MOV  	DPTR,#0E033H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3SHDWB_MODE = CC_SHADOW;
			; SOURCE LINE # 201
	MOV  	DPTR,#0E033H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3LOADA_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 202
	MOV  	DPTR,#0E033H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3LOADB_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 203
	MOV  	DPTR,#0E033H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P4SHDWA_MODE = CC_SHADOW;;						// shadow on,update at CTR = ZERO
			; SOURCE LINE # 205
	MOV  	DPTR,#0E049H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4SHDWB_MODE = CC_SHADOW;
			; SOURCE LINE # 206
	MOV  	DPTR,#0E049H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4LOADA_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 207
	MOV  	DPTR,#0E049H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4LOADB_MODE = CC_CTR_ZERO;
			; SOURCE LINE # 208
	MOV  	DPTR,#0E049H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	
; 	//PWMxA waveform counter condition
; 	// when counter count up to cmpA value, PWMxA output is set high, when counter count down to cmpA value, PWMxA output is clear
; 	// when cmpB is disable 
; 	
; 	P1CADA=AQ_CLEAR;                    
			; SOURCE LINE # 216
	MOV  	DPTR,#0E009H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1CAUA=AQ_SET;
			; SOURCE LINE # 217
	MOV  	DPTR,#0E009H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1CBDA=AQ_NO_ACTION;                
			; SOURCE LINE # 218
	MOV  	DPTR,#0E008H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1CBUA=AQ_NO_ACTION;
			; SOURCE LINE # 219
	MOV  	DPTR,#0E008H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1PRDA=AQ_NO_ACTION;
			; SOURCE LINE # 220
	MOV  	DPTR,#0E009H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ZROA=AQ_NO_ACTION;
			; SOURCE LINE # 221
	MOV  	DPTR,#0E009H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P2CADA=AQ_CLEAR;                    
			; SOURCE LINE # 223
	MOV  	DPTR,#0E01FH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2CAUA=AQ_SET;
			; SOURCE LINE # 224
	MOV  	DPTR,#0E01FH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2CBDA=AQ_NO_ACTION;               	 
			; SOURCE LINE # 225
	MOV  	DPTR,#0E01EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2CBUA=AQ_NO_ACTION;
			; SOURCE LINE # 226
	MOV  	DPTR,#0E01EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2PRDA=AQ_NO_ACTION;
			; SOURCE LINE # 227
	MOV  	DPTR,#0E01FH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ZROA=AQ_NO_ACTION;
			; SOURCE LINE # 228
	MOV  	DPTR,#0E01FH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	P3CADA=AQ_CLEAR;                     
			; SOURCE LINE # 231
	MOV  	DPTR,#0E035H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3CAUA=AQ_SET;
			; SOURCE LINE # 232
	MOV  	DPTR,#0E035H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3CBDA=AQ_NO_ACTION;               	   
			; SOURCE LINE # 233
	MOV  	DPTR,#0E034H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3CBUA=AQ_NO_ACTION;
			; SOURCE LINE # 234
	MOV  	DPTR,#0E034H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3PRDA=AQ_NO_ACTION;
			; SOURCE LINE # 235
	MOV  	DPTR,#0E035H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ZROA=AQ_NO_ACTION;
			; SOURCE LINE # 236
	MOV  	DPTR,#0E035H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	P4CADA=AQ_CLEAR;                     
			; SOURCE LINE # 239
	MOV  	DPTR,#0E04BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4CAUA=AQ_SET;
			; SOURCE LINE # 240
	MOV  	DPTR,#0E04BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4CBDA=AQ_NO_ACTION;                
			; SOURCE LINE # 241
	MOV  	DPTR,#0E04AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4CBUA=AQ_NO_ACTION;
			; SOURCE LINE # 242
	MOV  	DPTR,#0E04AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4PRDA=AQ_NO_ACTION;
			; SOURCE LINE # 243
	MOV  	DPTR,#0E04BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ZROA=AQ_NO_ACTION;
			; SOURCE LINE # 244
	MOV  	DPTR,#0E04BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	
; 
; //	P1ZROA = AQ_SET;							 // CTR = ZERO set,CTR = CMPA up clear,CTR = PRD nothing,CTR = CMPA down nothing
; //  P1CAUA = AQ_CLEAR;
; //  P1PRDA = AQ_NO_ACTION;
; //  P1CADA = AQ_NO_ACTION;
; //  P1CBDA = AQ_NO_ACTION;         // when cmpB pwmxA do nothing
; //  P1CBUA = AQ_NO_ACTION;
; 
; 
; //	P1ZROA = AQ_SET;							
; //	P1CAUA = AQ_NO_ACTION;							// CTR = ZERO set,CTR = CMPA up nothing,CTR = PRD nothing,CTR = CMPA down nothing
; //  P1PRDA = AQ_NO_ACTION;
; //  P!CADA = AQ_NO_ACTION;
; //	P1CBUA = AQ_CLEAR;		   					// CTR increment upto CMPB  then clear PWMxA output
; //  P1CBDA = AQ_NO_ACTION;
; ;
; 
; 
; 	//PWMxB waveform counter condition , PWMxB can be use seperately by setting P1OUT_MODE=DB_DISABLE
; 	// when counter count up to cmpA value, PWMxB output is clear, when counter count down to cmpA value, PWMxB output is set,  PWMxB is complement of PWMxA
; 	// when cmpB is disable 
; 	
; //	P1CADB=AQ_SET;                    
; //	P1CAUB=AQ_CLEAR;
; //	P1CBDB=AQ_NO_ACTION;                
; //	P1CBUB=AQ_NO_ACTION;
; //	P1PRDB=AQ_NO_ACTION;
; //	P1ZROB=AQ_NO_ACTION;
; 	
; 
; //Dead band generator control enable and set dead band time
; 
; 
;   P1OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling edge delay on PWMxB
			; SOURCE LINE # 281
	MOV  	DPTR,#0E00CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P1POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
			; SOURCE LINE # 282
	MOV  	DPTR,#0E00CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P1IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epwmxA,
			; SOURCE LINE # 283
	MOV  	DPTR,#0E00CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
;   P2OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling edge delay on PWMxB
			; SOURCE LINE # 285
	MOV  	DPTR,#0E022H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P2POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
			; SOURCE LINE # 286
	MOV  	DPTR,#0E022H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P2IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epwmxA,
			; SOURCE LINE # 287
	MOV  	DPTR,#0E022H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
;   P3OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling edge delay on PWMxB
			; SOURCE LINE # 289
	MOV  	DPTR,#0E038H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P3POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
			; SOURCE LINE # 290
	MOV  	DPTR,#0E038H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P3IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epwmxA,
			; SOURCE LINE # 291
	MOV  	DPTR,#0E038H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
;   P4OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling edge delay on PWMxB
			; SOURCE LINE # 293
	MOV  	DPTR,#0E04EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#03H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P4POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
			; SOURCE LINE # 294
	MOV  	DPTR,#0E04EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;   P4IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epwmxA,
			; SOURCE LINE # 295
	MOV  	DPTR,#0E04EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 
; 
; //	P1OUT_MODE=DB_FULL_ENABLE; 							// delay source is epwmxA,dead band full,epwmxA invert
; //	P1POLSEL=DB_ACTV_LOC;
; //	P1IN_MODE=DB_AUAD;
;  
; 
; 
; 
;   P1DBRED = 0x0032;//0x0A						// rise edge dead time is 1.25uS
			; SOURCE LINE # 306
	MOV  	DPTR,#0E00DH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P2DBRED = 0x0032;
			; SOURCE LINE # 307
	MOV  	DPTR,#0E023H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P3DBRED = 0x0032;
			; SOURCE LINE # 308
	MOV  	DPTR,#0E039H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	P4DBRED = 0x0032;
			; SOURCE LINE # 309
	MOV  	DPTR,#0E04FH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 	
; 	P1DBFED = 0x0032;               // fall edge dead time is 1.25uS
			; SOURCE LINE # 311
	MOV  	DPTR,#0E00FH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
;   P2DBFED = 0x0032;
			; SOURCE LINE # 312
	MOV  	DPTR,#0E025H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
;   P3DBFED = 0x0032;
			; SOURCE LINE # 313
	MOV  	DPTR,#0E03BH
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
;   P4DBFED = 0x0032;
			; SOURCE LINE # 314
	MOV  	DPTR,#0E051H
	CLR  	A
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#032H
	MOVX 	@DPTR,A
; 
; 
; //	 P1OUT_MODE=DB_DISABLE;						// dead band is bypass
; //	 P2OUT_MODE=DB_DISABLE;		
; //	 P3OUT_MODE=DB_DISABLE;		
; //	 P4OUT_MODE=DB_DISABLE;		
; 
; 
; 
; // trip zone control: OSHT ---for one time; CBC for cycle by cycle
; 
; 	P1TZ_OSHT =	TZ_ENABLE;			// OSHT enable
			; SOURCE LINE # 326
	MOV  	DPTR,#0E011H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1TZ_CBC =   TZ_DISABLE;
			; SOURCE LINE # 327
	MOV  	DPTR,#0E011H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
;  	P2TZ_OSHT =	TZ_ENABLE;				// OSHT enable
			; SOURCE LINE # 329
	MOV  	DPTR,#0E027H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2TZ_CBC =   TZ_DISABLE;
			; SOURCE LINE # 330
	MOV  	DPTR,#0E027H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P3TZ_OSHT =	TZ_ENABLE;				// OSHT enable
			; SOURCE LINE # 332
	MOV  	DPTR,#0E03DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3TZ_CBC =   TZ_DISABLE;
			; SOURCE LINE # 333
	MOV  	DPTR,#0E03DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P4TZ_OSHT =	TZ_ENABLE;				// OSHT enable
			; SOURCE LINE # 335
	MOV  	DPTR,#0E053H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4TZ_CBC =   TZ_DISABLE;
			; SOURCE LINE # 336
	MOV  	DPTR,#0E053H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P1TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
			; SOURCE LINE # 338
	MOV  	DPTR,#0E012H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
			; SOURCE LINE # 339
	MOV  	DPTR,#0E012H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P2TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
			; SOURCE LINE # 341
	MOV  	DPTR,#0E028H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
			; SOURCE LINE # 342
	MOV  	DPTR,#0E028H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	P3TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
			; SOURCE LINE # 344
	MOV  	DPTR,#0E03EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
			; SOURCE LINE # 345
	MOV  	DPTR,#0E03EH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 		
; 	P4TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
			; SOURCE LINE # 348
	MOV  	DPTR,#0E054H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
			; SOURCE LINE # 349
	MOV  	DPTR,#0E054H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; // trip zone interrupt  ???  no description in datasheet
; 
; 	
; 	
; 	
; //	P1TZEINT = 0x00;						// CBC trigger interrupt and OST interrupt disable
; //	P2TZEINT = 0x00;
; //	P3TZEINT = 0x00;
; //	P4TZEINT = 0x00;
; 
; 
; 
; //event trigger select 
; 
; 	P1ET_INTEN=1;							//enable epwmx_INT interrupt
			; SOURCE LINE # 366
	MOV  	DPTR,#0E015H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ET_INTSEL=ET_CTR_ZERO;	// epwm interrupt enable at CTR = ZERO
			; SOURCE LINE # 367
	MOV  	DPTR,#0E015H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ET_SOCAEN=1;						//enable SOCA pulse
			; SOURCE LINE # 368
	MOV  	DPTR,#0E014H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
			; SOURCE LINE # 369
	MOV  	DPTR,#0E014H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ET_SOCBEN=0 ;						//disable SOCB pulse
			; SOURCE LINE # 370
	MOV  	DPTR,#0E014H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P1ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO		
			; SOURCE LINE # 371
	MOV  	DPTR,#0E014H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#08FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
; 	P2ET_INTEN=1;							//enable epwmx_INT interrupt
			; SOURCE LINE # 373
	MOV  	DPTR,#0E02BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ET_INTSEL=ET_CTR_ZERO;	// epwm interrupt enable at CTR = ZERO
			; SOURCE LINE # 374
	MOV  	DPTR,#0E02BH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ET_SOCAEN=1;						//enable SOCA pulse
			; SOURCE LINE # 375
	MOV  	DPTR,#0E02AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
			; SOURCE LINE # 376
	MOV  	DPTR,#0E02AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ET_SOCBEN=0 ;						//disable SOCB pulse
			; SOURCE LINE # 377
	MOV  	DPTR,#0E02AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P2ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO		
			; SOURCE LINE # 378
	MOV  	DPTR,#0E02AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#08FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
; 	P3ET_INTEN=1;							//enable epwmx_INT interrupt
			; SOURCE LINE # 380
	MOV  	DPTR,#0E041H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ET_INTSEL=ET_CTR_ZERO;	// epwm interrupt enable at CTR = ZERO
			; SOURCE LINE # 381
	MOV  	DPTR,#0E041H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ET_SOCAEN=1;						//enable SOCA pulse
			; SOURCE LINE # 382
	MOV  	DPTR,#0E040H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
			; SOURCE LINE # 383
	MOV  	DPTR,#0E040H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ET_SOCBEN=0 ;						//disable SOCB pulse
			; SOURCE LINE # 384
	MOV  	DPTR,#0E040H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P3ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO		
			; SOURCE LINE # 385
	MOV  	DPTR,#0E040H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#08FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
; 	P4ET_INTEN=1;							//enable epwmx_INT interrupt
			; SOURCE LINE # 387
	MOV  	DPTR,#0E057H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ET_INTSEL=ET_CTR_ZERO;	// epwm interrupt enable at CTR = ZERO
			; SOURCE LINE # 388
	MOV  	DPTR,#0E057H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ET_SOCAEN=1;						//enable SOCA pulse
			; SOURCE LINE # 389
	MOV  	DPTR,#0E056H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
			; SOURCE LINE # 390
	MOV  	DPTR,#0E056H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F8H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ET_SOCBEN=0 ;						//disable SOCB pulse
			; SOURCE LINE # 391
	MOV  	DPTR,#0E056H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	P4ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO		
			; SOURCE LINE # 392
	MOV  	DPTR,#0E056H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#08FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
;  
;  
;  //event trigger prescaler, generate SOCA and SOCB pulse for AD conversion
;  
;  P1ET_INTPRD=ET_1ST;	      //generate interrupt on 1st event
			; SOURCE LINE # 398
	MOV  	DPTR,#0E017H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P1ET_INTCNT= ET_1ST;      // event counter period =1
			; SOURCE LINE # 399
	MOV  	DPTR,#0E017H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P1ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
			; SOURCE LINE # 400
	MOV  	DPTR,#0E016H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P1ET_SOCACNT=ET_1ST;      // SOCA event counter =1
			; SOURCE LINE # 401
	MOV  	DPTR,#0E016H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P1ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
			; SOURCE LINE # 402
	MOV  	DPTR,#0E016H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P1ET_SOCBCNT=ET_DISABLE;
			; SOURCE LINE # 403
	MOV  	DPTR,#0E016H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
;  P2ET_INTPRD=ET_1ST;	      //generate interrupt on 1st event
			; SOURCE LINE # 405
	MOV  	DPTR,#0E02DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P2ET_INTCNT= ET_1ST;      // event counter period =1
			; SOURCE LINE # 406
	MOV  	DPTR,#0E02DH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P2ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
			; SOURCE LINE # 407
	MOV  	DPTR,#0E02CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P2ET_SOCACNT=ET_1ST;      // SOCA event counter =1
			; SOURCE LINE # 408
	MOV  	DPTR,#0E02CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P2ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
			; SOURCE LINE # 409
	MOV  	DPTR,#0E02CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P2ET_SOCBCNT=ET_DISABLE;
			; SOURCE LINE # 410
	MOV  	DPTR,#0E02CH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  
;  P3ET_INTPRD=ET_1ST;	      //generate interrupt on 1st event
			; SOURCE LINE # 412
	MOV  	DPTR,#0E043H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P3ET_INTCNT= ET_1ST;      // event counter period =1
			; SOURCE LINE # 413
	MOV  	DPTR,#0E043H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P3ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
			; SOURCE LINE # 414
	MOV  	DPTR,#0E042H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P3ET_SOCACNT=ET_1ST;      // SOCA event counter =1
			; SOURCE LINE # 415
	MOV  	DPTR,#0E042H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P3ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
			; SOURCE LINE # 416
	MOV  	DPTR,#0E042H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P3ET_SOCBCNT=ET_DISABLE;
			; SOURCE LINE # 417
	MOV  	DPTR,#0E042H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;       
;  P4ET_INTPRD=ET_1ST;	      //generate interrupt on 1st event
			; SOURCE LINE # 419
	MOV  	DPTR,#0E059H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P4ET_INTCNT= ET_1ST;      // event counter period =1
			; SOURCE LINE # 420
	MOV  	DPTR,#0E059H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P4ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
			; SOURCE LINE # 421
	MOV  	DPTR,#0E058H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P4ET_SOCACNT=ET_1ST;      // SOCA event counter =1
			; SOURCE LINE # 422
	MOV  	DPTR,#0E058H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P4ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
			; SOURCE LINE # 423
	MOV  	DPTR,#0E058H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;  P4ET_SOCBCNT=ET_DISABLE;
			; SOURCE LINE # 424
	MOV  	DPTR,#0E058H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;       
; 
; 
; 
; 
; //set PWM period
; 
; 
; 
; 	P1TBPRD = 0x07D0;						// pwm period is 0x0190@8MHz 10KHz 0x7D0@40MHz; 0x031f?
			; SOURCE LINE # 434
	MOV  	P1TBPRD+01H,#07H
	MOV  	P1TBPRD,#0D0H
; 	P2TBPRD = 0x07D0;
			; SOURCE LINE # 435
	MOV  	P2TBPRD+01H,#07H
	MOV  	P2TBPRD,#0D0H
;   P3TBPRD = 0x07D0;
			; SOURCE LINE # 436
	MOV  	P3TBPRD+01H,#07H
	MOV  	P3TBPRD,#0D0H
;   P4TBPRD = 0x07D0;
			; SOURCE LINE # 437
	MOV  	P4TBPRD+01H,#07H
	MOV  	P4TBPRD,#0D0H
; 
; 
; 
; 	P1CMPA = 0x01E8;						// CMPA counter value
			; SOURCE LINE # 441
	MOV  	P1CMPA+01H,#01H
	MOV  	P1CMPA,#0E8H
; 	P2CMPA = 0x01E8;
			; SOURCE LINE # 442
	MOV  	P2CMPA+01H,#01H
	MOV  	P2CMPA,#0E8H
; 	P3CMPA = 0x01E8;
			; SOURCE LINE # 443
	MOV  	P3CMPA+01H,#01H
	MOV  	P3CMPA,#0E8H
; 	P4CMPA = 0x01E8;
			; SOURCE LINE # 444
	MOV  	P4CMPA+01H,#01H
	MOV  	P4CMPA,#0E8H
; 	
; 	P1CMPB = 0x0190;						// CMPA counter value
			; SOURCE LINE # 446
	MOV  	P1CMPB+01H,#01H
	MOV  	P1CMPB,#090H
; 	P2CMPB = 0x0190;
			; SOURCE LINE # 447
	MOV  	P2CMPB+01H,#01H
	MOV  	P2CMPB,#090H
; 	P3CMPB = 0x0190;
			; SOURCE LINE # 448
	MOV  	P3CMPB+01H,#01H
	MOV  	P3CMPB,#090H
; 	P4CMPB = 0x0190;
			; SOURCE LINE # 449
	MOV  	P4CMPB+01H,#01H
	MOV  	P4CMPB,#090H
; 	
; 	
; 
; 	TBCLKSYNC = 1;					// all epwm channel synchronize enable
			; SOURCE LINE # 453
	MOV  	DPTR,#0E000H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 	CLR_EPWM1_INT();
			; SOURCE LINE # 455
	ORL  	P1ETCLR,#01H
; 	CLR_EPWM2_INT();
			; SOURCE LINE # 456
	ORL  	P2ETCLR,#01H
;   CLR_EPWM3_INT();
			; SOURCE LINE # 457
	ORL  	P3ETCLR,#01H
; 	CLR_EPWM4_INT();
			; SOURCE LINE # 458
	ORL  	P4ETCLR,#01H
; 	
; 	
; 	I2FR = 1;                //rising edge triger interrupt
			; SOURCE LINE # 461
	SETB 	I2FR
; 	EX2 = 1;								// enable epwm1,2,3 interrupt
			; SOURCE LINE # 462
	SETB 	EX2
; 	//ex3 = 1;								// enable epwm4 interrupt
; }
			; SOURCE LINE # 464
?C0014:
	RET  	
; END OF Initepwm

; 
; 
; void InitComparator(void)

	RSEG  ?PR?InitComparator?INITIAL
InitComparator:
	USING	0
			; SOURCE LINE # 467
; {
			; SOURCE LINE # 468
; 	
; 		P21_FN= CFG2;								 // P21	output COMP1
			; SOURCE LINE # 470
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P14_FN= CFG2;              	 // P14 output COMP2
			; SOURCE LINE # 471
	MOV  	DPTR,#0E0DAH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P13_FN= CFG2;              	 // P13 output COMP3
			; SOURCE LINE # 472
	MOV  	DPTR,#0E0DBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#03FH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#080H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P12_FN= CFG2;              	 // P12 output COMP4
			; SOURCE LINE # 473
	MOV  	DPTR,#0E0DBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		
; 	
; 	
; 		C1PDO1PD=CFG1;								//COMP1 power on and OP1 power off
			; SOURCE LINE # 477
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C2PDO2PD=CFG1;								//COMP2 power on and OP2 power off
			; SOURCE LINE # 478
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C3PDO3PD=CFG1;								//COMP3 power on and OP3 power off
			; SOURCE LINE # 479
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C4PD=0;												//COMP4 power on
			; SOURCE LINE # 480
	MOV  	DPTR,#0E0A4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 	
; 		C1_INT_SEL=CFG2;							//COMP1 at rising/falling edge triiger 
			; SOURCE LINE # 484
	MOV  	DPTR,#0E0C6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C2_INT_SEL=CFG2;							//COMP2 at rising/falling edge triiger
			; SOURCE LINE # 485
	MOV  	DPTR,#0E0C6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C3_INT_SEL=CFG2;							//COMP3 at rising/falling edge triiger
			; SOURCE LINE # 486
	MOV  	DPTR,#0E0C6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FBH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C4_INT_SEL=CFG2;							//COMP4 at rising/falling edge triiger
			; SOURCE LINE # 487
	MOV  	DPTR,#0E0C6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 	
; 		C1_EN=1;											//C1 interrupt enable
			; SOURCE LINE # 490
	MOV  	DPTR,#0E0EBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C2_EN=1;											//C2 interrupt enalbe
			; SOURCE LINE # 491
	MOV  	DPTR,#0E0EBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#02H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C3_EN=1;											//C3 interrupt enalbe
			; SOURCE LINE # 492
	MOV  	DPTR,#0E0EBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C4_EN=1;											//C4 interrupt enalbe
			; SOURCE LINE # 493
	MOV  	DPTR,#0E0EBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		
; 		
; 		C1INT=0;											//clear C1 INT flag
			; SOURCE LINE # 496
	MOV  	DPTR,#0E0C7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C2INT=0;											//clear C2 INT flag
			; SOURCE LINE # 497
	MOV  	DPTR,#0E0C7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C3INT=0;											//clear C3 INT flag
			; SOURCE LINE # 498
	MOV  	DPTR,#0E0C7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FBH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		C4INT=0;											//clear C4 INT flag
			; SOURCE LINE # 499
	MOV  	DPTR,#0E0C7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 		INT_CPU=1;                    //pass C234 interrupt to EX4
			; SOURCE LINE # 501
	MOV  	DPTR,#0E0EBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; 		EX4=1;
			; SOURCE LINE # 503
	SETB 	EX4
; 		EX1=1;
			; SOURCE LINE # 504
	SETB 	EX1
; 		IE1=0;
			; SOURCE LINE # 505
	CLR  	IE1
; 		IEX4=0;
			; SOURCE LINE # 506
	CLR  	IEX4
; }
			; SOURCE LINE # 507
?C0015:
	RET  	
; END OF InitComparator

; 
; 
; 
; void InitWatchDog(void)

	RSEG  ?PR?InitWatchDog?INITIAL
InitWatchDog:
	USING	0
			; SOURCE LINE # 511
; {
			; SOURCE LINE # 512
; 		WDTREL = 0xFF;
			; SOURCE LINE # 513
	MOV  	WDTREL,#0FFH
; 	WDT = 1;
			; SOURCE LINE # 514
	SETB 	WDT
; 	SWDT = 1;
			; SOURCE LINE # 515
	SETB 	SWDT
;     P1_FN_L = P1_FN_L & 0xFC;               //p1_0 as GPIO
			; SOURCE LINE # 516
	MOV  	DPTR,#0E0DBH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P1_DD = P1_DD & 0xFE;               	//p1_0 as output
			; SOURCE LINE # 517
	MOV  	DPTR,#0E0DCH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 518
?C0016:
	RET  	
; END OF InitWatchDog

; 
; 
; 
; 
; #define GPIO(pin,fn_cfg,in_out,res_en_dis,pull_up_dwn,drive_4_8ma )  FN_##pin=fn_cfg;DD_##pin=in_out;PE_##pin=res_en_dis;PS_##pin=pull_up_dwn;DS_##pin=drive_4_8ma;
; 
; void InitGPIO(void)

	RSEG  ?PR?InitGPIO?INITIAL
InitGPIO:
	USING	0
			; SOURCE LINE # 525
; {
			; SOURCE LINE # 526
; 		P0_FN_L = 0x00;									// P00 ~ P03as GPIO
			; SOURCE LINE # 527
	MOV  	DPTR,#0E0D5H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_FN_H = 0x00;									// P04 ~ P07 as GPIO
			; SOURCE LINE # 528
	MOV  	DPTR,#0E0D4H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_DD = 0x00;										// 	P00 ~  P07 intput
			; SOURCE LINE # 529
	MOV  	DPTR,#0E0D6H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_PE = 0xFF;										// output resistor enable	
			; SOURCE LINE # 530
	MOV  	DPTR,#0E0D8H
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P0_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 531
	MOV  	DPTR,#0E0D7H
	CLR  	A
	MOVX 	@DPTR,A
; 		P0_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 532
	MOV  	DPTR,#0E0D9H
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 		P1_FN_L = 0x00;									// P10 ~ P13 as GPIO
			; SOURCE LINE # 534
	MOV  	DPTR,#0E0DBH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_FN_H = 0x00;									// P14 ~ P17 as GPIO
			; SOURCE LINE # 535
	MOV  	DPTR,#0E0DAH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_DD = 0x00;										// P10 ~ P17 intput
			; SOURCE LINE # 536
	MOV  	DPTR,#0E0DCH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_PE = 0xFF;										// output resistor enable	
			; SOURCE LINE # 537
	MOV  	DPTR,#0E0DEH
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P1_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 538
	MOV  	DPTR,#0E0DDH
	CLR  	A
	MOVX 	@DPTR,A
; 		P1_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 539
	MOV  	DPTR,#0E0DFH
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 		P2_FN_L = 0x00;									// P20 ~ P23 as GPIO
			; SOURCE LINE # 541
	MOV  	DPTR,#0E0E1H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_FN_H = 0x00;									// P24 ~ P27 as GPIO
			; SOURCE LINE # 542
	MOV  	DPTR,#0E0E0H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_DD = 0x00;										// P20~ P27 intput
			; SOURCE LINE # 543
	MOV  	DPTR,#0E0E2H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_PE = 0xFF;										// pull/down resistor enable	
			; SOURCE LINE # 544
	MOV  	DPTR,#0E0E4H
	MOV  	A,#0FFH
	MOVX 	@DPTR,A
; 		P2_DS = 0x00;										//drive current =4mA
			; SOURCE LINE # 545
	MOV  	DPTR,#0E0E3H
	CLR  	A
	MOVX 	@DPTR,A
; 		P2_PS=	0x00;										//pull down resistor 
			; SOURCE LINE # 546
	MOV  	DPTR,#0E0E5H
	CLR  	A
	MOVX 	@DPTR,A
; 	
; 	// use P26 and P00 as output
; 	
;     P00_FN= CFG0;              	 // P00 as GPIO
			; SOURCE LINE # 550
	MOV  	DPTR,#0E0D5H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P00_DD = OUTPUT;               //P00 as output
			; SOURCE LINE # 551
	MOV  	DPTR,#0E0D6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
;     P00_PE = RES_DIS;               //P00 pull resistor off
			; SOURCE LINE # 552
	MOV  	DPTR,#0E0D8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		P00_DS = I_4MA;
			; SOURCE LINE # 553
	MOV  	DPTR,#0E0D7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 			
; 			GPIO(P20,CFG1,INPUT,RES_EN,PULL_DOWN,I_4MA);				//P20 as EXT2
			; SOURCE LINE # 556
	MOV  	DPTR,#0E0E1H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E2H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#01H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E5H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			GPIO(P15,CFG2,INPUT,RES_EN,PULL_DOWN,I_4MA);				//P15 as TIMER3 T_EX
			; SOURCE LINE # 557
	MOV  	DPTR,#0E0DAH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F3H
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#08H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0DCH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0DEH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0DFH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0DDH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0DFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			GPIO(P04,CFG0,OUTPUT,RES_EN,PULL_DOWN,I_4MA);				//use P14 for timer0 ouput to test timer3 capture
			; SOURCE LINE # 558
	MOV  	DPTR,#0E0D4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FCH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0D6H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0D8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#010H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0D9H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0D7H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0EFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 			GPIO(P26,CFG0,OUTPUT,RES_DIS,PULL_DOWN,I_4MA);			//P26 for LED indication
			; SOURCE LINE # 559
	MOV  	DPTR,#0E0E0H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0CFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E2H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#040H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E4H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E5H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
	MOV  	DPTR,#0E0E3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0BFH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	
; }
			; SOURCE LINE # 561
?C0017:
	RET  	
; END OF InitGPIO

; 
; void InitTimer01(void)

	RSEG  ?PR?InitTimer01?INITIAL
InitTimer01:
			; SOURCE LINE # 563
; {
			; SOURCE LINE # 564
; 		T01_DIV_L= 0x05;                 //clock divider is 122, must write T01_DIV_L first;
			; SOURCE LINE # 565
	MOV  	DPTR,#0E0EFH
	MOV  	A,#05H
	MOVX 	@DPTR,A
; 	  T01_DIV_H= 0x00;                
			; SOURCE LINE # 566
	MOV  	DPTR,#0E0EEH
	CLR  	A
	MOVX 	@DPTR,A
;   	TMOD = 0x10;                   //timer1 is 16bit timer, timer0 is 13 bit
			; SOURCE LINE # 567
	MOV  	TMOD,#010H
;     TL0 = 0x0;
			; SOURCE LINE # 568
	MOV  	TL0,#00H
;     TH0= 0xfe;
			; SOURCE LINE # 569
	MOV  	TH0,#0FEH
; 		
; 		TL1=0x0;
			; SOURCE LINE # 571
	MOV  	TL1,#00H
; 		TH1=0x0;
			; SOURCE LINE # 572
	MOV  	TH1,#00H
; 	
; 	
;     ET0 = 1;                                //enable timer0 overflow interrupt
			; SOURCE LINE # 575
	SETB 	ET0
;     ET1 = 1;                                //enable timer1 overflow interrupt
			; SOURCE LINE # 576
	SETB 	ET1
; 		TR0= 1;                                //start timer0
			; SOURCE LINE # 577
	SETB 	TR0
; 		TR1 = 1;    
			; SOURCE LINE # 578
	SETB 	TR1
; }
			; SOURCE LINE # 579
?C0018:
	RET  	
; END OF InitTimer01

; 
; void InitTimer3(void)

	RSEG  ?PR?InitTimer3?INITIAL
InitTimer3:
	USING	0
			; SOURCE LINE # 581
; {
			; SOURCE LINE # 582
; 	
; 	
; 	//capture mode setting
; 	
; //	T3PS = 0;								// no divider
; //	T3RC= 0;               //reset T3 capture register
; //	T3CTR=0;               //reset T3 counter
; //	T3CT=0;                //capture clock from cpu
; //	T3CPRL=1;             //capture mode select
; //	T3EXEN=1;             //enable T3 external EX pin
; //	T3EX_INV=0;           //T3 EX pin ,trigger on rising edge
; //	T3TF_EINT	 =1;			  // timer3 overflow interrupt enable
; //	T3TR = 1;				      // start timer3 
; //	T3TF=0;               //clear T3 overflow flag
; //	T3EXF=0;              //clear T3 EX trigger flag
; //	IE1=0;                //clear  EX1 interrupt flag
; //	 EX1=1;               //enable EX1 interrupt
; 	
; 	//timer mode setting
; 	
; 		T3PS = 0;								// no divider
			; SOURCE LINE # 603
	MOV  	DPTR,#0E0C9H
	CLR  	A
	MOVX 	@DPTR,A
; 	T3RC = 0xE0C0;
			; SOURCE LINE # 604
	MOV  	DPTR,#0E0CCH
	MOV  	A,#0E0H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0C0H
	MOVX 	@DPTR,A
; 
; 	T3TF_EINT	 =1;							// timer4 overflow interrupt enable
			; SOURCE LINE # 606
	MOV  	DPTR,#0E0C8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T3TR = 1;				// start timer4
			; SOURCE LINE # 607
	MOV  	DPTR,#0E0C8H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	CLR_T3_INT();
			; SOURCE LINE # 608
	ANL  	INT_REG1,#0E0H
; 	EX1 = 1;
			; SOURCE LINE # 609
	SETB 	EX1
; 	IE1=0;
			; SOURCE LINE # 610
	CLR  	IE1
; 	
; 	
; }
			; SOURCE LINE # 613
?C0019:
	RET  	
; END OF InitTimer3

; 
; void InitTimer4(void)

	RSEG  ?PR?InitTimer4?INITIAL
InitTimer4:
	USING	0
			; SOURCE LINE # 615
; {
			; SOURCE LINE # 616
; 	T4PS = 0;								// no divider
			; SOURCE LINE # 617
	MOV  	DPTR,#0E0CFH
	CLR  	A
	MOVX 	@DPTR,A
; 	T4RC = 0xE0C0;
			; SOURCE LINE # 618
	MOV  	DPTR,#0E0D2H
	MOV  	A,#0E0H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0C0H
	MOVX 	@DPTR,A
; 
; 	T4TF_EINT	 =1;							// timer4 overflow interrupt enable
			; SOURCE LINE # 620
	MOV  	DPTR,#0E0CEH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T4TR = 1;				// start timer4
			; SOURCE LINE # 621
	MOV  	DPTR,#0E0CEH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	CLR_T4_INT();
			; SOURCE LINE # 622
	ANL  	INT_REG4,#0F0H
; 	EX6 = 1;
			; SOURCE LINE # 623
	SETB 	EX6
; 	IEX6=0;
			; SOURCE LINE # 624
	CLR  	IEX6
; }
			; SOURCE LINE # 625
?C0020:
	RET  	
; END OF InitTimer4

; void InitTimer5(void)

	RSEG  ?PR?InitTimer5?INITIAL
InitTimer5:
	USING	0
			; SOURCE LINE # 626
; {
			; SOURCE LINE # 627
; 	T5PS = 0;											// no divider
			; SOURCE LINE # 628
	MOV  	DPTR,#0E0F4H
	CLR  	A
	MOVX 	@DPTR,A
; 	T5RC = 0x10C0;
			; SOURCE LINE # 629
	MOV  	DPTR,#0E0F7H
	MOV  	A,#010H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0C0H
	MOVX 	@DPTR,A
; 	
; 	T5TF_EINT	 =1;								// timer4 overflow interrupt enable
			; SOURCE LINE # 631
	MOV  	DPTR,#0E0F3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T5TR = 1;											// start timer4
			; SOURCE LINE # 632
	MOV  	DPTR,#0E0F3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T5TF=0;												// clear interrupt flag
			; SOURCE LINE # 633
	MOV  	DPTR,#0E0F3H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 	
; 	I3FR=1;
			; SOURCE LINE # 636
	SETB 	I3FR
; 	EX3 = 1;
			; SOURCE LINE # 637
	SETB 	EX3
; 	IEX3=0;
			; SOURCE LINE # 638
	CLR  	IEX3
; }
			; SOURCE LINE # 639
?C0021:
	RET  	
; END OF InitTimer5

; void InitTimer6(void)

	RSEG  ?PR?InitTimer6?INITIAL
InitTimer6:
	USING	0
			; SOURCE LINE # 640
; {
			; SOURCE LINE # 641
; 	T6PS = 0;											// no divider
			; SOURCE LINE # 642
	MOV  	DPTR,#0E0FAH
	CLR  	A
	MOVX 	@DPTR,A
; 	T6RC = 0x10C0;
			; SOURCE LINE # 643
	MOV  	DPTR,#0E0FDH
	MOV  	A,#010H
	MOVX 	@DPTR,A
	INC  	DPTR
	MOV  	A,#0C0H
	MOVX 	@DPTR,A
; 	
; 	T6TF_EINT	 =1;							// timer4 overflow interrupt enable
			; SOURCE LINE # 645
	MOV  	DPTR,#0E0F9H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#020H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T6TR = 1;										// start timer4
			; SOURCE LINE # 646
	MOV  	DPTR,#0E0F9H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ORL  	A,#04H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	T6TF=0;											// clear interrupt flag
			; SOURCE LINE # 647
	MOV  	DPTR,#0E0F9H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#07FH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 
; 	
; 
; 	EX5 = 1;
			; SOURCE LINE # 651
	SETB 	EX5
; 	IEX5=0;
			; SOURCE LINE # 652
	CLR  	IEX5
; }
			; SOURCE LINE # 653
?C0022:
	RET  	
; END OF InitTimer6

; void SystemClock(void)

	RSEG  ?PR?SystemClock?INITIAL
SystemClock:
	USING	0
			; SOURCE LINE # 654
; {
			; SOURCE LINE # 655
; 	  
;     RC80M_RES = 0x60;
			; SOURCE LINE # 657
	MOV  	DPTR,#0E0B2H
	MOV  	A,#060H
	MOVX 	@DPTR,A
; 	  RC80M_CAP=0x40;
			; SOURCE LINE # 658
	MOV  	DPTR,#0E0B1H
	MOV  	A,#040H
	MOVX 	@DPTR,A
; 
; 	
; 	RC80M_C3=0x4f;            //80MHz RC oscillator set=0x4f ;    40MHz RC oscillator set = 0x59
			; SOURCE LINE # 661
	MOV  	DPTR,#0E0B0H
	MOV  	A,#04FH
	MOVX 	@DPTR,A
;    RC80M_C2=0x3f;						//80MHz RC oscillator set=0x3f ;    40MHz RC oscillator set = 0x3a
			; SOURCE LINE # 662
	MOV  	DPTR,#0E0AFH
	MOV  	A,#03FH
	MOVX 	@DPTR,A
; 	
; 	  #pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; 		
; 	 	#if sysclk == freq_4MHz
; 		CLK_DIV_L = 0x14;
;     #endif
; 	  
; 		#if sysclk == freq_8MHz
; 		CLK_DIV_L = 0x0a;
;     #endif
; 		
; 		#if sysclk == freq_10MHz
; 		CLK_DIV_L = 0x08;
;     #endif
; 		
; 		#if sysclk == freq_16MHz
; 		CLK_DIV_L = 0x05;
;     #endif
; 		
; 		#if sysclk == freq_20MHz
; 		CLK_DIV_L = 0x04;
;     #endif
; 		
; 		 #if sysclk == freq_40MHz
; 		CLK_DIV_L = 0x02;
;     #endif
; 		
; 		
; 		#if sysclk == freq_80MHz
; 		CLK_DIV_L = 0x01;
			; SOURCE LINE # 726
	MOV  	DPTR,#0E0E7H
	MOV  	A,#01H
	MOVX 	@DPTR,A
;     #endif
; 		
; 	  CLK_DIV_H = 0x00;
			; SOURCE LINE # 729
	MOV  	DPTR,#0E0E6H
	CLR  	A
	MOVX 	@DPTR,A
; 		
; 		#pragma asm
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		nop
	  nop
; 		#pragma endasm
; }
			; SOURCE LINE # 765
?C0023:
	RET  	
; END OF SystemClock

; 
; 
; 
; 
; 
; 
; //initial UART1, there are 2 different ways to generate baudrate
; //way 1
; void sInitUART1(void)

	RSEG  ?PR?sInitUART1?INITIAL
sInitUART1:
			; SOURCE LINE # 774
; {
			; SOURCE LINE # 775
; 	S0CON  = 0x50;		      // set as 8-bit UART,  enable serial 0 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 776
	MOV  	S0CON,#050H
;     WDCON = 0x80;            // 0x80: baud rate = (2^smod) * Fclk / (64 * (2^10 - s0rel));
			; SOURCE LINE # 777
	MOV  	WDCON,#080H
;                               // 0x00: baud rate = (2^smod) * Fclk / (32 * 12 * (256 - th1));
;                               // smod = 0;	Fclk = system clock
; //    S0RELL = 0xF3;             //Fclk = 8MHz, baud rate = 9600
; 	
; 	 	#if sysclk == freq_4MHz
; 		S0RELL = 0xF3;							 
;     #endif
; 	
; 	#if sysclk == freq_8MHz
; 		S0RELL = 0xF3;							 
;     #endif
; 	
; 		#if sysclk == freq_10MHz
; 		S0RELL = 0xF1;							 
;     #endif
; 	
; 		#if sysclk == freq_16MHz
; 		S0RELL = 0xe6;							 
;     #endif
; 	
; 		#if sysclk == freq_20MHz
; 		S0RELL = 0xe2;							 
;     #endif
; 	
; 	#if sysclk == freq_40MHz
; 			 S0RELL = 0xbf;							 
;     #endif
;  
; 	
; 	#if sysclk == freq_80MHz
; 			 S0RELL = 0x7e;							 
			; SOURCE LINE # 808
	MOV  	S0RELL,#07EH
;     #endif
; 	
;     S0RELH = 0x03;	
			; SOURCE LINE # 811
	MOV  	S0RELH,#03H
; }
			; SOURCE LINE # 812
?C0024:
	RET  	
; END OF sInitUART1

; 
; void sInitUART2(void)

	RSEG  ?PR?sInitUART2?INITIAL
sInitUART2:
			; SOURCE LINE # 814
; {
			; SOURCE LINE # 815
;     S1CON  = 0x90;		        //enable serial 1 reception, enable serial 0 multiprocessor function
			; SOURCE LINE # 816
	MOV  	S1CON,#090H
;                                 //s1con.7 = 1: 8-bit UART(mode B)    s1con.7 = 0: 9-bit UART(mode A)
;     S1RELL = 0xE6;            //baud rate = Fclk / (32 * (2^10 - s0rel));
			; SOURCE LINE # 818
	MOV  	S1RELL,#0E6H
;     S1RELH = 0x03;	          //Fclk = 8MHz, baud rate = 9600
			; SOURCE LINE # 819
	MOV  	S1RELH,#03H
; }
			; SOURCE LINE # 820
?C0025:
	RET  	
; END OF sInitUART2

; 
; 
; void InitDAC(void)

	RSEG  ?PR?InitDAC?INITIAL
InitDAC:
	USING	0
			; SOURCE LINE # 823
; {
			; SOURCE LINE # 824
; 		DAC1_PD=0;		//power up DAC1
			; SOURCE LINE # 825
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FBH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 		DAC2_PD=0;		//power up DAC2
			; SOURCE LINE # 826
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	DAC1_VREF=0;		//use 3.3V as vref
			; SOURCE LINE # 827
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0F7H
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	DAC2_VREF=0;		//use 3.3V as vref
			; SOURCE LINE # 828
	MOV  	DPTR,#0E07AH
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	ADC_DAC_SEL1=0; //select DAC output
			; SOURCE LINE # 829
	MOV  	DPTR,#0E089H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FEH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; 	ADC_DAC_SEL2=0; //select DAC output
			; SOURCE LINE # 830
	MOV  	DPTR,#0E089H
	MOVX 	A,@DPTR
	MOV  	R7,A
	MOV  	A,R7
	ANL  	A,#0FDH
	MOV  	R7,A
	MOV  	A,R7
	MOVX 	@DPTR,A
; }
			; SOURCE LINE # 831
?C0026:
	RET  	
; END OF InitDAC

	END
