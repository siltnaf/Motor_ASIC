; .\OUTPUT\IQmathLib.SRC generated from: SRC\IQmathLib.c
; COMPILER INVOKED BY:
;        C:\Keil_v5\C51\BIN\C51.EXE SRC\IQmathLib.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVECTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\IQmathLib.lst) TABS(2) SRC(.\OUTPUT\IQmathLib.SRC)

$NOMOD51

NAME	IQMATHLIB

P2ETCLR	DATA	0CEH
TB80	BIT	098H.3
P3ETCLR	DATA	0DEH
P1TBPRD	DATA	0A1H
P0	DATA	080H
P4ETCLR	DATA	0F6H
P2TBPRD	DATA	0C1H
P1	DATA	090H
P3TBPRD	DATA	0D1H
P2	DATA	0A0H
P4TBPRD	DATA	0E1H
P3	DATA	0B0H
SM20	BIT	098H.5
P1AQCSFRC	DATA	0B1H
P2AQCSFRC	DATA	0C9H
P3AQCSFRC	DATA	0D9H
P4AQCSFRC	DATA	0F1H
P1TZFLG	DATA	0B2H
P2TZFLG	DATA	0CAH
P3TZFLG	DATA	0DAH
P1TZFRC	DATA	0B4H
IEN0	DATA	0A8H
P4TZFLG	DATA	0F2H
P2TZFRC	DATA	0CCH
IE	DATA	0A8H
EADC	BIT	0B8H.0
IEN1	DATA	0B8H
DPH1	DATA	085H
P3TZFRC	DATA	0DCH
IEN2	DATA	09AH
P4TZFRC	DATA	0F4H
CLK_PD_CON	DATA	08FH
IADC	BIT	0C0H.0
DPL1	DATA	084H
P1TZCLR	DATA	0B3H
P2TZCLR	DATA	0CBH
WDCON_7	BIT	0D8H.7
I2FR	BIT	0C8H.5
P3TZCLR	DATA	0DBH
I3FR	BIT	0C8H.6
P4TZCLR	DATA	0F3H
REN0	BIT	098H.4
ES	BIT	0A8H.4
IEX2	BIT	0C0H.1
IEX3	BIT	0C0H.2
RI	BIT	098H.0
IEX4	BIT	0C0H.3
IEX5	BIT	0C0H.4
IEX6	BIT	0C0H.5
CLK_DIV	DATA	091H
SP	DATA	081H
P1CMPA	DATA	0A3H
P2CMPA	DATA	0C3H
P1CMPB	DATA	0A5H
P3CMPA	DATA	0D3H
P2CMPB	DATA	0C5H
P4CMPA	DATA	0E3H
P3CMPB	DATA	0D5H
BSHI	DATA	0ACH
P4CMPB	DATA	0E5H
P1TBPRD_H	DATA	0A2H
P2TBPRD_H	DATA	0C2H
P3TBPRD_H	DATA	0D2H
P4TBPRD_H	DATA	0E2H
P1TBPRD_L	DATA	0A1H
P2TBPRD_L	DATA	0C1H
BSHO	DATA	0BCH
P3TBPRD_L	DATA	0D1H
P4TBPRD_L	DATA	0E1H
BREAKH	DATA	095H
S0RELH	DATA	0BAH
P00	BIT	080H.0
SBUF	DATA	099H
S1RELH	DATA	0BBH
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
BREAKL	DATA	094H
P31	BIT	0B0H.1
S0RELL	DATA	0AAH
P22	BIT	0A0H.2
P13	BIT	090H.3
P04	BIT	080H.4
P32	BIT	0B0H.2
P23	BIT	0A0H.3
S1RELL	DATA	09DH
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P34	BIT	0B0H.4
BSHI_0	DATA	0ACH
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P35	BIT	0B0H.5
BSHI_1	DATA	0ADH
P26	BIT	0A0H.6
P17	BIT	090H.7
P36	BIT	0B0H.6
BSHI_2	DATA	0AEH
P27	BIT	0A0H.7
P37	BIT	0B0H.7
BSHI_3	DATA	0AFH
BSHO_0	DATA	0BCH
BSHO_1	DATA	0BDH
IE0	BIT	088H.1
BSHO_2	DATA	0BEH
IE1	BIT	088H.3
BSHO_3	DATA	0BFH
B	DATA	0F0H
MD0	DATA	0E9H
MD1	DATA	0EAH
BSHCTL	DATA	0ABH
MD2	DATA	0EBH
SWDT	BIT	0B8H.6
P1AQSFRC	DATA	0A7H
MD3	DATA	0ECH
P2AQSFRC	DATA	0C7H
MD4	DATA	0EDH
P3AQSFRC	DATA	0D7H
MD5	DATA	0EEH
P4AQSFRC	DATA	0E7H
ACC	DATA	0E0H
ES0	BIT	0A8H.4
IP0	DATA	0A9H
ET0	BIT	0A8H.1
BPCTRL	DATA	093H
IP1	DATA	0B9H
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RI0	BIT	098H.0
TF1	BIT	088H.7
P1CMPA_H	DATA	0A4H
TH0	DATA	08CH
P2CMPA_H	DATA	0C4H
P1CMPB_H	DATA	0A6H
EX0	BIT	0A8H.0
TI0	BIT	098H.1
TH1	DATA	08DH
IT0	BIT	088H.0
P3CMPA_H	DATA	0D4H
P2CMPB_H	DATA	0C6H
EX1	BIT	0A8H.2
IT1	BIT	088H.2
P4CMPA_H	DATA	0E4H
P3CMPB_H	DATA	0D6H
EX2	BIT	0B8H.1
P4CMPB_H	DATA	0E6H
P1CMPA_L	DATA	0A3H
EX3	BIT	0B8H.2
SM0	BIT	098H.7
POWER_CON	DATA	097H
TL0	DATA	08AH
P2CMPA_L	DATA	0C3H
P1CMPB_L	DATA	0A5H
EX4	BIT	0B8H.3
SM1	BIT	098H.6
TL1	DATA	08BH
P3CMPA_L	DATA	0D3H
P2CMPB_L	DATA	0C5H
EX5	BIT	0B8H.4
EAL	BIT	0A8H.7
P4CMPA_L	DATA	0E3H
P3CMPB_L	DATA	0D5H
EX6	BIT	0B8H.5
P4CMPB_L	DATA	0E5H
WDTREL	DATA	086H
TR0	BIT	088H.4
TR1	BIT	088H.6
INT_REG1	DATA	0F9H
DPH	DATA	083H
INT_REG2	DATA	0FAH
INT_REG3	DATA	0FDH
INT_REG4	DATA	0FEH
DPL	DATA	082H
S0BUF	DATA	099H
S1BUF	DATA	09CH
S0CON	DATA	098H
S1CON	DATA	09BH
T2CON	DATA	0C8H
DPS	DATA	092H
WDT	BIT	0A8H.6
CKCON	DATA	08EH
ARCON	DATA	0EFH
P1ETFLG	DATA	0B5H
SRAM_CON	DATA	0F8H
P2ETFLG	DATA	0CDH
P3ETFLG	DATA	0DDH
P1ETFRC	DATA	0B7H
P4ETFLG	DATA	0F5H
P2ETFRC	DATA	0CFH
MEM_CONFIG	DATA	0E8H
P3ETFRC	DATA	0DFH
P4ETFRC	DATA	0F7H
PSW	DATA	0D0H
WDCON	DATA	0D8H
IRCON	DATA	0C0H
RB80	BIT	098H.2
P1ETCLR	DATA	0B6H
?PR?__IQ15sin?IQMATHLIB                  SEGMENT CODE 
?DT?__IQ15sin?IQMATHLIB                  SEGMENT DATA 
?PR?__IQ15sqrt?IQMATHLIB                 SEGMENT CODE 
?DT?__IQ15sqrt?IQMATHLIB                 SEGMENT DATA 
?PR?__IQ15atan2?IQMATHLIB                SEGMENT CODE 
?DT?__IQ15atan2?IQMATHLIB                SEGMENT DATA 
?PR?__IQ15mag?IQMATHLIB                  SEGMENT CODE 
?DT?__IQ15mag?IQMATHLIB                  SEGMENT DATA 
?DT?IQMATHLIB        SEGMENT DATA 
	EXTRN	CODE (__IQabs)
	EXTRN	CODE (_Normalize)
	EXTRN	CODE (_BarrelShift)
	EXTRN	DATA (?_BarrelShift?BYTE)
	EXTRN	CODE (?C?SLCMP)
	EXTRN	CODE (?C?LMUL)
	EXTRN	CODE (?C?LNEG)
	EXTRN	CODE (?C?SCDIV)
	EXTRN	CODE (?C?SLDIV)
	PUBLIC	Z
	PUBLIC	Y
	PUBLIC	X
	PUBLIC	dat
	PUBLIC	index
	PUBLIC	?__IQ15mag?BYTE
	PUBLIC	__IQ15mag
	PUBLIC	?__IQ15atan2?BYTE
	PUBLIC	__IQ15atan2
	PUBLIC	__IQ15sqrt
	PUBLIC	__IQ15sin

	RSEG  ?DT?__IQ15mag?IQMATHLIB
?__IQ15mag?BYTE:
          A?344:   DS   4
	ORG  4
          B?345:   DS   4

	RSEG  ?DT?__IQ15sin?IQMATHLIB
?__IQ15sin?BYTE:
          A?040:   DS   4

	RSEG  ?DT?__IQ15sqrt?IQMATHLIB
?__IQ15sqrt?BYTE:
          A?141:   DS   4

	RSEG  ?DT?__IQ15atan2?IQMATHLIB
?__IQ15atan2?BYTE:
          A?242:   DS   4
	ORG  4
          B?243:   DS   4

	RSEG  ?DT?IQMATHLIB
          index:   DS   1
            dat:   DS   4
              X:   DS   4
              Y:   DS   4
              Z:   DS   4
; /*
;  * lib.c
;  *	Copy Right (c) of JE
;  *  Created on: 
;  *      18 Sep 2018
;  *  Author: 
;  *      Ken
;  *  Last Modified: 
;  *     
;  *  Description: 
;  *      lib for JE8MCU
;  *  History:
;  *      ver 0.1 created by ken on 12 August 2016 
;  *
;  *		Use math table for fuctions of 
;  *				sin, cos, inverse, sqrt, artan
;  *				Park transform and Clark transform
;  *
;  *
;  */
;  
;  /***************************************************
;  * Includes
;  */
; 
; #include <intrins.h>   
; #include <absacc.h>
; #include "register.h"
; #include "IQmathLib.h"
; 
; 
; 
;  Long_Data dat;
;  _iq data X,Y,Z;
;  S8  data index;
; 
; 
; 
; 
; 
; 
; 
; 
; 
; 
; //_iq Normalize(_iq A)              //normalize only work for positive value. it return error if the MD3_7=1 
; //{
; 
; 
; //	
; 
; // dat.Ldata =A;
; // MD0 = dat.ss1.Byte0;
; // MD1 = dat.ss1.Byte1;
; // MD2 = dat.ss1.Byte2;
; // MD3 = dat.ss1.Byte3;
; //	
; 
; //	
; // ARCON = 0x00 ; // Start Normalizing
; // while(MD3_7==0 ); //check MDU finish flag
; //	dat.ss1.Byte0=MD0;
; //	dat.ss1.Byte1=MD1;
; //	dat.ss1.Byte2=MD2;
; //	dat.ss1.Byte3=MD3;
; // 
; //	 return dat.Ldata ;
; //}
; 
; 
; /*
;  * @fn		sin32
;  *
;  * @brief	sin32
;  * 
; * @param	none
;  * _IQsin(X) ,  =sin(X), X is in degree
; 
;  *
;  * @return 	value in IQ
;  */
; 
; 
; 
; 
; 
; 
; 
; _iq _IQsin(_iq A)

	RSEG  ?PR?__IQ15sin?IQMATHLIB
__IQ15sin:
	USING	0
			; SOURCE LINE # 89
	MOV  	A?040+03H,R7
	MOV  	A?040+02H,R6
	MOV  	A?040+01H,R5
	MOV  	A?040,R4
; {
			; SOURCE LINE # 90
; 
; 	X=_IQabs(A);
			; SOURCE LINE # 92
	MOV  	R7,A?040+03H
	MOV  	R6,A?040+02H
	MOV  	R5,A?040+01H
	MOV  	R4,A?040
	LCALL	__IQabs
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
?C0001:
; 	
; 		
; 	//limtit the search anlge to <360)
; 	
;   while (X>=_IQ(360.0))
			; SOURCE LINE # 97
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#0B4H
	MOV  	R4,#00H
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	CLR  	C
	LCALL	?C?SLCMP
	JC   	?C0002
; 			{
			; SOURCE LINE # 98
; 				X-=_IQ(360.0);
			; SOURCE LINE # 99
	CLR  	C
	MOV  	A,X+03H
	SUBB 	A,#00H
	MOV  	X+03H,A
	MOV  	A,X+02H
	SUBB 	A,#00H
	MOV  	X+02H,A
	MOV  	A,X+01H
	SUBB 	A,#0B4H
	MOV  	X+01H,A
	MOV  	A,X
	SUBB 	A,#00H
	MOV  	X,A
; 			}
			; SOURCE LINE # 100
	SJMP 	?C0001
?C0002:
; 	
; 	
; 	// convert angle to data in sin table, angle =angle/360 * 512  or  =angle *64/45
; 			
; 	X=_IQmpy(X,_IQ(1.422222));
			; SOURCE LINE # 105
	MOV  	?_BarrelShift?BYTE+04H,#028H
	MOV  	R7,#0BH
	MOV  	R6,#0B6H
	MOV  	R5,#00H
	MOV  	R4,#00H
	LCALL	_BarrelShift
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#027H
	LCALL	_BarrelShift
	MOV  	R0,AR4
	MOV  	R1,AR5
	MOV  	R2,AR6
	MOV  	R3,AR7
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	LCALL	?C?LMUL
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
;   X=_IQint(X);          //convert to integer
			; SOURCE LINE # 106
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#02FH
	LCALL	_BarrelShift
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
;   Z=XWORD[X+sin_table];
			; SOURCE LINE # 107
	MOV  	R7,#02H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	LCALL	?C?LMUL
	MOV  	DPL,R7
	MOV  	DPH,R6
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	Z=BarrelShift(Z,(LL_shift+16));   										//sin table is in Q15 format, it need to convert to Q31 first by shifting 16 bit to left
			; SOURCE LINE # 108
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#090H
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	Z=BarrelShift(Z, (RA_shift+ (30 - GLOBAL_Q)));     	//convert Q31 to global Q format
			; SOURCE LINE # 109
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#02FH
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 
; 	if (A<0) Z=-(Z);
			; SOURCE LINE # 111
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,A?040+03H
	MOV  	R2,A?040+02H
	MOV  	R1,A?040+01H
	MOV  	R0,A?040
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0003
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	LCALL	?C?LNEG
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
?C0003:
; 
; return Z ;
			; SOURCE LINE # 113
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
; 	
; }
			; SOURCE LINE # 115
?C0004:
	RET  	
; END OF __IQ15sin

; 
; 
; 
; 
; 
; 
; 
; 
; 
; /*
;  * @fn		sqrt32
;  *
;  * @brief	sqrt32
;  * 
;  * @param	none
;  * _IQsqrt(X) ,  sqrt(X)
; 
;  *
;  * @return 	sqrt value in IQ
;  */
; 
; 
; 
; 
; 
; 
; _iq _IQsqrt(_iq A)

	RSEG  ?PR?__IQ15sqrt?IQMATHLIB
__IQ15sqrt:
	USING	0
			; SOURCE LINE # 142
	MOV  	A?141+03H,R7
	MOV  	A?141+02H,R6
	MOV  	A?141+01H,R5
	MOV  	A?141,R4
; 
; {
			; SOURCE LINE # 144
; 
; 	if (A<0) return 0;
			; SOURCE LINE # 146
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,A?141+03H
	MOV  	R2,A?141+02H
	MOV  	R1,A?141+01H
	MOV  	R0,A?141
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0005
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	RET  	
?C0005:
; 
; 	X=Normalize(A);   //convert to Q30 format
			; SOURCE LINE # 148
	MOV  	R7,A?141+03H
	MOV  	R6,A?141+02H
	MOV  	R5,A?141+01H
	MOV  	R4,A?141
	LCALL	_Normalize
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 	index=(31-GLOBAL_Q-ARCON);
			; SOURCE LINE # 149
	CLR  	C
	MOV  	A,#010H
	SUBB 	A,ARCON
	MOV  	index,A
; 	
; 	if (index %2==0)                //check if the power is even or  odd value	
			; SOURCE LINE # 151
	MOV  	A,index
	MOV  	B,#02H
	LCALL	?C?SCDIV
	MOV  	R7,B
	MOV  	A,R7
	JNZ  	?C0007
; 	{
			; SOURCE LINE # 152
; 	X &=0x7fffffff;
			; SOURCE LINE # 153
	MOV  	A,X+03H
	ANL  	A,#0FFH
	MOV  	X+03H,A
	MOV  	A,X+02H
	ANL  	A,#0FFH
	MOV  	X+02H,A
	MOV  	A,X+01H
	ANL  	A,#0FFH
	MOV  	X+01H,A
	MOV  	A,X
	ANL  	A,#07FH
	MOV  	X,A
; 	X=BarrelShift(X, (RA_shift+23))+128;	
			; SOURCE LINE # 154
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#037H
	LCALL	_BarrelShift
	MOV  	A,R7
	ADD  	A,#080H
	MOV  	X+03H,A
	MOV  	A,R6
	ADDC 	A,#00H
	MOV  	X+02H,A
	MOV  	A,R5
	ADDC 	A,#00H
	MOV  	X+01H,A
	MOV  	A,R4
	ADDC 	A,#00H
	MOV  	X,A
; 		
; 		Z=XWORD[X+sqrt_table];
			; SOURCE LINE # 156
	MOV  	R7,#02H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	LCALL	?C?LMUL
	CLR  	A
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#08H
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	}
			; SOURCE LINE # 157
	SJMP 	?C0008
?C0007:
; 	else
; 	{
			; SOURCE LINE # 159
;     index++;                             //if the power is odd value , divide t by 2
			; SOURCE LINE # 160
	INC  	index
; 	
; 		X =BarrelShift(X,(RA_shift+24));             //square root in value is divided by 2 
			; SOURCE LINE # 162
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#038H
	LCALL	_BarrelShift
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 	  X &=0x0000007f;
			; SOURCE LINE # 163
	MOV  	A,X+03H
	ANL  	A,#07FH
	MOV  	X+03H,A
	MOV  	A,X+02H
	ANL  	A,#00H
	MOV  	X+02H,A
	MOV  	A,X+01H
	ANL  	A,#00H
	MOV  	X+01H,A
	MOV  	A,X
	ANL  	A,#00H
	MOV  	X,A
; 		Z=XWORD[X+sqrt_table];
			; SOURCE LINE # 164
	MOV  	R7,#02H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	LCALL	?C?LMUL
	CLR  	A
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#08H
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	}
			; SOURCE LINE # 165
?C0008:
; 	Z=BarrelShift(Z,(LL_shift+16));   										//sqrt table is in Q15 format, it need to convert to Q31 first by shifting 16 bit to left
			; SOURCE LINE # 166
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#090H
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	Z=BarrelShift(Z, (RA_shift+ (30 - GLOBAL_Q)));     	//convert Q31 to global Q format
			; SOURCE LINE # 167
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#02FH
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	
; 
; 	
; 	if (index>=0)
			; SOURCE LINE # 171
	CLR  	C
	MOV  	A,index
	XRL  	A,#080H
	SUBB 	A,#080H
	JC   	?C0009
; 	Z=BarrelShift(Z, (LA_shift+(index/2)));
			; SOURCE LINE # 172
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	A,index
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R3,A
	MOV  	A,R3
	ADD  	A,#0A0H
	MOV  	?_BarrelShift?BYTE+04H,A
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
	SJMP 	?C0010
?C0009:
; 	else Z=BarrelShift(Z,(RA_shift+((-index)/2)));
			; SOURCE LINE # 173
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	A,index
	CPL  	A
	INC  	A
	MOV  	R3,A
	MOV  	A,R3
	MOV  	C,ACC.7
	RRC  	A
	MOV  	R3,A
	MOV  	A,R3
	ADD  	A,#020H
	MOV  	?_BarrelShift?BYTE+04H,A
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
?C0010:
; 	
; return  Z;
			; SOURCE LINE # 175
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
; }
			; SOURCE LINE # 176
?C0006:
	RET  	
; END OF __IQ15sqrt

; 
; 
; /*
;  * @fn		atan32
;  *
;  * @brief	atan32
;  * 
;  * @param	none
;  * _IQatan2(Y,X) ,  atan2(Y/X)
;  * _IQatan(Y)    , =atan2(Y/1)
;  *
; 
; 
;  * @return 	angle in degree
;  */
; 
; _iq _IQatan2(_iq A, _iq B)

	RSEG  ?PR?__IQ15atan2?IQMATHLIB
__IQ15atan2:
	USING	0
			; SOURCE LINE # 193
	MOV  	A?242+03H,R7
	MOV  	A?242+02H,R6
	MOV  	A?242+01H,R5
	MOV  	A?242,R4
; {
			; SOURCE LINE # 194
; 	Y=_IQabs(A);
			; SOURCE LINE # 195
	MOV  	R7,A?242+03H
	MOV  	R6,A?242+02H
	MOV  	R5,A?242+01H
	MOV  	R4,A?242
	LCALL	__IQabs
	MOV  	Y+03H,R7
	MOV  	Y+02H,R6
	MOV  	Y+01H,R5
	MOV  	Y,R4
; 	X=_IQabs(B);
			; SOURCE LINE # 196
	MOV  	R7,B?243+03H
	MOV  	R6,B?243+02H
	MOV  	R5,B?243+01H
	MOV  	R4,B?243
	LCALL	__IQabs
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 
; 	
; 	if (X>Y)
			; SOURCE LINE # 199
	MOV  	R7,Y+03H
	MOV  	R6,Y+02H
	MOV  	R5,Y+01H
	MOV  	R4,Y
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	SETB 	C
	LCALL	?C?SLCMP
	JC   	?C0011
; 		{
			; SOURCE LINE # 200
; 			
; 			
; 			
; 			Y=BarrelShift(Y,(LA_shift+5));  
			; SOURCE LINE # 204
	MOV  	R7,Y+03H
	MOV  	R6,Y+02H
	MOV  	R5,Y+01H
	MOV  	R4,Y
	MOV  	?_BarrelShift?BYTE+04H,#0A5H
	LCALL	_BarrelShift
	MOV  	Y+03H,R7
	MOV  	Y+02H,R6
	MOV  	Y+01H,R5
	MOV  	Y,R4
; 			X=BarrelShift(X,(RA_shift+4));  
			; SOURCE LINE # 205
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#024H
	LCALL	_BarrelShift
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 			X=Y/X;
			; SOURCE LINE # 206
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	MOV  	R7,Y+03H
	MOV  	R6,Y+02H
	MOV  	R5,Y+01H
	MOV  	R4,Y
	LCALL	?C?SLDIV
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 		
; 		
; 			index=pos;
			; SOURCE LINE # 209
	MOV  	index,#00H
; 		
; 		 
; 
; 		}
			; SOURCE LINE # 213
	SJMP 	?C0012
?C0011:
; 		else
; 		{
			; SOURCE LINE # 215
; 			X=BarrelShift(X,(LA_shift+5)); ;
			; SOURCE LINE # 216
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	?_BarrelShift?BYTE+04H,#0A5H
	LCALL	_BarrelShift
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 			Y=BarrelShift(Y,(RA_shift+4)); 
			; SOURCE LINE # 217
	MOV  	R7,Y+03H
	MOV  	R6,Y+02H
	MOV  	R5,Y+01H
	MOV  	R4,Y
	MOV  	?_BarrelShift?BYTE+04H,#024H
	LCALL	_BarrelShift
	MOV  	Y+03H,R7
	MOV  	Y+02H,R6
	MOV  	Y+01H,R5
	MOV  	Y,R4
; 			X=X/Y;
			; SOURCE LINE # 218
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	MOV  	R3,Y+03H
	MOV  	R2,Y+02H
	MOV  	R1,Y+01H
	MOV  	R0,Y
	LCALL	?C?SLDIV
	MOV  	X+03H,R7
	MOV  	X+02H,R6
	MOV  	X+01H,R5
	MOV  	X,R4
; 
; 			
; 			index=neg;
			; SOURCE LINE # 221
	MOV  	index,#01H
; 		}
			; SOURCE LINE # 222
?C0012:
; 			
; 			
; 			
; 		Z=XWORD[X+atan_table];
			; SOURCE LINE # 226
	MOV  	R7,#02H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,X+03H
	MOV  	R2,X+02H
	MOV  	R1,X+01H
	MOV  	R0,X
	LCALL	?C?LMUL
	CLR  	A
	ADD  	A,R7
	MOV  	DPL,A
	MOV  	A,#0CH
	ADDC 	A,R6
	MOV  	DPH,A
	MOVX 	A,@DPTR
	MOV  	R6,A
	INC  	DPTR
	MOVX 	A,@DPTR
	MOV  	R7,A
	CLR  	A
	MOV  	R4,A
	MOV  	R5,A
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 		Z=Z*45;                 //Z=(Z/4096)*45 degree
			; SOURCE LINE # 227
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	R3,#02DH
	MOV  	R2,#00H
	MOV  	R1,#00H
	MOV  	R0,#00H
	LCALL	?C?LMUL
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 		Z=BarrelShift(Z,(LL_shift+12));   										//sin table is in Q15 format, it need to convert to Q31 first by shifting 16 bit to left
			; SOURCE LINE # 228
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#08CH
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 		Z=BarrelShift(Z, (RA_shift+ (24 - GLOBAL_Q)));     	//convert Q31 to global Q format
			; SOURCE LINE # 229
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
	MOV  	?_BarrelShift?BYTE+04H,#029H
	LCALL	_BarrelShift
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 		
; 		
; 		if (index==neg)	Z=_IQ(90.0)-Z;
			; SOURCE LINE # 232
	MOV  	A,index
	CJNE 	A,#01H,?C0013
	CLR  	C
	CLR  	A
	SUBB 	A,Z+03H
	MOV  	Z+03H,A
	CLR  	A
	SUBB 	A,Z+02H
	MOV  	Z+02H,A
	MOV  	A,#02DH
	SUBB 	A,Z+01H
	MOV  	Z+01H,A
	CLR  	A
	SUBB 	A,Z
	MOV  	Z,A
?C0013:
; 		
; 	if ((A<0)&&(B>0))
			; SOURCE LINE # 234
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,A?242+03H
	MOV  	R2,A?242+02H
	MOV  	R1,A?242+01H
	MOV  	R0,A?242
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0014
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,B?243+03H
	MOV  	R2,B?243+02H
	MOV  	R1,B?243+01H
	MOV  	R0,B?243
	SETB 	C
	LCALL	?C?SLCMP
	JC   	?C0014
; 		Z=_IQ(180.0)-Z;
			; SOURCE LINE # 235
	CLR  	C
	CLR  	A
	SUBB 	A,Z+03H
	MOV  	Z+03H,A
	CLR  	A
	SUBB 	A,Z+02H
	MOV  	Z+02H,A
	MOV  	A,#05AH
	SUBB 	A,Z+01H
	MOV  	Z+01H,A
	CLR  	A
	SUBB 	A,Z
	MOV  	Z,A
	LJMP 	?C0015
?C0014:
; 		else if ((A<0)&&(B<0))
			; SOURCE LINE # 236
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,A?242+03H
	MOV  	R2,A?242+02H
	MOV  	R1,A?242+01H
	MOV  	R0,A?242
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0016
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,B?243+03H
	MOV  	R2,B?243+02H
	MOV  	R1,B?243+01H
	MOV  	R0,B?243
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0016
; 			Z=_IQ(180.0)+Z;
			; SOURCE LINE # 237
	MOV  	A,Z+03H
	ADD  	A,#00H
	MOV  	Z+03H,A
	MOV  	A,Z+02H
	ADDC 	A,#00H
	MOV  	Z+02H,A
	MOV  	A,Z+01H
	ADDC 	A,#05AH
	MOV  	Z+01H,A
	MOV  	A,Z
	ADDC 	A,#00H
	MOV  	Z,A
	SJMP 	?C0015
?C0016:
; 		else if ((A>0)&&(B<0))
			; SOURCE LINE # 238
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,A?242+03H
	MOV  	R2,A?242+02H
	MOV  	R1,A?242+01H
	MOV  	R0,A?242
	SETB 	C
	LCALL	?C?SLCMP
	JC   	?C0015
	MOV  	R7,#00H
	MOV  	R6,#00H
	MOV  	R5,#00H
	MOV  	R4,#00H
	MOV  	R3,B?243+03H
	MOV  	R2,B?243+02H
	MOV  	R1,B?243+01H
	MOV  	R0,B?243
	CLR  	C
	LCALL	?C?SLCMP
	JNC  	?C0015
; 			Z=_IQ(360.0)-Z;
			; SOURCE LINE # 239
	CLR  	C
	CLR  	A
	SUBB 	A,Z+03H
	MOV  	Z+03H,A
	CLR  	A
	SUBB 	A,Z+02H
	MOV  	Z+02H,A
	MOV  	A,#0B4H
	SUBB 	A,Z+01H
	MOV  	Z+01H,A
	CLR  	A
	SUBB 	A,Z
	MOV  	Z,A
?C0018:
?C0017:
?C0015:
; 	
; 	
; 
; return Z;	
			; SOURCE LINE # 243
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
; }
			; SOURCE LINE # 244
?C0019:
	RET  	
; END OF __IQ15atan2

; 
; 
; _iq _IQmag(_iq A, _iq B) 

	RSEG  ?PR?__IQ15mag?IQMATHLIB
__IQ15mag:
	USING	0
			; SOURCE LINE # 247
	MOV  	A?344+03H,R7
	MOV  	A?344+02H,R6
	MOV  	A?344+01H,R5
	MOV  	A?344,R4
; {
			; SOURCE LINE # 248
; 	X=_IQmpy(A,A)+_IQmpy(B,B);
			; SOURCE LINE # 249
	MOV  	R7,B?345+03H
	MOV  	R6,B?345+02H
	MOV  	R5,B?345+01H
	MOV  	R4,B?345
	MOV  	?_BarrelShift?BYTE+04H,#028H
	LCALL	_BarrelShift
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R7,B?345+03H
	MOV  	R6,B?345+02H
	MOV  	R5,B?345+01H
	MOV  	R4,B?345
	MOV  	?_BarrelShift?BYTE+04H,#027H
	LCALL	_BarrelShift
	MOV  	R0,AR4
	MOV  	R1,AR5
	MOV  	R2,AR6
	MOV  	R3,AR7
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	LCALL	?C?LMUL
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R7,A?344+03H
	MOV  	R6,A?344+02H
	MOV  	R5,A?344+01H
	MOV  	R4,A?344
	MOV  	?_BarrelShift?BYTE+04H,#028H
	LCALL	_BarrelShift
	PUSH 	AR4
	PUSH 	AR5
	PUSH 	AR6
	PUSH 	AR7
	MOV  	R7,A?344+03H
	MOV  	R6,A?344+02H
	MOV  	R5,A?344+01H
	MOV  	R4,A?344
	MOV  	?_BarrelShift?BYTE+04H,#027H
	LCALL	_BarrelShift
	MOV  	R0,AR4
	MOV  	R1,AR5
	MOV  	R2,AR6
	MOV  	R3,AR7
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	LCALL	?C?LMUL
	MOV  	R0,AR4
	MOV  	R1,AR5
	MOV  	R2,AR6
	MOV  	R3,AR7
	POP  	AR7
	POP  	AR6
	POP  	AR5
	POP  	AR4
	MOV  	A,R3
	ADD  	A,R7
	MOV  	X+03H,A
	MOV  	A,R2
	ADDC 	A,R6
	MOV  	X+02H,A
	MOV  	A,R1
	ADDC 	A,R5
	MOV  	X+01H,A
	MOV  	A,R0
	ADDC 	A,R4
	MOV  	X,A
; 	Z=_IQsqrt(X);
			; SOURCE LINE # 250
	MOV  	R7,X+03H
	MOV  	R6,X+02H
	MOV  	R5,X+01H
	MOV  	R4,X
	LCALL	__IQ15sqrt
	MOV  	Z+03H,R7
	MOV  	Z+02H,R6
	MOV  	Z+01H,R5
	MOV  	Z,R4
; 	return Z;
			; SOURCE LINE # 251
	MOV  	R7,Z+03H
	MOV  	R6,Z+02H
	MOV  	R5,Z+01H
	MOV  	R4,Z
; 	
; }
			; SOURCE LINE # 253
?C0020:
	RET  	
; END OF __IQ15mag

	END
