C51 COMPILER V9.54   LIB                                                                   10/25/2018 10:13:59 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE LIB
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SRC\lib.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVECTOR
                    -(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\lib.lst) TABS(2) SRC(.\OUTPUT\lib.SRC)

line level    source

   1          /*
   2           * lib.c
   3           *  Copy Right (c) of JE
   4           *  Created on: 
   5           *      18 Sep 2018
   6           *  Author: 
   7           *      Ken
   8           *  Last Modified: 
   9           *     
  10           *  Description: 
  11           *      lib for JE8MCU
  12           *  History:
  13           *      ver 0.1 created by ken on 12 August 2016 
  14           *
  15           *    Use math table for fuctions of 
  16           *        sin, cos, inverse, sqrt, artan
  17           *        Park transform and Clark transform
  18           *
  19           *
  20           */
  21           
  22           /***************************************************
  23           * Includes
  24           */
  25          #include <stdio.h>
  26          #include <intrins.h>   
  27          #include <absacc.h>
  28          #include "register.h"
  29          #include "lib.h"
  30          
  31          
  32          
  33          volatile U8 xdata _md_error;// _at_ (0xDFFF);
  34          volatile U16 xdata _div_remainder;// _at_ (0xDFFD);
  35          volatile U16 xdata _div_denominator;// _at_ (0xA4FB);
  36          
  37          #pragma asm
  38                          CSEG    AT      4000h
  39          #pragma endasm
  40          const unsigned char tDebugTable[10] = {1,2,3,4,5,6,7,8,9,10};
  41          
  42          
  43          
  44          /*
  45           * @fn    EE_write
  46           *
  47           * @brief write data to EEPROM , 64x32 bit
  48           * 
  49           * @param none
  50           * EE_write(eeprom address, eeprom data)
  51          
  52           *
  53           * @return  none
  54           */
C51 COMPILER V9.54   LIB                                                                   10/25/2018 10:13:59 PAGE 2   

  55          
  56           void EE_write(U8 EE_addr, U32 EE_data)
  57          {
  58   1        
  59   1            while (MTP_BUSY==1);
  60   1            MTPCON2=0x53;         //init MTP write mode
  61   1            MTPSADD1=EE_addr;       // EEPROM address
  62   1            MTPSADD2=0x00;
  63   1            MTPDATA=EE_data;
  64   1            
  65   1            MTPCON1=0x0b;       //start 
  66   1            
  67   1            while (MTP_WRITE==0);
  68   1            MTPCON1=0x0;
  69   1        
  70   1      }
  71          
  72          /*
  73           * @fn    EE_read
  74           *
  75           * @brief read data from EEPROM , 64x32 bit
  76           * 
  77           * @param none
  78           * EE_read(eeprom address)
  79          
  80           *
  81           * @return  eprom data
  82           */
  83          
  84          U32 EE_read(U8 EE_addr)
  85          {
  86   1        
  87   1            while (MTP_BUSY==1);
  88   1            MTPCON2=0x55;         //init MTP read mode
  89   1            MTPSADD1=EE_addr;       //
  90   1            MTPSADD2=0x00;
  91   1            MTPCON1=0x07;         //start
  92   1            while (MTP_READ==0);
  93   1            MTPCON1=0x0;
  94   1            return MTPDATA;
  95   1        
  96   1      }
  97          
  98          
  99          
 100          
 101          
 102          
 103          /*
 104           * @fn    sin16
 105           *
 106           * @brief sin16
 107           * 
 108           * @param none
 109           * sin(x) , where x is 
 110          
 111           *
 112           * @return  none
 113           */
 114          S16 sin(S16 dat)
 115          {
 116   1      volatile signed int value;
C51 COMPILER V9.54   LIB                                                                   10/25/2018 10:13:59 PAGE 3   

 117   1        value= XWORD[dat];
 118   1        
 119   1      return value;
 120   1        
 121   1      }
 122          
 123          
 124          /*
 125           * @fn    Normalize
 126           *
 127           * @brief Normalize
 128           * 
 129           * @param none
 130           *
 131           * @return  none
 132           */
 133          //S32 Normalize(S32 dat)
 134          //{
 135          //#pragma asm
 136          //  mov MD0, r7
 137          //  mov MD1, r6
 138          //  mov MD2, r5
 139          //  mov MD3, r4
 140          
 141          //  ANL  ARCON , #0xE0
 142          
 143          //  nop    ;wait 34
 144          //  nop
 145          //  nop
 146          //  nop
 147          //  nop
 148          //  nop    
 149          //  nop
 150          //  nop
 151          //  nop
 152          //  nop
 153          //  nop    ;wait 24
 154          //  nop
 155          //  nop
 156          //  nop
 157          //  nop
 158          //  nop    
 159          //  nop
 160          //  nop
 161          //  nop
 162          //  nop
 163          //  nop    ;wait 14
 164          //  nop
 165          //  nop
 166          //  nop
 167          //  nop
 168          //  nop    
 169          //  nop
 170          //  nop
 171          //  nop
 172          //  nop
 173          //  nop    ;wait 4
 174          //  nop
 175          //  nop
 176          //  nop
 177          //#pragma endasm
 178          //  _md_error = (ARCON&(MD_MDEF|MD_MDOV));
C51 COMPILER V9.54   LIB                                                                   10/25/2018 10:13:59 PAGE 4   

 179          //#pragma asm
 180          //  mov r7, MD0
 181          //  mov r6, MD1
 182          //  mov r5, MD2
 183          //  mov r4, MD3
 184          //#pragma endasm
 185          //return MD0;
 186          //}
 187          void Normalizing_Write(unsigned long Data)
 188          {
 189   1       Long_Data LD;
 190   1       LD.Ldata =Data;
 191   1       MD0 = LD.ss1.Byte0;
 192   1       MD1 = LD.ss1.Byte1;
 193   1       MD2 = LD.ss1.Byte2;
 194   1       MD3 = LD.ss1.Byte3;
 195   1       ARCON = 0x00 ; // Start Normalizing
 196   1       while(!(PCON & 0x40)) //check MDU finish flag
 197   1       {};
 198   1      }
 199          
 200          void Normalizing_Read(void)
 201          { 
 202   1      Long_Data LD;
 203   1       LD.ss1.Byte0 = MD0; //first read
 204   1       LD.ss1.Byte1 = MD1;
 205   1       LD.ss1.Byte2 = MD2;
 206   1       LD.ss1.Byte3 = MD3; //last read, MDEF(error flag) happen if not read
 207   1      } 
 208          
 209          void Normalizing_test(void)
 210          {
 211   1      
 212   1       Normalizing_Write(0x00000001); //ANS=0x1F -->MDOV=0
 213   1      
 214   1       Normalizing_Read();
 215   1      
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    253    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
