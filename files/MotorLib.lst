<<<<<<< HEAD
C51 COMPILER V9.54   MOTORLIB                                                              11/08/2018 17:04:39 PAGE 1   
=======
C51 COMPILER V9.54   MOTORLIB                                                              11/11/2018 11:38:19 PAGE 1   
>>>>>>> No update


C51 COMPILER V9.54, COMPILATION OF MODULE MOTORLIB
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SRC\MotorLib.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTV
                    -ECTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\MotorLib.lst) TABS(2) SRC(.\OUTPUT\MotorLib.SRC)

line level    source

   1          /*
   2           * lib.c
   3           *  Copy Right (c) of JE
   4           *  Created on: 
   5           *      18 Sep 2018
   6           *  Author: 
   7           *      Ken
   8           *  Last Modified: 
   9           *     
  10           *  Description: 
  11           *      lib for JE8MCU
  12           *  History:
  13           *      ver 0.1 created by ken on 12 August 2016 
  14           *
  15           *    Use math table for fuctions of 
  16           *        sin, cos, inverse, sqrt, artan
  17           *        Park transform and Clark transform
  18           *
  19           *
  20           */
  21           
  22           /***************************************************
  23           * Includes
  24           */
  25          #include <stdio.h>
  26          #include <intrins.h>   
  27          #include <absacc.h>
  28          #include "register.h"
  29          #include "motorLib.h"
  30          
  31          
  32          
  33          volatile U8 xdata _md_error;// _at_ (0xDFFF);
  34          volatile U16 xdata _div_remainder;// _at_ (0xDFFD);
  35          volatile U16 xdata _div_denominator;// _at_ (0xA4FB);
  36          
  37          #pragma asm
  38                          CSEG    AT      4000h
  39          #pragma endasm
  40          const unsigned char tDebugTable[10] = {1,2,3,4,5,6,7,8,9,10};
  41          
  42          
  43          
  44          /*
  45           * @fn    EE_write
  46           *
  47           * @brief write data to EEPROM , 64x32 bit
  48           * 
  49           * @param none
  50           * EE_write(eeprom address, eeprom data)
  51          
  52           *
  53           * @return  none
  54           */
<<<<<<< HEAD
C51 COMPILER V9.54   MOTORLIB                                                              11/08/2018 17:04:39 PAGE 2   
=======
C51 COMPILER V9.54   MOTORLIB                                                              11/11/2018 11:38:19 PAGE 2   
>>>>>>> No update

  55          
  56           void EE_write(U8 EE_addr, U32 EE_data)
  57          {
  58   1        
  59   1            while (MTP_BUSY==1);
  60   1            MTPCON2=0x53;         //init MTP write mode
  61   1            MTPSADD1=EE_addr;       // EEPROM address
  62   1            MTPSADD2=0x00;
  63   1            MTPDATA=EE_data;
  64   1            
  65   1            MTPCON1=0x0b;       //start 
  66   1            
  67   1            while (MTP_WRITE==0);
  68   1            MTPCON1=0x0;
  69   1        
  70   1      }
  71          
  72          /*
  73           * @fn    EE_read
  74           *
  75           * @brief read data from EEPROM , 64x32 bit
  76           * 
  77           * @param none
  78           * EE_read(eeprom address)
  79          
  80           *
  81           * @return  eprom data
  82           */
  83          
  84          U32 EE_read(U8 EE_addr)
  85          {
  86   1        
  87   1            while (MTP_BUSY==1);
  88   1            MTPCON2=0x55;         //init MTP read mode
  89   1            MTPSADD1=EE_addr;       //
  90   1            MTPSADD2=0x00;
  91   1            MTPCON1=0x07;         //start
  92   1            while (MTP_READ==0);
  93   1            MTPCON1=0x0;
  94   1            return MTPDATA;
  95   1        
  96   1      }
  97          
  98          
  99          
 100          
 101          
 102          
 103          /*
 104           * @fn    sin16
 105           *
 106           * @brief sin16
 107           * 
 108           * @param none
 109           * sin(x) , where x is 
 110          
 111           *
 112           * @return  none
 113           */
 114          S16 sin(S16 dat)
 115          {
 116   1      volatile signed int value;
<<<<<<< HEAD
C51 COMPILER V9.54   MOTORLIB                                                              11/08/2018 17:04:39 PAGE 3   
=======
C51 COMPILER V9.54   MOTORLIB                                                              11/11/2018 11:38:19 PAGE 3   
>>>>>>> No update

 117   1        value= XWORD[dat];
 118   1        
 119   1      return value;
 120   1        
 121   1      }
 122          
 123          
 124          
 125          S32 Normalize(S32 Data)
 126          {
 127   1       Long_Data LD;
 128   1       LD.Ldata =Data;
 129   1       MD0 = LD.ss1.Byte0;
 130   1       MD1 = LD.ss1.Byte1;
 131   1       MD2 = LD.ss1.Byte2;
 132   1       MD3 = LD.ss1.Byte3;
 133   1       ARCON = 0x00 ; // Start Normalizing
 134   1       while(MD3_7==0 ); //check MDU finish flag
 135   1        LD.ss1.Byte0=MD0;
 136   1        LD.ss1.Byte1=MD1;
 137   1        LD.ss1.Byte2=MD2;
 138   1        LD.ss1.Byte3=MD3;
 139   1       
 140   1         return LD.Ldata ;
 141   1      }
 142          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     28    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
