C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE INITIAL
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SRC\initial.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVE
                    -CTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\initial.lst) TABS(2) SRC(.\OUTPUT\initial.SRC)

line level    source

   1          #include "register.h"
   2          #include <intrins.h>
   3          #include "app.h"
   4          #include "initial.h"
   5          #include "ISD51.H"
   6          #include "epwm.h"
   7          
   8          
   9          
  10          
  11          void InitEXT(void)
  12          { 
  13   1      //    EINT1_EN=0; 
  14   1      //    EINT2_EN=1;       //enable EXT2
  15   1      //    EINT3_EN=0;
  16   1      //    EINT4_EN=0;
  17   1        
  18   1            EXINT_EN = 0x02;          //RXINT_EN cannot be read, it can be write only
  19   1                                      //EXINT_EN= 0x01      -----enable EXT1
  20   1                                      //          0x02      -----enable EXT2
  21   1                                      //          0x04      -----enable EXT3
  22   1                                      //          0x08      -----enable EXT4
  23   1        
  24   1          EINT2_CFG=RISING_EDGE;    //rising edge trigger
  25   1          EX0=1;
  26   1          IT0=1;
  27   1          IE0=0;
  28   1          INT_REG1 &=0xf0;              
  29   1        
  30   1      }
  31          
  32          void InitISDDebug(void)
  33          {
  34   1        
  35   1          EAL = 0;
  36   1          //ISD51++++++++++++++++++++++++++
  37   1          #if ISDDebug == ENABLE_ISD
  38   1          InitBreakPoint();
  39   1          sInitUART1();
  40   1       
  41   1          IP0 = 0x30;
  42   1          IP1 = 0x20;
  43   1          ET0 = 0;
  44   1          EX6 = 0 ;
  45   1          ES0 = 1;
  46   1          EAL = 1;
  47   1          _nop_();
  48   1          _nop_();
  49   1          _nop_();
  50   1          while(1)
  51   1          {
  52   2              P10 = 0;
  53   2              P10 = 1;
  54   2              ISDcheck();      // initialize uVision2 Debugger and continue program run
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 2   

  55   2              if((BPCTRL & 0x10) != 0) break;
  56   2          }
  57   1          _nop_();
  58   1          _nop_();
  59   1          _nop_();
  60   1          ET0 = 1;
  61   1          EX6 = 1;
  62   1          _nop_();
  63   1          _nop_();
  64   1          _nop_();
  65   1          #endif
  66   1          //++++++++++++++++++++++++++++++
  67   1          EAL = 1;                                //enable all interrupts
  68   1      }
  69          
  70          
  71          
  72          
  73          
  74          void InitBreakPoint  (void)
  75          {
  76   1          BPCTRL   = 0x01;
  77   1        BREAKL   = 0xff;
  78   1        BREAKH   = 0xff;
  79   1      }
  80          
  81          void epwmOutputDisable(void)
  82          {
  83   1        P1AQCSFRC = 0x05;           // force epwmxA and epwmxB output low
  84   1        P2AQCSFRC = 0x05;
  85   1        P3AQCSFRC = 0x05;
  86   1        P4AQCSFRC = 0x05;
  87   1      }
  88          
  89          void epwmOutputEnable(void)
  90          {
  91   1        P1AQCSFRC = 0x0F;           // software force disable
  92   1        P2AQCSFRC = 0x0F;
  93   1        P3AQCSFRC = 0x0F;
  94   1        P4AQCSFRC = 0x0F;
  95   1      }
  96          
  97          void InitADC(void)
  98          {
  99   1      
 100   1          AD_PD = 0;              //Power up ADD
 101   1          ADC_CLK_EN=1;
 102   1          ADC_CLK_DIV_SEL=0x03;    //system divided by 4
 103   1          ADCHS = 0x0f;           // select channel CH1-CH4
 104   1          
 105   1        
 106   1        
 107   1          DAC1_PD = 1;            // DAC12 down
 108   1          DAC2_PD = 1;
 109   1        
 110   1        
 111   1        
 112   1          C1PDO1PD=CFG2;                //COMP1 power off and OP1 power on
 113   1          C2PDO2PD=CFG2;                //COMP2 power off and OP2 power on
 114   1          C3PDO3PD=CFG2;                //COMP3 power off and OP3 power on
 115   1        
 116   1        
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 3   

 117   1          LDO25_PD=0;             //use internal 2.5V for AD VREF
 118   1          BP4=0;                  //CH4 normal and no bypass
 119   1        
 120   1          SWFTRG=1;
 121   1          INTEN=1;
 122   1          AD4OST=0x0000;          //AD offset   0xFC
 123   1      
 124   1        
 125   1        
 126   1          EADC=1;
 127   1          IADC=0;
 128   1      
 129   1        }
 130          
 131          
 132          void Initepwm(void)
 133          {
 134   1        
 135   1        
 136   1        // config IO for ePWM output
 137   1      
 138   1        P22_FN=CFG1;          //P22 output  PWM3B
 139   1        P23_FN=CFG1;          //P23 output  PWM3A
 140   1        
 141   1        P24_FN=CFG1;          //P24 output  PWM2B
 142   1        P25_FN=CFG1;          //P25 output  PWM2A
 143   1        
 144   1        P26_FN=CFG1;          //P26 output  PWM1B
 145   1        P27_FN=CFG1;          //P27 output  PWM1A
 146   1        
 147   1      //  P00_FN=CFG1;          //P00 output  PWM4B
 148   1      //  P01_FN=CFG1;          //P01 output  PWM4A 
 149   1      
 150   1      
 151   1      // set period 
 152   1      
 153   1        P1TBPRD = 0x0190;           // 400 step per pwm period or 10KHz
 154   1        P2TBPRD = 0x0190;
 155   1        P3TBPRD = 0x0190;
 156   1        P4TBPRD = 0x0190;
 157   1      
 158   1        
 159   1      //enable epwm clock 
 160   1        
 161   1        
 162   1        EPWM1_ENCLK =1;             // clock for pwm1 ~ pwm4 is enable,and synchronize all channel disable
 163   1        EPWM2_ENCLK =1;
 164   1        EPWM3_ENCLK =1;
 165   1        EPWM4_ENCLK =1;
 166   1        TBCLKSYNC=0;
 167   1        
 168   1        
 169   1        //pwm count up or down
 170   1        
 171   1        P1CTRMODE=TB_COUNT_UPDOWN;     // period load from shadow,up down mode,synchronize at CTR = ZERO
 172   1        P2CTRMODE=TB_COUNT_UPDOWN;
 173   1        P3CTRMODE=TB_COUNT_UPDOWN;
 174   1        P4CTRMODE=TB_COUNT_UPDOWN;
 175   1        
 176   1        
 177   1        P1PRDLD=TB_SHADOW;
 178   1        
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 4   

 179   1        
 180   1        //time base free run or emulation 
 181   1        
 182   1        P1FREE_SOFT=FREE_RUN;             // time base free run when emulation
 183   1        P2FREE_SOFT=FREE_RUN;
 184   1        P3FREE_SOFT=FREE_RUN;
 185   1        P4FREE_SOFT=FREE_RUN;
 186   1      
 187   1      // shadow register load mode
 188   1      
 189   1      
 190   1        P1SHDWA_MODE = CC_SHADOW;;            // shadow on,update at CTR = ZERO
 191   1        P1SHDWB_MODE = CC_SHADOW;
 192   1        P1LOADA_MODE = CC_CTR_ZERO;
 193   1        P1LOADB_MODE = CC_CTR_ZERO;
 194   1        
 195   1        P2SHDWA_MODE = CC_SHADOW;;            // shadow on,update at CTR = ZERO
 196   1        P2SHDWB_MODE = CC_SHADOW;
 197   1        P2LOADA_MODE = CC_CTR_ZERO;
 198   1        P2LOADB_MODE = CC_CTR_ZERO;
 199   1        
 200   1        P3SHDWA_MODE = CC_SHADOW;;            // shadow on,update at CTR = ZERO
 201   1        P3SHDWB_MODE = CC_SHADOW;
 202   1        P3LOADA_MODE = CC_CTR_ZERO;
 203   1        P3LOADB_MODE = CC_CTR_ZERO;
 204   1        
 205   1        P4SHDWA_MODE = CC_SHADOW;;            // shadow on,update at CTR = ZERO
 206   1        P4SHDWB_MODE = CC_SHADOW;
 207   1        P4LOADA_MODE = CC_CTR_ZERO;
 208   1        P4LOADB_MODE = CC_CTR_ZERO;
 209   1        
 210   1        
 211   1        
 212   1        //PWMxA waveform counter condition
 213   1        // when counter count up to cmpA value, PWMxA output is set high, when counter count down to cmpA value, 
             -PWMxA output is clear
 214   1        // when cmpB is disable 
 215   1        
 216   1        P1CADA=AQ_CLEAR;                    
 217   1        P1CAUA=AQ_SET;
 218   1        P1CBDA=AQ_NO_ACTION;                
 219   1        P1CBUA=AQ_NO_ACTION;
 220   1        P1PRDA=AQ_NO_ACTION;
 221   1        P1ZROA=AQ_NO_ACTION;
 222   1        
 223   1        P2CADA=AQ_CLEAR;                    
 224   1        P2CAUA=AQ_SET;
 225   1        P2CBDA=AQ_NO_ACTION;                 
 226   1        P2CBUA=AQ_NO_ACTION;
 227   1        P2PRDA=AQ_NO_ACTION;
 228   1        P2ZROA=AQ_NO_ACTION;
 229   1        
 230   1        
 231   1        P3CADA=AQ_CLEAR;                     
 232   1        P3CAUA=AQ_SET;
 233   1        P3CBDA=AQ_NO_ACTION;                   
 234   1        P3CBUA=AQ_NO_ACTION;
 235   1        P3PRDA=AQ_NO_ACTION;
 236   1        P3ZROA=AQ_NO_ACTION;
 237   1        
 238   1        
 239   1        P4CADA=AQ_CLEAR;                     
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 5   

 240   1        P4CAUA=AQ_SET;
 241   1        P4CBDA=AQ_NO_ACTION;                
 242   1        P4CBUA=AQ_NO_ACTION;
 243   1        P4PRDA=AQ_NO_ACTION;
 244   1        P4ZROA=AQ_NO_ACTION;
 245   1        
 246   1        
 247   1        
 248   1      
 249   1      //  P1ZROA = AQ_SET;               // CTR = ZERO set,CTR = CMPA up clear,CTR = PRD nothing,CTR = CMPA down nothing
 250   1      //  P1CAUA = AQ_CLEAR;
 251   1      //  P1PRDA = AQ_NO_ACTION;
 252   1      //  P1CADA = AQ_NO_ACTION;
 253   1      //  P1CBDA = AQ_NO_ACTION;         // when cmpB pwmxA do nothing
 254   1      //  P1CBUA = AQ_NO_ACTION;
 255   1      
 256   1      
 257   1      //  P1ZROA = AQ_SET;              
 258   1      //  P1CAUA = AQ_NO_ACTION;              // CTR = ZERO set,CTR = CMPA up nothing,CTR = PRD nothing,CTR = CMPA down 
             -nothing
 259   1      //  P1PRDA = AQ_NO_ACTION;
 260   1      //  P!CADA = AQ_NO_ACTION;
 261   1      //  P1CBUA = AQ_CLEAR;                // CTR increment upto CMPB  then clear PWMxA output
 262   1      //  P1CBDA = AQ_NO_ACTION;
 263   1      ;
 264   1      
 265   1      
 266   1        //PWMxB waveform counter condition , PWMxB can be use seperately by setting P1OUT_MODE=DB_DISABLE
 267   1        // when counter count up to cmpA value, PWMxB output is clear, when counter count down to cmpA value, PWM
             -xB output is set,  PWMxB is complement of PWMxA
 268   1        // when cmpB is disable 
 269   1        
 270   1      //  P1CADB=AQ_SET;                    
 271   1      //  P1CAUB=AQ_CLEAR;
 272   1      //  P1CBDB=AQ_NO_ACTION;                
 273   1      //  P1CBUB=AQ_NO_ACTION;
 274   1      //  P1PRDB=AQ_NO_ACTION;
 275   1      //  P1ZROB=AQ_NO_ACTION;
 276   1        
 277   1      
 278   1      //Dead band generator control enable and set dead band time
 279   1      
 280   1      
 281   1        P1OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling 
             -edge delay on PWMxB
 282   1        P1POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
 283   1        P1IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epw
             -mxA,
 284   1      
 285   1        P2OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling 
             -edge delay on PWMxB
 286   1        P2POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
 287   1        P2IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epw
             -mxA,
 288   1      
 289   1        P3OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling 
             -edge delay on PWMxB
 290   1        P3POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
 291   1        P3IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epw
             -mxA,
 292   1      
 293   1        P4OUT_MODE=DB_FULL_ENABLE;   // output is dead band full enable, rising edge delay on PWMxA and falling 
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 6   

             -edge delay on PWMxB
 294   1        P4POLSEL=DB_ACTV_HIC;        //PWMxB is inverted or active high complement
 295   1        P4IN_MODE=DB_AUAD;           // rising edge delay source from epwmxA, falling edge delay source from epw
             -mxA,
 296   1      
 297   1      
 298   1      
 299   1      //  P1OUT_MODE=DB_FULL_ENABLE;              // delay source is epwmxA,dead band full,epwmxA invert
 300   1      //  P1POLSEL=DB_ACTV_LOC;
 301   1      //  P1IN_MODE=DB_AUAD;
 302   1       
 303   1      
 304   1      
 305   1      
 306   1        P1DBRED = 0x0032;//0x0A           // rise edge dead time is 1.25uS
 307   1        P2DBRED = 0x0032;
 308   1        P3DBRED = 0x0032;
 309   1        P4DBRED = 0x0032;
 310   1        
 311   1        P1DBFED = 0x0032;               // fall edge dead time is 1.25uS
 312   1        P2DBFED = 0x0032;
 313   1        P3DBFED = 0x0032;
 314   1        P4DBFED = 0x0032;
 315   1      
 316   1      
 317   1      //   P1OUT_MODE=DB_DISABLE;           // dead band is bypass
 318   1      //   P2OUT_MODE=DB_DISABLE;   
 319   1      //   P3OUT_MODE=DB_DISABLE;   
 320   1      //   P4OUT_MODE=DB_DISABLE;   
 321   1      
 322   1      
 323   1      
 324   1      // trip zone control: OSHT ---for one time; CBC for cycle by cycle
 325   1      
 326   1        P1TZ_OSHT = TZ_ENABLE;      // OSHT enable
 327   1        P1TZ_CBC =   TZ_DISABLE;
 328   1        
 329   1        P2TZ_OSHT = TZ_ENABLE;        // OSHT enable
 330   1        P2TZ_CBC =   TZ_DISABLE;
 331   1        
 332   1        P3TZ_OSHT = TZ_ENABLE;        // OSHT enable
 333   1        P3TZ_CBC =   TZ_DISABLE;
 334   1        
 335   1        P4TZ_OSHT = TZ_ENABLE;        // OSHT enable
 336   1        P4TZ_CBC =   TZ_DISABLE;
 337   1        
 338   1        P1TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
 339   1        P1TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
 340   1        
 341   1        P2TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
 342   1        P2TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
 343   1        
 344   1        P3TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
 345   1        P3TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
 346   1        
 347   1          
 348   1        P4TZA=TZ_HIZ;              // when trigger,epwmxA high impedance
 349   1        P4TZB=TZ_HIZ;              // when trigger,epwmxB high impedance
 350   1        
 351   1        
 352   1      // trip zone interrupt  ???  no description in datasheet
 353   1      
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 7   

 354   1        
 355   1        
 356   1        
 357   1      //  P1TZEINT = 0x00;            // CBC trigger interrupt and OST interrupt disable
 358   1      //  P2TZEINT = 0x00;
 359   1      //  P3TZEINT = 0x00;
 360   1      //  P4TZEINT = 0x00;
 361   1      
 362   1      
 363   1      
 364   1      //event trigger select 
 365   1      
 366   1        P1ET_INTEN=1;             //enable epwmx_INT interrupt
 367   1        P1ET_INTSEL=ET_CTR_ZERO;  // epwm interrupt enable at CTR = ZERO
 368   1        P1ET_SOCAEN=1;            //enable SOCA pulse
 369   1        P1ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
 370   1        P1ET_SOCBEN=0 ;           //disable SOCB pulse
 371   1        P1ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO    
 372   1       
 373   1        P2ET_INTEN=1;             //enable epwmx_INT interrupt
 374   1        P2ET_INTSEL=ET_CTR_ZERO;  // epwm interrupt enable at CTR = ZERO
 375   1        P2ET_SOCAEN=1;            //enable SOCA pulse
 376   1        P2ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
 377   1        P2ET_SOCBEN=0 ;           //disable SOCB pulse
 378   1        P2ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO    
 379   1       
 380   1        P3ET_INTEN=1;             //enable epwmx_INT interrupt
 381   1        P3ET_INTSEL=ET_CTR_ZERO;  // epwm interrupt enable at CTR = ZERO
 382   1        P3ET_SOCAEN=1;            //enable SOCA pulse
 383   1        P3ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
 384   1        P3ET_SOCBEN=0 ;           //disable SOCB pulse
 385   1        P3ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO    
 386   1       
 387   1        P4ET_INTEN=1;             //enable epwmx_INT interrupt
 388   1        P4ET_INTSEL=ET_CTR_ZERO;  // epwm interrupt enable at CTR = ZERO
 389   1        P4ET_SOCAEN=1;            //enable SOCA pulse
 390   1        P4ET_SOCASEL=ET_CTR_ZERO;  // enable SOCA,SOCA is CTR = ZERO
 391   1        P4ET_SOCBEN=0 ;           //disable SOCB pulse
 392   1        P4ET_SOCBSEL=ET_CTR_ZERO;  // SOCB is CTR = ZERO    
 393   1       
 394   1       
 395   1       
 396   1       //event trigger prescaler, generate SOCA and SOCB pulse for AD conversion
 397   1       
 398   1       P1ET_INTPRD=ET_1ST;        //generate interrupt on 1st event
 399   1       P1ET_INTCNT= ET_1ST;      // event counter period =1
 400   1       P1ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
 401   1       P1ET_SOCACNT=ET_1ST;      // SOCA event counter =1
 402   1       P1ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
 403   1       P1ET_SOCBCNT=ET_DISABLE;
 404   1       
 405   1       P2ET_INTPRD=ET_1ST;        //generate interrupt on 1st event
 406   1       P2ET_INTCNT= ET_1ST;      // event counter period =1
 407   1       P2ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
 408   1       P2ET_SOCACNT=ET_1ST;      // SOCA event counter =1
 409   1       P2ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
 410   1       P2ET_SOCBCNT=ET_DISABLE;
 411   1       
 412   1       P3ET_INTPRD=ET_1ST;        //generate interrupt on 1st event
 413   1       P3ET_INTCNT= ET_1ST;      // event counter period =1
 414   1       P3ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
 415   1       P3ET_SOCACNT=ET_1ST;      // SOCA event counter =1
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 8   

 416   1       P3ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
 417   1       P3ET_SOCBCNT=ET_DISABLE;
 418   1            
 419   1       P4ET_INTPRD=ET_1ST;        //generate interrupt on 1st event
 420   1       P4ET_INTCNT= ET_1ST;      // event counter period =1
 421   1       P4ET_SOCAPRD=ET_1ST;      //generate SOCA pulse on 1at event
 422   1       P4ET_SOCACNT=ET_1ST;      // SOCA event counter =1
 423   1       P4ET_SOCBPRD=ET_DISABLE;  //SOCB is not used
 424   1       P4ET_SOCBCNT=ET_DISABLE;
 425   1            
 426   1      
 427   1      
 428   1      
 429   1      
 430   1      //set PWM period
 431   1      
 432   1      
 433   1      
 434   1        P1TBPRD = 0x07D0;           // pwm period is 0x0190@8MHz 10KHz 0x7D0@40MHz; 0x031f?
 435   1        P2TBPRD = 0x07D0;
 436   1        P3TBPRD = 0x07D0;
 437   1        P4TBPRD = 0x07D0;
 438   1      
 439   1      
 440   1      
 441   1        P1CMPA = 0x01E8;            // CMPA counter value
 442   1        P2CMPA = 0x01E8;
 443   1        P3CMPA = 0x01E8;
 444   1        P4CMPA = 0x01E8;
 445   1        
 446   1        P1CMPB = 0x0190;            // CMPA counter value
 447   1        P2CMPB = 0x0190;
 448   1        P3CMPB = 0x0190;
 449   1        P4CMPB = 0x0190;
 450   1        
 451   1        
 452   1      
 453   1        TBCLKSYNC = 1;          // all epwm channel synchronize enable
 454   1      
 455   1        CLR_EPWM1_INT();
 456   1        CLR_EPWM2_INT();
 457   1        CLR_EPWM3_INT();
 458   1        CLR_EPWM4_INT();
 459   1        
 460   1        
 461   1        I2FR = 1;                //rising edge triger interrupt
 462   1        EX2 = 1;                // enable epwm1,2,3 interrupt
 463   1        //ex3 = 1;                // enable epwm4 interrupt
 464   1      }
 465          
 466          
 467          void InitComparator(void)
 468          {
 469   1        
 470   1          P21_FN= CFG2;                // P21 output COMP1
 471   1          P14_FN= CFG2;                // P14 output COMP2
 472   1          P13_FN= CFG2;                // P13 output COMP3
 473   1          P12_FN= CFG2;                // P12 output COMP4
 474   1          
 475   1        
 476   1        
 477   1          C1PDO1PD=CFG1;                //COMP1 power on and OP1 power off
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 9   

 478   1          C2PDO2PD=CFG1;                //COMP2 power on and OP2 power off
 479   1          C3PDO3PD=CFG1;                //COMP3 power on and OP3 power off
 480   1          C4PD=0;                       //COMP4 power on
 481   1        
 482   1        
 483   1        
 484   1          C1_INT_SEL=CFG2;              //COMP1 at rising/falling edge triiger 
 485   1          C2_INT_SEL=CFG2;              //COMP2 at rising/falling edge triiger
 486   1          C3_INT_SEL=CFG2;              //COMP3 at rising/falling edge triiger
 487   1          C4_INT_SEL=CFG2;              //COMP4 at rising/falling edge triiger
 488   1        
 489   1        
 490   1          C1_EN=1;                      //C1 interrupt enable
 491   1          C2_EN=1;                      //C2 interrupt enalbe
 492   1          C3_EN=1;                      //C3 interrupt enalbe
 493   1          C4_EN=1;                      //C4 interrupt enalbe
 494   1          
 495   1          
 496   1          C1INT=0;                      //clear C1 INT flag
 497   1          C2INT=0;                      //clear C2 INT flag
 498   1          C3INT=0;                      //clear C3 INT flag
 499   1          C4INT=0;                      //clear C4 INT flag
 500   1        
 501   1          INT_CPU=1;                    //pass C234 interrupt to EX4
 502   1        
 503   1          EX4=1;
 504   1          EX1=1;
 505   1          IE1=0;
 506   1          IEX4=0;
 507   1      }
 508          
 509          
 510          
 511          void InitWatchDog(void)
 512          {
 513   1          WDTREL = 0xFF;
 514   1        WDT = 1;
 515   1        SWDT = 1;
 516   1          P1_FN_L = P1_FN_L & 0xFC;               //p1_0 as GPIO
 517   1          P1_DD = P1_DD & 0xFE;                 //p1_0 as output
 518   1      }
 519          
 520          
 521          
 522          
 523          #define GPIO(pin,fn_cfg,in_out,res_en_dis,pull_up_dwn,drive_4_8ma )  FN_##pin=fn_cfg;DD_##pin=in_out;PE_##
             -pin=res_en_dis;PS_##pin=pull_up_dwn;DS_##pin=drive_4_8ma;
 524          
 525          void InitGPIO(void)
 526          {
 527   1          P0_FN_L = 0x00;                 // P00 ~ P03as GPIO
 528   1          P0_FN_H = 0x00;                 // P04 ~ P07 as GPIO
 529   1          P0_DD = 0x00;                   //  P00 ~  P07 intput
 530   1          P0_PE = 0xFF;                   // output resistor enable 
 531   1          P0_DS = 0x00;                   //drive current =4mA
 532   1          P0_PS=  0x00;                   //pull down resistor 
 533   1        
 534   1          P1_FN_L = 0x00;                 // P10 ~ P13 as GPIO
 535   1          P1_FN_H = 0x00;                 // P14 ~ P17 as GPIO
 536   1          P1_DD = 0x00;                   // P10 ~ P17 intput
 537   1          P1_PE = 0xFF;                   // output resistor enable 
 538   1          P1_DS = 0x00;                   //drive current =4mA
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 10  

 539   1          P1_PS=  0x00;                   //pull down resistor 
 540   1        
 541   1          P2_FN_L = 0x00;                 // P20 ~ P23 as GPIO
 542   1          P2_FN_H = 0x00;                 // P24 ~ P27 as GPIO
 543   1          P2_DD = 0x00;                   // P20~ P27 intput
 544   1          P2_PE = 0xFF;                   // pull/down resistor enable  
 545   1          P2_DS = 0x00;                   //drive current =4mA
 546   1          P2_PS=  0x00;                   //pull down resistor 
 547   1        
 548   1        // use P26 and P00 as output
 549   1        
 550   1          P00_FN= CFG0;                // P00 as GPIO
 551   1          P00_DD = OUTPUT;               //P00 as output
 552   1          P00_PE = RES_DIS;               //P00 pull resistor off
 553   1          P00_DS = I_4MA;
 554   1      
 555   1            
 556   1            GPIO(P20,CFG1,INPUT,RES_EN,PULL_DOWN,I_4MA);        //P20 as EXT2
 557   1            GPIO(P15,CFG2,INPUT,RES_EN,PULL_DOWN,I_4MA);        //P15 as TIMER3 T_EX
 558   1            GPIO(P04,CFG0,OUTPUT,RES_EN,PULL_DOWN,I_4MA);       //use P14 for timer0 ouput to test timer3 capture
 559   1            GPIO(P26,CFG0,OUTPUT,RES_DIS,PULL_DOWN,I_4MA);      //P26 for LED indication
 560   1        
 561   1      }
 562          
 563          void InitTimer01(void)
 564          {
 565   1          T01_DIV_L= 0x05;                 //clock divider is 122, must write T01_DIV_L first;
 566   1          T01_DIV_H= 0x00;                
 567   1          TMOD = 0x10;                   //timer1 is 16bit timer, timer0 is 13 bit
 568   1          TL0 = 0x0;
 569   1          TH0= 0xfe;
 570   1          
 571   1          TL1=0x0;
 572   1          TH1=0x0;
 573   1        
 574   1        
 575   1          ET0 = 1;                                //enable timer0 overflow interrupt
 576   1          ET1 = 1;                                //enable timer1 overflow interrupt
 577   1          TR0= 1;                                //start timer0
 578   1          TR1 = 1;    
 579   1      }
 580          
 581          void InitTimer3(void)
 582          {
 583   1        
 584   1        
 585   1        //capture mode setting
 586   1        
 587   1      //  T3PS = 0;               // no divider
 588   1      //  T3RC= 0;               //reset T3 capture register
 589   1      //  T3CTR=0;               //reset T3 counter
 590   1      //  T3CT=0;                //capture clock from cpu
 591   1      //  T3CPRL=1;             //capture mode select
 592   1      //  T3EXEN=1;             //enable T3 external EX pin
 593   1      //  T3EX_INV=0;           //T3 EX pin ,trigger on rising edge
 594   1      //  T3TF_EINT  =1;        // timer3 overflow interrupt enable
 595   1      //  T3TR = 1;             // start timer3 
 596   1      //  T3TF=0;               //clear T3 overflow flag
 597   1      //  T3EXF=0;              //clear T3 EX trigger flag
 598   1      //  IE1=0;                //clear  EX1 interrupt flag
 599   1      //   EX1=1;               //enable EX1 interrupt
 600   1        
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 11  

 601   1        //timer mode setting
 602   1        
 603   1          T3PS = 0;               // no divider
 604   1        T3RC = 0xE0C0;
 605   1      
 606   1        T3TF_EINT  =1;              // timer4 overflow interrupt enable
 607   1        T3TR = 1;       // start timer4
 608   1        CLR_T3_INT();
 609   1        EX1 = 1;
 610   1        IE1=0;
 611   1        
 612   1        
 613   1      }
 614          
 615          void InitTimer4(void)
 616          {
 617   1        T4PS = 0;               // no divider
 618   1        T4RC = 0xE0C0;
 619   1      
 620   1        T4TF_EINT  =1;              // timer4 overflow interrupt enable
 621   1        T4TR = 1;       // start timer4
 622   1        CLR_T4_INT();
 623   1        EX6 = 1;
 624   1        IEX6=0;
 625   1      }
 626          void InitTimer5(void)
 627          {
 628   1        T5PS = 0;                     // no divider
 629   1        T5RC = 0x10C0;
 630   1        
 631   1        T5TF_EINT  =1;                // timer4 overflow interrupt enable
 632   1        T5TR = 1;                     // start timer4
 633   1        T5TF=0;                       // clear interrupt flag
 634   1      
 635   1        
 636   1        I3FR=1;
 637   1        EX3 = 1;
 638   1        IEX3=0;
 639   1      }
 640          void InitTimer6(void)
 641          {
 642   1        T6PS = 0;                     // no divider
 643   1        T6RC = 0x10C0;
 644   1        
 645   1        T6TF_EINT  =1;              // timer4 overflow interrupt enable
 646   1        T6TR = 1;                   // start timer4
 647   1        T6TF=0;                     // clear interrupt flag
 648   1      
 649   1        
 650   1      
 651   1        EX5 = 1;
 652   1        IEX5=0;
 653   1      }
 654          void SystemClock(void)
 655          {
 656   1          
 657   1          RC80M_RES = 0x60;
 658   1          RC80M_CAP=0x40;
 659   1      
 660   1        
 661   1        RC80M_C3=0x4f;            //80MHz RC oscillator set=0x4f ;    40MHz RC oscillator set = 0x59
 662   1         RC80M_C2=0x3f;           //80MHz RC oscillator set=0x3f ;    40MHz RC oscillator set = 0x3a
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 12  

 663   1        
 664   1          #pragma asm
 665   1          nop
 666   1          nop
 667   1          nop
 668   1          nop
 669   1          nop
 670   1          nop
 671   1          nop
 672   1          nop
 673   1          nop
 674   1          nop
 675   1          nop
 676   1          nop
 677   1          nop
 678   1          nop
 679   1          nop
 680   1          nop
 681   1          nop
 682   1          nop
 683   1          nop
 684   1          nop
 685   1          nop
 686   1          nop
 687   1          nop
 688   1          nop
 689   1          nop
 690   1          nop
 691   1          nop
 692   1          nop
 693   1          nop
 694   1          nop
 695   1          nop
 696   1          nop
 697   1          nop
 698   1          #pragma endasm
 699   1          
 700   1          #if sysclk == freq_4MHz
                  CLK_DIV_L = 0x14;
                  #endif
 703   1          
 704   1          #if sysclk == freq_8MHz
                  CLK_DIV_L = 0x0a;
                  #endif
 707   1          
 708   1          #if sysclk == freq_10MHz
                  CLK_DIV_L = 0x08;
                  #endif
 711   1          
 712   1          #if sysclk == freq_16MHz
                  CLK_DIV_L = 0x05;
                  #endif
 715   1          
 716   1          #if sysclk == freq_20MHz
                  CLK_DIV_L = 0x04;
                  #endif
 719   1          
 720   1           #if sysclk == freq_40MHz
                  CLK_DIV_L = 0x02;
                  #endif
 723   1          
 724   1          
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 13  

 725   1          #if sysclk == freq_80MHz
 726   1          CLK_DIV_L = 0x01;
 727   1          #endif
 728   1          
 729   1          CLK_DIV_H = 0x00;
 730   1          
 731   1          #pragma asm
 732   1          nop
 733   1          nop
 734   1          nop
 735   1          nop
 736   1          nop
 737   1          nop
 738   1          nop
 739   1          nop
 740   1          nop
 741   1          nop
 742   1          nop
 743   1          nop
 744   1          nop
 745   1          nop
 746   1          nop
 747   1          nop
 748   1          nop
 749   1          nop
 750   1          nop
 751   1          nop
 752   1          nop
 753   1          nop
 754   1          nop
 755   1          nop
 756   1          nop
 757   1          nop
 758   1          nop
 759   1          nop
 760   1          nop
 761   1          nop
 762   1          nop
 763   1          nop
 764   1          #pragma endasm
 765   1      }
 766          
 767          
 768          
 769          
 770          
 771          
 772          //initial UART1, there are 2 different ways to generate baudrate
 773          //way 1
 774          void sInitUART1(void)
 775          {
 776   1        S0CON  = 0x50;          // set as 8-bit UART,  enable serial 0 reception, enable serial 0 multiprocessor fu
             -nction
 777   1          WDCON = 0x80;            // 0x80: baud rate = (2^smod) * Fclk / (64 * (2^10 - s0rel));
 778   1                                    // 0x00: baud rate = (2^smod) * Fclk / (32 * 12 * (256 - th1));
 779   1                                    // smod = 0;  Fclk = system clock
 780   1      //    S0RELL = 0xF3;             //Fclk = 8MHz, baud rate = 9600
 781   1        
 782   1          #if sysclk == freq_4MHz
                  S0RELL = 0xF3;               
                  #endif
 785   1        
C51 COMPILER V9.54   INITIAL                                                               01/30/2019 11:23:11 PAGE 14  

 786   1        #if sysclk == freq_8MHz
                  S0RELL = 0xF3;               
                  #endif
 789   1        
 790   1          #if sysclk == freq_10MHz
                  S0RELL = 0xF1;               
                  #endif
 793   1        
 794   1          #if sysclk == freq_16MHz
                  S0RELL = 0xe6;               
                  #endif
 797   1        
 798   1          #if sysclk == freq_20MHz
                  S0RELL = 0xe2;               
                  #endif
 801   1        
 802   1        #if sysclk == freq_40MHz
                     S0RELL = 0xbf;              
                  #endif
 805   1       
 806   1        
 807   1        #if sysclk == freq_80MHz
 808   1             S0RELL = 0x7e;              
 809   1          #endif
 810   1        
 811   1          S0RELH = 0x03;  
 812   1      }
 813          
 814          void sInitUART2(void)
 815          {
 816   1          S1CON  = 0x90;            //enable serial 1 reception, enable serial 0 multiprocessor function
 817   1                                      //s1con.7 = 1: 8-bit UART(mode B)    s1con.7 = 0: 9-bit UART(mode A)
 818   1          S1RELL = 0xE6;            //baud rate = Fclk / (32 * (2^10 - s0rel));
 819   1          S1RELH = 0x03;            //Fclk = 8MHz, baud rate = 9600
 820   1      }
 821          
 822          
 823          void InitDAC(void)
 824          {
 825   1          DAC1_PD=0;    //power up DAC1
 826   1          DAC2_PD=0;    //power up DAC2
 827   1        DAC1_VREF=0;    //use 3.3V as vref
 828   1        DAC2_VREF=0;    //use 3.3V as vref
 829   1        ADC_DAC_SEL1=0; //select DAC output
 830   1        ADC_DAC_SEL2=0; //select DAC output
 831   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3420    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
