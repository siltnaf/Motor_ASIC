C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE INITIAL
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SRC\initial.c OPTIMIZE(0,SPEED) REGFILE(.\OUTPUT\motor.ORC) BROWSE INTVE
                    -CTOR(0X2000) INCDIR(.\INC) DEBUG OBJECTEXTEND CODE PRINT(.\files\initial.lst) TABS(2) SRC(.\OUTPUT\initial.SRC)

line level    source

   1          #include "register.h"
   2          #include <intrins.h>
   3          #include "app.h"
   4          #include "initial.h"
   5          #include "ISD51.H"
   6          
   7          
   8          
   9          
  10          void InitEXT(void)
  11          { 
  12   1      //    EINT1_EN=0; 
  13   1      //    EINT2_EN=1;       //enable EXT2
  14   1      //    EINT3_EN=0;
  15   1      //    EINT4_EN=0;
  16   1        
  17   1            EXINT_EN = 0x02;          //RXINT_EN cannot be read, it can be write only
  18   1                                      //EXINT_EN= 0x01      -----enable EXT1
  19   1                                      //          0x02      -----enable EXT2
  20   1                                      //          0x04      -----enable EXT3
  21   1                                      //          0x08      -----enable EXT4
  22   1        
  23   1          EINT2_CFG=RISING_EDGE;    //rising edge trigger
  24   1          EX0=1;
  25   1          IT0=1;
  26   1          IE0=0;
  27   1          INT_REG1 &=0xf0;              
  28   1        
  29   1      }
  30          
  31          void InitISDDebug(void)
  32          {
  33   1        
  34   1          EAL = 0;
  35   1          //ISD51++++++++++++++++++++++++++
  36   1          #if ISDDebug == ENABLE_ISD
  37   1          InitBreakPoint();
  38   1          sInitUART1();
  39   1       
  40   1          IP0 = 0x30;
  41   1          IP1 = 0x20;
  42   1          ET0 = 0;
  43   1          EX6 = 0 ;
  44   1          ES0 = 1;
  45   1          EAL = 1;
  46   1          _nop_();
  47   1          _nop_();
  48   1          _nop_();
  49   1          while(1)
  50   1          {
  51   2              P10 = 0;
  52   2              P10 = 1;
  53   2              ISDcheck();      // initialize uVision2 Debugger and continue program run
  54   2              if((BPCTRL & 0x10) != 0) break;
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 2   

  55   2          }
  56   1          _nop_();
  57   1          _nop_();
  58   1          _nop_();
  59   1          ET0 = 1;
  60   1          EX6 = 1;
  61   1          _nop_();
  62   1          _nop_();
  63   1          _nop_();
  64   1          #endif
  65   1          //++++++++++++++++++++++++++++++
  66   1          EAL = 1;                                //enable all interrupts
  67   1      }
  68          
  69          
  70          
  71          
  72          
  73          void InitBreakPoint  (void)
  74          {
  75   1          BPCTRL   = 0x01;
  76   1        BREAKL   = 0xff;
  77   1        BREAKH   = 0xff;
  78   1      }
  79          
  80          void epwmOutputDisable(void)
  81          {
  82   1        P1AQCSFRC = 0x05;           // force epwmxA and epwmxB output low
  83   1        P2AQCSFRC = 0x05;
  84   1        P3AQCSFRC = 0x05;
  85   1        P4AQCSFRC = 0x05;
  86   1      }
  87          
  88          void epwmOutputEnable(void)
  89          {
  90   1        P1AQCSFRC = 0x0F;           // software force disable
  91   1        P2AQCSFRC = 0x0F;
  92   1        P3AQCSFRC = 0x0F;
  93   1        P4AQCSFRC = 0x0F;
  94   1      }
  95          
  96          void InitADC(void)
  97          {
  98   1      
  99   1          AD_PD = 0;              //Power up ADD
 100   1          ADC_CLK_EN=1;
 101   1          ADC_CLK_DIV_SEL=0x03;    //system divided by 4
 102   1          ADCHS = 0x08;           // select channel CH4
 103   1          DAC1_PD = 1;            // DAC12 down
 104   1          DAC2_PD = 1;
 105   1          LDO25_PD=0;             //use internal 2.5V for AD VREF
 106   1          BP4=0;                  //CH4 normal and no bypass
 107   1        
 108   1          SWFTRG=1;
 109   1          INTEN=1;
 110   1          AD4OST=0x0000;          //AD offset   0xFC
 111   1      
 112   1        
 113   1        
 114   1          EADC=1;
 115   1          IADC=0;
 116   1      
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 3   

 117   1        }
 118          
 119          
 120          void Initepwm(void)
 121          {
 122   1        P2_FN_H = 0x55;             // p2_4 ~ p2_7 as pwm2x ~ pwm1x
 123   1        P2_FN_L = P2_FN_L & 0x0F | 0x50;    // p2_2 ~ p2_3 as pwm3x
 124   1        //P0_FN_L = P0_FN_L & 0xF0 | 0x05;      // p0_0 ~ p0_1 as pwm4x
 125   1      
 126   1      //  P1TBPRD_L = 0x90;           // pwm period is 10KHz
 127   1      //  P1TBPRD_H = 0x01;
 128   1      //  P2TBPRD_L = 0x90;
 129   1      //  P2TBPRD_H = 0x01;
 130   1      //  P3TBPRD_L = 0x90;
 131   1      //  P3TBPRD_H = 0x01;
 132   1      //  P4TBPRD_L = 0x90;
 133   1      //  P4TBPRD_H = 0x01;
 134   1      
 135   1        PCLKCR = 0x1E;//0x1F              // clock for pwm1 ~ pwm4 is enable,and synchronize all channel disable
 136   1      //  PSYNCICR = 0x3C;//0x1F;           // all synchronize input enable
 137   1      
 138   1        P1TBCTL_L = 0x02;//0x12;            // period load from shadow,up down mode,synchronize at CTR = ZERO
 139   1        P1TBCTL_H = 0x80;           // time base free run when emulation
 140   1        P2TBCTL_L = 0x02;//0x12;
 141   1        P2TBCTL_H = 0x80;
 142   1        P3TBCTL_L = 0x02;//0x12;
 143   1        P3TBCTL_H = 0x80;
 144   1        P4TBCTL_L = 0x02;//0x12;
 145   1        P4TBCTL_H = 0x80;
 146   1      
 147   1      //  P1TBCTL_L = 0x00;           // period load from shadow,up mode
 148   1      //  P1TBCTL_H = 0x80;
 149   1      //  P2TBCTL_L = 0x00;
 150   1      //  P2TBCTL_H = 0x80;
 151   1      //  P3TBCTL_L = 0x00;
 152   1      //  P3TBCTL_H = 0x80;
 153   1      //  P4TBCTL_L = 0x00;
 154   1      //  P4TBCTL_H = 0x80;
 155   1      
 156   1        P1CMPCTL = 0x00;            // shadow on,update at CTR = ZERO
 157   1        P2CMPCTL = 0x00;
 158   1        P3CMPCTL = 0x00;
 159   1        P4CMPCTL = 0x00;
 160   1        P1AQCTLA_L = 0x60;            // when cmpA,count up is set,count down is clear
 161   1        P1AQCTLA_H = 0x00;            // when cmpB pwmxA do nothing
 162   1        P2AQCTLA_L = 0x60;
 163   1        P2AQCTLA_H = 0x00;
 164   1        P3AQCTLA_L = 0x60;
 165   1        P3AQCTLA_H = 0x00;
 166   1        P4AQCTLA_L = 0x60;
 167   1        P4AQCTLA_H = 0x00;
 168   1        P1AQCTLB_L = 0x00;//0x60;
 169   1        P1AQCTLB_H = 0x00;
 170   1        P2AQCTLB_L = 0x00;//0x60;
 171   1        P2AQCTLB_H = 0x00;
 172   1        P3AQCTLB_L = 0x00;//0x60;
 173   1        P3AQCTLB_H = 0x00;
 174   1        P4AQCTLB_L = 0x00;//0x60;
 175   1        P4AQCTLB_H = 0x00;
 176   1      
 177   1      //  P1AQCTLA_L = 0x12;              // CTR = ZERO set,CTR = CMPA up clear,CTR = PRD nothing,CTR = CMPA down nothin
             -g
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 4   

 178   1      //  P1AQCTLA_H = 0x00;              // when cmpB pwmxA do nothing
 179   1      //  P1AQCTLB_L = 0x02;              // CTR = ZERO set,CTR = CMPA up nothing,CTR = PRD nothing,CTR = CMPA down noth
             -ing
 180   1      //  P1AQCTLB_H = 0x01;              // CTR = CMPB clear
 181   1      //  P2AQCTLA_L = 0x12;
 182   1      //  P2AQCTLA_H = 0x00;
 183   1      //  P2AQCTLB_L = 0x02;
 184   1      //  P2AQCTLB_H = 0x01;
 185   1      //  P3AQCTLA_L = 0x12;
 186   1      //  P3AQCTLA_H = 0x00;
 187   1      //  P3AQCTLB_L = 0x02;
 188   1      //  P3AQCTLB_H = 0x01;
 189   1      //  P4AQCTLA_L = 0x12;
 190   1      //  P4AQCTLA_H = 0x00;
 191   1      //  P4AQCTLB_L = 0x02;
 192   1      //  P4AQCTLB_H = 0x01;
 193   1      
 194   1        P1DBCTL = 0x0B;             // delay source is epwmxA,dead band full,epwmxB invert
 195   1        P2DBCTL = 0x0B;
 196   1        P3DBCTL = 0x0B;
 197   1        P4DBCTL = 0x0B;
 198   1      //  P1DBCTL = 0x07;             // delay source is epwmxA,dead band full,epwmxA invert
 199   1      //  P2DBCTL = 0x07;
 200   1      //  P3DBCTL = 0x07;
 201   1      //  P4DBCTL = 0x07;
 202   1        P1DBRED_L = 0x32;//0x0A           // rise edge dead time is 1.25uS
 203   1        P1DBRED_H = 0x00;
 204   1        P2DBRED_L = 0x32;
 205   1        P2DBRED_H = 0x00;
 206   1        P3DBRED_L = 0x32;
 207   1        P3DBRED_H = 0x00;
 208   1        P4DBRED_L = 0x32;
 209   1        P4DBRED_H = 0x00;
 210   1        P1DBFED_L = 0x32;           // fall edge dead time is 1.25uS
 211   1        P1DBFED_H = 0x00;
 212   1        P2DBFED_L = 0x32;
 213   1        P2DBFED_H = 0x00;
 214   1        P3DBFED_L = 0x32;
 215   1        P3DBFED_H = 0x00;
 216   1        P4DBFED_L = 0x32;
 217   1        P4DBFED_H = 0x00;
 218   1      
 219   1      //  P1DBCTL = 0x00;             // dead band is bypass
 220   1      //  P2DBCTL = 0x00;
 221   1      //  P3DBCTL = 0x00;
 222   1      //  P4DBCTL = 0x00;
 223   1      
 224   1        P1TZSEL = 0x00;             // disable all trigger zone
 225   1        P2TZSEL = 0x00;
 226   1        P3TZSEL = 0x00;
 227   1        P4TZSEL = 0x00;
 228   1        P1TZCTL = 0x00;             // when trigger,epwmxA and epwmxB high impedance
 229   1        P2TZCTL = 0x00;
 230   1        P3TZCTL = 0x00;
 231   1        P4TZCTL = 0x00;
 232   1      //  P1TZEINT = 0x00;            // CBC trigger interrupt and OST interrupt disable
 233   1      //  P2TZEINT = 0x00;
 234   1      //  P3TZEINT = 0x00;
 235   1      //  P4TZEINT = 0x00;
 236   1      
 237   1      //  P1TZSEL = 0x01;             // OSHT enable
 238   1      //  P2TZSEL = 0x01;
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 5   

 239   1      //  P3TZSEL = 0x01;
 240   1      //  P4TZSEL = 0x01;
 241   1      //  P1TZCTL = 0x00;             // when trigger,epwmxA and epwmxB high impedance
 242   1      //  P2TZCTL = 0x00;
 243   1      //  P3TZCTL = 0x00;
 244   1      //  P4TZCTL = 0x00;
 245   1      //  P1TZEINT = 0x00;            // CBC trigger interrupt and OST interrupt disable
 246   1      //  P2TZEINT = 0x00;
 247   1      //  P3TZEINT = 0x00;
 248   1      //  P4TZEINT = 0x00;
 249   1      
 250   1      //  P1TZSEL = 0x02;             // CBC enable
 251   1      //  P2TZSEL = 0x02;
 252   1      //  P3TZSEL = 0x02;
 253   1      //  P4TZSEL = 0x02;
 254   1      //  P1TZCTL = 0x00;             // when trigger,epwmxA and epwmxB high impedance
 255   1      //  P2TZCTL = 0x00;
 256   1      //  P3TZCTL = 0x00;
 257   1      //  P4TZCTL = 0x00;
 258   1      //  P1TZEINT = 0x00;            // CBC trigger interrupt and OST interrupt disable
 259   1      //  P2TZEINT = 0x00;
 260   1      //  P3TZEINT = 0x00;
 261   1      //  P4TZEINT = 0x00;
 262   1      
 263   1        P1ETSEL_L = 0x09;           // epwm interrupt enable at CTR = ZERO
 264   1          P1ETSEL_H = 0x0C;//0xE0;//0xA0;//0x90;//0x0A;//0x09;                       // enable SOCA,SOCA is CTR 
             -= ZERO
 265   1        P2ETSEL_L = 0x00;
 266   1        P2ETSEL_H = 0x00;//0xF0;//0x00;
 267   1        P3ETSEL_L = 0x00;
 268   1        P3ETSEL_H = 0x00;
 269   1        P4ETSEL_L = 0x00;
 270   1        P4ETSEL_H = 0x00;
 271   1        P1ETPS_L = 0x05;            // 1 event 1 interrupt
 272   1          P1ETPS_H = 0x05;//0x50;//0x05;                        // 1 evnt,SOCA period is 1
 273   1        P2ETPS_L = 0x00;
 274   1          P2ETPS_H = 0x00;//0x50;
 275   1        P3ETPS_L = 0x00;
 276   1        P4ETPS_L = 0x00;
 277   1      
 278   1        P1TBPRD_L = 0xD0;           // pwm period is 0x0190@8MHz 10KHz 0x7D0@40MHz
 279   1        P1TBPRD_H = 0x07;
 280   1        P2TBPRD_L = 0xD0;
 281   1        P2TBPRD_H = 0x07;
 282   1        P3TBPRD_L = 0xD0;
 283   1        P3TBPRD_H = 0x07;
 284   1        P4TBPRD_L = 0xD0;
 285   1        P4TBPRD_H = 0x07;
 286   1      
 287   1      //  P1TBPRD_L = 0x1F;           // pwm period is 10KHz
 288   1      //  P1TBPRD_H = 0x03;
 289   1      //  P2TBPRD_L = 0x1F;
 290   1      //  P2TBPRD_H = 0x03;
 291   1      //  P3TBPRD_L = 0x1F;
 292   1      //  P3TBPRD_H = 0x03;
 293   1      //  P4TBPRD_L = 0x1F;
 294   1      //  P4TBPRD_H = 0x03;
 295   1      
 296   1        P1CMPA_L = 0xE8;            // pwm period is 0x0C8@8MHz 10KHz
 297   1        P1CMPA_H = 0x03;
 298   1        //P1CMPB_L = 0xC8;
 299   1        //P1CMPB_H = 0x00;
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 6   

 300   1        P2CMPA_L = 0xE8;
 301   1        P2CMPA_H = 0x03;
 302   1        //P2CMPB_L = 0xC8;
 303   1        //P2CMPB_H = 0x00;
 304   1        P3CMPA_L = 0xE8;
 305   1        P3CMPA_H = 0x03;
 306   1        //P3CMPB_L = 0xC8;
 307   1        //P3CMPB_H = 0x00;
 308   1        P4CMPA_L = 0xE8;
 309   1        P4CMPA_H = 0x03;
 310   1        //P4CMPB_L = 0xC8;
 311   1        //P4CMPB_H = 0x00;
 312   1      
 313   1      //  P1CMPA_L = 0xF4;            // pwm period is 0x0C8@8MHz 10KHz
 314   1      //  P1CMPA_H = 0x01;
 315   1      //  P1CMPB_L = 0xEE;
 316   1      //  P1CMPB_H = 0x02;
 317   1      //  P2CMPA_L = 0xE8;
 318   1      //  P2CMPA_H = 0x03;
 319   1      //  P2CMPB_L = 0xE2;
 320   1      //  P2CMPB_H = 0x04;
 321   1      //  P3CMPA_L = 0xDC;
 322   1      //  P3CMPA_H = 0x05;
 323   1      
 324   1      //  P1CMPA_L = 0x90;
 325   1      //  P1CMPA_H = 0x01;
 326   1      //  P1CMPB_L = 0x90;
 327   1      //  P1CMPB_H = 0x01;
 328   1      //  P2CMPA_L = 0x90;
 329   1      //  P2CMPA_H = 0x01;
 330   1      //  P2CMPB_L = 0x90;
 331   1      //  P2CMPB_H = 0x01;
 332   1      //  P3CMPA_L = 0x90;
 333   1      //  P3CMPA_H = 0x01;
 334   1      //  P3CMPB_L = 0x90;
 335   1      //  P3CMPB_H = 0x01;
 336   1      //  P4CMPA_L = 0x90;
 337   1      //  P4CMPA_H = 0x01;
 338   1      //  P4CMPB_L = 0x90;
 339   1      //  P4CMPB_H = 0x01;
 340   1      
 341   1      //  OPAMP_SEL = 0xF0;
 342   1      //  COMP_INT_EN = COMP_INT_EN | (1 << 0); // comparator1 interrupt output enable
 343   1      //  COMP_INT_SET = COMP_INT_SET & 0xFC;   // comparator1 falling edge trigger
 344   1      //  P1_FN_H = P1_FN_H & 0xF3 | 0x08;    // comp1 output
 345   1      //  ex1 = 1;                // enable comp1 to CPU interrupt
 346   1      
 347   1        PCLKCR = PCLKCR | 1;          // all epwm channel synchronize enable
 348   1      
 349   1        P1ETCLR = 1;
 350   1        I2FR = 1;
 351   1        EX2 = 1;                // enable epwm1,2,3 interrupt
 352   1        //ex3 = 1;                // enable epwm4 interrupt
 353   1      }
 354          
 355          
 356          void InitComparator(void)
 357          {
 358   1        
 359   1          P21_FN= CFG2;                // P21 output COMP1
 360   1          P14_FN= CFG2;                // P14 output COMP2
 361   1          P13_FN= CFG2;                // P13 output COMP3
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 7   

 362   1          P12_FN= CFG2;                // P12 output COMP4
 363   1          
 364   1        
 365   1        
 366   1          C1PDO1PD=CFG1;                //COMP1 power on and OP1 power off
 367   1          C2PDO2PD=CFG1;                //COMP2 power on and OP2 power off
 368   1          C3PDO3PD=CFG1;                //COMP3 power on and OP3 power off
 369   1          C4PD=0;                       //COMP4 power on
 370   1        
 371   1        
 372   1        
 373   1          C1_INT_SEL=CFG2;              //COMP1 at rising/falling edge triiger 
 374   1          C2_INT_SEL=CFG2;              //COMP2 at rising/falling edge triiger
 375   1          C3_INT_SEL=CFG2;              //COMP3 at rising/falling edge triiger
 376   1          C4_INT_SEL=CFG2;              //COMP4 at rising/falling edge triiger
 377   1        
 378   1        
 379   1          C1_EN=1;                      //C1 interrupt enable
 380   1          C2_EN=1;                      //C2 interrupt enalbe
 381   1          C3_EN=1;                      //C3 interrupt enalbe
 382   1          C4_EN=1;                      //C4 interrupt enalbe
 383   1          
 384   1          
 385   1          C1INT=0;                      //clear C1 INT flag
 386   1          C2INT=0;                      //clear C2 INT flag
 387   1          C3INT=0;                      //clear C3 INT flag
 388   1          C4INT=0;                      //clear C4 INT flag
 389   1        
 390   1          INT_CPU=1;                    //pass C234 interrupt to EX4
 391   1        
 392   1          EX4=1;
 393   1          EX1=1;
 394   1          IE1=0;
 395   1          IEX4=0;
 396   1      }
 397          
 398          
 399          
 400          void InitWatchDog(void)
 401          {
 402   1          WDTREL = 0xFF;
 403   1        WDT = 1;
 404   1        SWDT = 1;
 405   1          P1_FN_L = P1_FN_L & 0xFC;               //p1_0 as GPIO
 406   1          P1_DD = P1_DD & 0xFE;                 //p1_0 as output
 407   1      }
 408          
 409          
 410          void InitGPIO(void)
 411          {
 412   1          P0_FN_L = 0x00;                 // P00 ~ P03as GPIO
 413   1          P0_FN_H = 0x00;                 // P04 ~ P07 as GPIO
 414   1          P0_DD = 0x00;                   //  P00 ~  P07 intput
 415   1          P0_PE = 0xFF;                   // output resistor enable 
 416   1          P0_DS = 0x00;                   //drive current =4mA
 417   1          P0_PS=  0x00;                   //pull down resistor 
 418   1        
 419   1          P1_FN_L = 0x00;                 // P10 ~ P13 as GPIO
 420   1          P1_FN_H = 0x00;                 // P14 ~ P17 as GPIO
 421   1          P1_DD = 0x00;                   // P10 ~ P17 intput
 422   1          P1_PE = 0xFF;                   // output resistor enable 
 423   1          P1_DS = 0x00;                   //drive current =4mA
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 8   

 424   1          P1_PS=  0x00;                   //pull down resistor 
 425   1        
 426   1          P2_FN_L = 0x00;                 // P20 ~ P23 as GPIO
 427   1          P2_FN_H = 0x00;                 // P24 ~ P27 as GPIO
 428   1          P2_DD = 0x00;                   // P20~ P27 intput
 429   1          P2_PE = 0xFF;                   // pull/down resistor enable  
 430   1          P2_DS = 0x00;                   //drive current =4mA
 431   1          P2_PS=  0x00;                   //pull down resistor 
 432   1        
 433   1        // use P26 and P00 as output
 434   1        
 435   1          P00_FN= CFG0;                // P00 as GPIO
 436   1          P00_DD = OUTPUT;               //P00 as output
 437   1          P00_PE = RES_DIS;               //P00 pull resistor off
 438   1          P00_DS = I_4MA;
 439   1      
 440   1          P26_FN = CFG0;               //P26 as GPIO
 441   1          P26_DD = OUTPUT;               //P26 as output
 442   1          P26_PE = RES_DIS;               //P26 output resistor off
 443   1          P26_DS = I_4MA;
 444   1      
 445   1        
 446   1        
 447   1        
 448   1        // use P20 as EXT2
 449   1        
 450   1            P20_FN= CFG1;                //P20 as EXT2
 451   1            P20_DD = INPUT;               //P20 as input
 452   1            P20_PE = RES_EN;               // P20 output resistor enable
 453   1            P20_PS = PULL_DOWN;               //P20 with pull down resistor
 454   1            
 455   1            P04_FN= CFG1;                //P20 as EXT2
 456   1            P04_DD = OUTPUT;               //P20 as input
 457   1            P04_PE = RES_EN;               // P20 output resistor enable
 458   1            P04_PS = PULL_DOWN;               //P20 with pull down resistor
 459   1        
 460   1          hh=P2_FN_L|0x0;
 461   1        
 462   1      }
 463          
 464          void InitTimer01(void)
 465          {
 466   1          T01_DIV = 0x0240;                 //clock divider is 122
 467   1          TMOD = 0x10;                   //timer1 is 16bit timer, timer0 is 13 bit
 468   1          TL0 = 0x0;
 469   1          TH0= 0x00;
 470   1          
 471   1          TL1=0x0;
 472   1          TH1=0x0;
 473   1        
 474   1        
 475   1          ET0 = 1;                                //enable timer0 overflow interrupt
 476   1          ET1 = 1;                                //enable timer1 overflow interrupt
 477   1          TR0= 1;                                //start timer0
 478   1          TR1 = 1;    
 479   1      }
 480          
 481          void InitTimer3(void)
 482          {
 483   1        T3PS = 0;               // no divider
 484   1        T3RC= 0x00C0;
 485   1      
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 9   

 486   1        T3TF_EINT  =1;              // timer4 overflow interrupt enable
 487   1        T3TR = 1;       // start timer4
 488   1        T3TF=0;
 489   1        IE1=0;
 490   1         EX1=1;
 491   1      }
 492          
 493          void InitTimer4(void)
 494          {
 495   1        T4PS = 0;               // no divider
 496   1        T4RC = 0xE0C0;
 497   1      
 498   1        T4TF_EINT  =1;              // timer4 overflow interrupt enable
 499   1        T4TR = 1;       // start timer4
 500   1        CLR_T4_INT();
 501   1        EX6 = 1;
 502   1        IEX6=0;
 503   1      }
 504          void InitTimer5(void)
 505          {
 506   1        T5PS = 0;                     // no divider
 507   1        T5RC = 0x10C0;
 508   1        
 509   1        T5TF_EINT  =1;                // timer4 overflow interrupt enable
 510   1        T5TR = 1;                     // start timer4
 511   1        T5TF=0;                       // clear interrupt flag
 512   1      
 513   1        
 514   1        I3FR=1;
 515   1        EX3 = 1;
 516   1        IEX3=0;
 517   1      }
 518          void InitTimer6(void)
 519          {
 520   1        T6PS = 0;                     // no divider
 521   1        T6RC = 0x10C0;
 522   1        
 523   1        T6TF_EINT  =1;              // timer4 overflow interrupt enable
 524   1        T6TR = 1;                   // start timer4
 525   1        T6TF=0;                     // clear interrupt flag
 526   1      
 527   1        
 528   1      
 529   1        EX5 = 1;
 530   1        IEX5=0;
 531   1      }
 532          void SystemClock(void)
 533          {
 534   1          RC80M_RES = 0x2e;
 535   1          #pragma asm
 536   1          nop
 537   1          nop
 538   1          nop
 539   1          nop
 540   1          nop
 541   1          nop
 542   1          nop
 543   1          nop
 544   1          nop
 545   1          nop
 546   1          nop
 547   1          nop
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 10  

 548   1          nop
 549   1          nop
 550   1          nop
 551   1          nop
 552   1          nop
 553   1          nop
 554   1          nop
 555   1          nop
 556   1          nop
 557   1          nop
 558   1          nop
 559   1          nop
 560   1          nop
 561   1          nop
 562   1          nop
 563   1          nop
 564   1          nop
 565   1          nop
 566   1          nop
 567   1          nop
 568   1          nop
 569   1          #pragma endasm
 570   1        
 571   1          CLK_DIV_L = 0x02;
 572   1          CLK_DIV_H = 0x00;
 573   1          
 574   1          #pragma asm
 575   1          nop
 576   1          nop
 577   1          nop
 578   1          nop
 579   1          nop
 580   1          nop
 581   1          nop
 582   1          nop
 583   1          nop
 584   1          nop
 585   1          nop
 586   1          nop
 587   1          nop
 588   1          nop
 589   1          nop
 590   1          nop
 591   1          nop
 592   1          nop
 593   1          nop
 594   1          nop
 595   1          nop
 596   1          nop
 597   1          nop
 598   1          nop
 599   1          nop
 600   1          nop
 601   1          nop
 602   1          nop
 603   1          nop
 604   1          nop
 605   1          nop
 606   1          nop
 607   1          #pragma endasm
 608   1      }
 609          
C51 COMPILER V9.54   INITIAL                                                               10/25/2018 10:13:59 PAGE 11  

 610          
 611          
 612          //initial UART1, there are 2 different ways to generate baudrate
 613          //way 1
 614          void sInitUART1(void)
 615          {
 616   1        S0CON  = 0x50;          // set as 8-bit UART,  enable serial 0 reception, enable serial 0 multiprocessor fu
             -nction
 617   1          WDCON = 0x80;            // 0x80: baud rate = (2^smod) * Fclk / (64 * (2^10 - s0rel));
 618   1                                    // 0x00: baud rate = (2^smod) * Fclk / (32 * 12 * (256 - th1));
 619   1                                    // smod = 0;  Fclk = system clock
 620   1          S0RELL = 0xF3;             //Fclk = 8MHz, baud rate = 9600
 621   1          S0RELH = 0x03;  
 622   1      }
 623          
 624          void sInitUART2(void)
 625          {
 626   1          S1CON  = 0x90;            //enable serial 1 reception, enable serial 0 multiprocessor function
 627   1                                      //s1con.7 = 1: 8-bit UART(mode B)    s1con.7 = 0: 9-bit UART(mode A)
 628   1          S1RELL = 0xE6;            //baud rate = Fclk / (32 * (2^10 - s0rel));
 629   1          S1RELH = 0x03;            //Fclk = 8MHz, baud rate = 9600
 630   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1782    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
